{"version":3,"file":"static/js/490.a8308408.chunk.js","mappings":"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","sources":["hooks/useWarehousesActionsCreator.hook.ts","components/AppPages/PageWarehouses.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import { ITableAction, ITableListContext } from '../components/TableList/tableTypes.types';\nimport { IModalProviderContext, useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { WarehousesService } from './useWarehousesService.hook';\nimport { IWarehouse, IWarehouseReqData } from '../redux/warehouses/warehouses.types';\nimport { Modals } from '../components/ModalProvider/Modals';\nimport { ApiDirType } from '../redux/APP_CONFIGS';\nimport { IWarehouseFormData } from '../components/Forms/FormCreateWarehouse';\n\nexport type WarehouseActionCreatorOptions = {\n  ctx: ITableListContext<IWarehouse>;\n  service: WarehousesService;\n  modalService: IModalProviderContext;\n};\nconst createWarehouseReqData = (data: IWarehouseFormData, _id?: string): IWarehouseReqData => {\n  const reqData = {\n    data: {\n      label: data?.label!,\n    },\n  };\n  if (_id) {\n    return {\n      ...reqData,\n      _id,\n    };\n  }\n\n  return reqData;\n};\n\nexport type WarehouseActionGenerator = (options: WarehouseActionCreatorOptions) => ITableAction;\nexport type WarehouseTableActionsCreator = (ctx: ITableListContext) => ITableAction[];\n\nconst createNewWarehouseAction: WarehouseActionGenerator = ({ service, modalService, ctx }) => {\n  return {\n    icon: 'plus',\n    onClick: () => {\n      const modal = modalService.handleOpenModal({\n        Modal: Modals.FormCreateWarehouse,\n        props: {\n          title: 'Створити склад',\n          dirType: ApiDirType.WAREHOUSES,\n          onSubmit: (data, o) => {\n            service.create({\n              data: createWarehouseReqData(data, ctx?.selectedRow?._id),\n              onLoading: ctx.onRefresh,\n              onSuccess: () => {\n                if (o?.closeAfterSave && modal?.onClose) {\n                  modal?.onClose();\n                }\n              },\n            });\n          },\n        },\n      });\n    },\n  };\n};\nconst editWarehouseAction: WarehouseActionGenerator = ({ service, modalService, ctx }) => {\n  return {\n    icon: 'edit',\n    onClick: () => {\n      const m = modalService.handleOpenModal({\n        Modal: Modals.FormCreateWarehouse,\n        props: {\n          edit: true,\n          title: 'Оновити дані складу',\n          dirType: ApiDirType.WAREHOUSES,\n          onSubmit: (data, o) => {\n            service.create({\n              data: createWarehouseReqData(data, ctx?.selectedRow?._id),\n              onLoading: ctx.onRefresh,\n              onSuccess: () => {\n                if (o?.closeAfterSave && m?.onClose) {\n                  m?.onClose();\n                }\n              },\n            });\n          },\n        },\n      });\n    },\n  };\n};\nconst refreshWarehousesDataAction: WarehouseActionGenerator = ({ service, modalService, ctx }) => {\n  return {\n    icon: 'refresh',\n    onClick: () => {\n      service.getAll({ data: { refresh: true } }).then();\n    },\n  };\n};\n\nconst actionGenerators = [createNewWarehouseAction, editWarehouseAction, refreshWarehousesDataAction];\n\nexport type UseWarehousesActionsCreatorOptions = { service: WarehousesService };\nconst useWarehousesActionsCreator = (): WarehouseTableActionsCreator => {\n  const modalService = useModalProvider();\n  const service: WarehousesService = useAppServiceProvider()[ServiceName.warehouses];\n\n  return (ctx: ITableListContext<IWarehouse>) => actionGenerators.map(a => a({ modalService, service, ctx }));\n};\n\nexport default useWarehousesActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useWarehousesSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\nimport useWarehousesActionsCreatorHook from '../../hooks/useWarehousesActionsCreator.hook';\nimport { warehousesTableColumns } from '../../data/warehauses.data';\nimport { IWarehouse } from '../../redux/warehouses/warehouses.types';\nimport { ServiceName, useAppServiceProvider } from '../../hooks/useAppServices.hook';\nimport { useNavigate } from 'react-router-dom';\n\ntype Props = {\n  path: PagePathType;\n};\nconst PageWarehouses: React.FC<any> = (props: Props) => {\n  const navigate = useNavigate();\n  const { getAll } = useAppServiceProvider()[ServiceName.warehouses];\n  const state = useWarehousesSelector();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n  const actionsCreator = useWarehousesActionsCreatorHook();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IWarehouse> => ({\n      tableData: state.warehouses,\n      tableTitles: warehousesTableColumns,\n      isFilter: false,\n      isSearch: true,\n      footer: false,\n      actionsCreator,\n      onRowClick(ev) {\n        ev?._id && navigate(ev?._id);\n      },\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, getAll, navigate, sortParams, state.warehouses]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.warehouses.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n          onSuccess(_data) {\n            console.log('PageWarehouses onSuccess getAll');\n          },\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.warehouses.length]);\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList tableTitles={warehousesTableColumns} {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageWarehouses;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["createWarehouseReqData","data","_id","reqData","label","_objectSpread","actionGenerators","_ref","service","modalService","ctx","icon","onClick","modal","handleOpenModal","Modal","Modals","props","title","dirType","ApiDirType","onSubmit","o","_ctx$selectedRow","create","selectedRow","onLoading","onRefresh","onSuccess","closeAfterSave","onClose","_ref2","m","edit","_ctx$selectedRow2","_ref3","getAll","refresh","then","useModalProvider","useAppServiceProvider","ServiceName","map","a","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","navigate","useNavigate","state","useWarehousesSelector","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","actionsCreator","useWarehousesActionsCreatorHook","tableConfig","useMemo","tableData","warehouses","tableTitles","warehousesTableColumns","isFilter","isSearch","footer","onRowClick","ev","onFilterSubmit","query","handleTableSort","param","sortOrder","dataPath","useEffect","length","_data","console","log","_jsx","AppGridPage","path","children","TableList","css","takeFullPlace","_templateObject2","_templateObject3"],"sourceRoot":""}