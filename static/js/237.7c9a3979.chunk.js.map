{"version":3,"file":"static/js/237.7c9a3979.chunk.js","mappings":"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","sources":["components/Forms/FormCreateCompany.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport { BusinessSubjectTypeEnum, ICompany } from '../../redux/companies/companies.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport { useAppServiceProvider } from '../../hooks/useAppServices.hook';\nimport ButtonGroup from '../atoms/ButtonGroup';\nimport { businessSubjectTypeFilterOptions } from '../../data/directories.data';\nimport t from '../../lang';\nimport { useAppForm } from '../../hooks';\nimport CustomSelect from '../atoms/Inputs/CustomSelect/CustomSelect';\nimport { ownershipTypeFilterOptions } from '../../data/companies.data';\nimport FlexBox from '../atoms/FlexBox';\nimport { ContractorsTypesEnum } from '../../redux/contractors/contractors.types';\n\nexport interface ICreateCompanyFormData\n  extends Omit<ICompany, '_id' | 'createdAt' | 'updatedAt' | 'company_token' | 'configs' | 'owner' | 'permissions'> {}\n\nconst validFormData = yup.object().shape({\n  name: yup.string().required(),\n  fullName: yup.string().required(),\n  label: yup.string(),\n  fullLabel: yup.string(),\n  email: yup.string().required(),\n  phone: yup.string(),\n  taxCode: yup.string(),\n  ownershipType: yup.string(),\n  businessSubjectType: yup.string().oneOf(Object.values(BusinessSubjectTypeEnum), 'Недопустима роль').required(),\n} as Record<keyof ICreateCompanyFormData, any>);\n\nexport interface FormCreateCompanyProps extends Omit<ModalFormProps<any, any, ICompany>, 'onSubmit'> {}\nconst FormCreateCompany: React.FC<FormCreateCompanyProps> = ({ defaultState, ...props }) => {\n  const { permissions } = useAppServiceProvider();\n\n  const {\n    register,\n    formState: { errors, isValid },\n    handleSubmit,\n    formValues: { businessSubjectType, type: currentType },\n    registerSelect,\n    setValue,\n  } = useAppForm<ICreateCompanyFormData>({\n    defaultValues: { businessSubjectType: BusinessSubjectTypeEnum.company, ...defaultState },\n    reValidateMode: 'onSubmit',\n    resolver: yupResolver(validFormData),\n  });\n\n  const formRenderConfig = useMemo(\n    () => ({\n      renderOwnershipTypeSelect: businessSubjectType === BusinessSubjectTypeEnum.company,\n      renderLabelInput:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderNamesInputs:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderPersonalTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderAttractionSourceSelect: currentType === ContractorsTypesEnum.CUSTOMER,\n    }),\n    [currentType, businessSubjectType]\n  );\n  function onFormSubmit(data: ICreateCompanyFormData) {\n    if (data) console.log(data);\n\n    permissions\n      .createCompany({\n        data,\n        onSuccess(data) {\n          console.log('Company created', data);\n          toast.success(`Company created: ${data?.name || data?.label}`);\n        },\n        onError() {\n          toast.error('Error');\n        },\n        onLoading() {},\n      })\n      .then();\n  }\n\n  return (\n    <Form fillHeight width={'480px'} {...props} onSubmit={handleSubmit(onFormSubmit)} isValid={isValid}>\n      <Inputs flex={1} overflow={'auto'}>\n        <InputLabel label={t('businessSubjectType')} error={errors.name} required>\n          <ButtonGroup\n            options={businessSubjectTypeFilterOptions}\n            onSelect={({ value }) => {\n              setValue('businessSubjectType', value);\n            }}\n          />\n        </InputLabel>\n\n        {formRenderConfig.renderOwnershipTypeSelect && (\n          <CustomSelect\n            {...registerSelect('ownershipType', {\n              options: ownershipTypeFilterOptions,\n              label: 'Форма власності',\n              placeholder: 'Оберіть форму власності компанії',\n            })}\n          />\n        )}\n\n        {formRenderConfig.renderNamesInputs && (\n          <>\n            <InputLabel label={t('name')} error={errors.name} required>\n              <InputText\n                placeholder={t('insertLabel')}\n                {...register('name')}\n                required\n                autoFocus={formRenderConfig.renderNamesInputs}\n              />\n            </InputLabel>\n\n            <InputLabel label={t('secondName')} error={errors.secondName} required>\n              <InputText placeholder={t('insertSecondName')} {...register('secondName')} required />\n            </InputLabel>\n          </>\n        )}\n\n        {formRenderConfig.renderLabelInput && (\n          <>\n            <InputLabel label={t('label')} error={errors.label} required={!formRenderConfig.renderNamesInputs}>\n              <InputText\n                placeholder={t('insertLabel')}\n                {...register('label')}\n                required={!formRenderConfig.renderNamesInputs}\n                autoFocus={!formRenderConfig.renderNamesInputs}\n              />\n            </InputLabel>\n            <InputLabel label={'Повна назва'} error={errors.fullName}>\n              <InputText placeholder={'Ввведіть повну назву'} {...register('fullName')} />\n            </InputLabel>\n          </>\n        )}\n\n        <InputLabel label={'Емейл (основний)'} error={errors.email} required>\n          <InputText placeholder={'Введіть основний емейл'} {...register('email')} type={'email'} required />\n        </InputLabel>\n        <InputLabel label={'Телефон (основний)'} error={errors.phone}>\n          <InputText placeholder={'Введіть осний контактний номер'} {...register('phone')} />\n        </InputLabel>\n\n        {formRenderConfig.renderTaxCode && (\n          <InputLabel label={t('taxCode')} error={errors.taxCode}>\n            <InputText placeholder={t('taxCode')} {...register('taxCode')} />\n          </InputLabel>\n        )}\n\n        {formRenderConfig.renderPersonalTaxCode && (\n          <InputLabel label={t('personalTaxCode')} error={errors.taxCode}>\n            <InputText placeholder={t('personalTaxCode')} {...register('personalTaxCode')} />\n          </InputLabel>\n        )}\n      </Inputs>\n    </Form>\n  );\n};\n\nconst Form = styled(ModalForm)``;\n\nconst Inputs = styled(FlexBox)`\n  width: 100%;\n\n  padding: 8px 16px 16px;\n\n  fill: ${({ theme }) => theme.accentColor.base};\n`;\n\nexport default FormCreateCompany;\n"],"names":["validFormData","yup","shape","name","required","fullName","label","fullLabel","email","phone","taxCode","ownershipType","businessSubjectType","oneOf","Object","values","BusinessSubjectTypeEnum","Form","styled","ModalForm","_templateObject","_taggedTemplateLiteral","Inputs","FlexBox","_templateObject2","_ref3","theme","accentColor","base","_ref","defaultState","props","_objectWithoutProperties","_excluded","permissions","useAppServiceProvider","_useAppForm","useAppForm","defaultValues","_objectSpread","reValidateMode","resolver","yupResolver","register","_useAppForm$formState","formState","errors","isValid","handleSubmit","_useAppForm$formValue","formValues","currentType","type","registerSelect","setValue","formRenderConfig","useMemo","renderOwnershipTypeSelect","renderLabelInput","includes","renderNamesInputs","renderPersonalTaxCode","renderTaxCode","renderAttractionSourceSelect","ContractorsTypesEnum","_jsx","fillHeight","width","onSubmit","data","console","log","createCompany","onSuccess","toast","concat","onError","onLoading","then","children","_jsxs","flex","overflow","InputLabel","t","error","ButtonGroup","options","businessSubjectTypeFilterOptions","onSelect","_ref2","value","CustomSelect","ownershipTypeFilterOptions","placeholder","_Fragment","InputText","autoFocus","secondName"],"sourceRoot":""}