{"version":3,"file":"static/js/535.0006e19a.chunk.js","mappings":"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","sources":["data/orders.data.ts","hooks/useOrdersService.hook.ts","redux/orders/orders.types.ts","hooks/useOrdersActionsCreator.hook.ts","components/AppPages/PageOrders.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { IOrder } from '../redux/orders/orders.types';\nimport t from '../lang';\nimport { SelectItem } from '../components/TableList/tableTypes.types';\n\nexport type DataPath =\n  | 'owner.label'\n  | 'owner.name'\n  | 'author.name'\n  | 'author.email'\n  | 'editor.name'\n  | 'editor.email'\n  | 'auditor.name'\n  | 'auditor.email'\n  | 'contractor.name'\n  | 'contractor.type'\n  | 'eventDate'\n  | 'type'\n  | 'status'\n  | 'amount'\n  | 'currency'\n  | 'comment'\n  | 'createdAt'\n  | 'updatedAt'\n  | 'mark.label'\n  | 'invoice.label'\n  | 'invoice.code'\n  | 'invoice.number'\n  | 'payment.label'\n  | 'payment.code'\n  | 'payment.number'\n  | 'order.code'\n  | 'total'\n  | 'manager.name'\n  | 'manager.code'\n  | 'customer.name'\n  | 'customer.phone'\n  | 'receiver.name'\n  | 'receiver.phone'\n  | 'invoices'\n  | 'payments'\n  | 'transporters';\n\nexport const ordersTableColumns: CellTittleProps<IOrder, DataPath>[] = [\n  {\n    top: { name: t('date'), align: 'center', path: 'eventDate' },\n    bottom: { name: t('time'), align: 'center' },\n    width: '90px',\n    action: 'dateSimple',\n  },\n  {\n    top: { name: t('status'), align: 'start', path: 'status' },\n    bottom: { name: t('type'), align: 'start', path: 'type' },\n    width: '100px',\n    action: 'status',\n  },\n  {\n    top: { name: t('amount'), align: 'end', path: 'total' },\n    bottom: { name: 'Валюта', align: 'end', path: 'currency' },\n    width: '120px',\n    action: 'numberWithSpaces',\n  },\n  {\n    top: { name: 'Менеджер', align: 'start', path: 'manager.name' },\n    bottom: { name: 'Код', align: 'start', path: 'manager.code' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Замовник', align: 'start', path: 'customer.name' },\n    bottom: { name: 'Телефон', align: 'start', path: 'customer.phone' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Отримувач', align: 'start', path: 'receiver.name' },\n    bottom: { name: 'Телефон', align: 'start', path: 'receiver.phone' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Інвойси', align: 'start', path: 'invoices' },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Оплати', align: 'start', path: 'payments' },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Перевізники', align: 'start', path: 'transporters' },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Коментар', align: 'start', path: 'comment' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Створено', align: 'center', path: 'createdAt' },\n    bottom: { name: 'Оновлено', align: 'center', path: 'updatedAt' },\n    width: '150px',\n    action: 'dateDbl',\n  },\n];\n\nexport const ordersSearchParams: SelectItem<DataPath>[] = [\n  {\n    label: 'Дата',\n    dataPath: 'eventDate',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n  { label: 'Мітка', dataPath: 'mark.label', filter: false, search: true, sort: true },\n  {\n    label: 'Статус',\n    dataPath: 'status',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n  {\n    label: t('type'),\n    dataPath: 'type',\n    filter: false,\n    search: true,\n    sort: true,\n  },\n  {\n    label: t('amount'),\n    dataPath: 'total',\n    filter: false,\n    search: true,\n    sort: true,\n  },\n  {\n    label: 'Оновлено',\n    dataPath: 'createdAt',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n  {\n    label: 'Створено',\n    dataPath: 'updatedAt',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n];\n","import { useMemo } from 'react';\nimport { useAppDispatch } from '../redux/store.store';\nimport { OnlyUUID, ServiceDispatcherAsync } from '../redux/global.types';\n// import { createOrderThunk, getAllOrdersThunk, getOrderByIdThunk } from '../redux/orders/orders.thunks';\nimport { IOrder, IOrderReqData } from '../redux/orders/orders.types';\nimport { AppQueryParams } from '../api';\n\ntype EmptyFn = (...args: any[]) => Promise<any>;\n\nexport interface OrdersService {\n  createOne: EmptyFn | ServiceDispatcherAsync<IOrderReqData, IOrder>;\n  deleteOne: EmptyFn | ServiceDispatcherAsync;\n  updateOne: EmptyFn | ServiceDispatcherAsync;\n  getById: EmptyFn | ServiceDispatcherAsync<OnlyUUID, IOrder>;\n  getAll:\n    | EmptyFn\n    | ServiceDispatcherAsync<\n        {\n          refresh?: boolean;\n          query?: AppQueryParams;\n        },\n        IOrder[]\n      >;\n  getSlotsByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n  getShipmentsByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n  getPaymentsByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n  getInvoicesByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n}\n\nconst useOrdersServiceHook = (): OrdersService => {\n  const dispatch = useAppDispatch();\n\n  return useMemo(\n    (): OrdersService => ({\n      createOne: async () => dispatch(() => {}),\n      getById: async () => dispatch(() => {}),\n      getAll: async () => dispatch(() => {}),\n      deleteOne: async () => dispatch(() => {}),\n      updateOne: async () => dispatch(() => {}),\n\n      getSlotsByOrderId: async () => dispatch(() => {}),\n      getShipmentsByOrderId: async () => dispatch(() => {}),\n      getPaymentsByOrderId: async () => dispatch(() => {}),\n      getInvoicesByOrderId: async () => dispatch(() => {}),\n    }),\n    [dispatch]\n  );\n};\n\nexport default useOrdersServiceHook;\n","// import { AppResponse, IBase, OnlyUUID } from '../global.types';\n// import { CurrencyCode } from '../transactions/transactions.types';\n// import { IBaseDirItem } from '../../components/Directories/dir.types';\n// import { ApiDirType } from '../APP_CONFIGS';\n// import { FilterOpt } from '../../components/ModalForm/ModalFilter';\n// import { IManager } from '../auth/auth.types';\n// import { ICompany } from '../companies/companies.types';\n// import { IPriceListItem } from '../priceManagement/priceManagement.types';\n//\n\nimport { AppResponse, IBase, OnlyUUID } from '../global.types';\nimport { IPriceListItem } from '../priceManagement/priceManagement.types';\nimport { ICompany } from '../companies/companies.types';\nimport { IManager } from '../auth/auth.types';\nimport { IBaseDirItem } from '../../components/Directories/dir.types';\nimport { ApiDirType } from '../APP_CONFIGS';\nimport { ContractorsTypesEnum } from '../contractors/contractors.types';\nimport { FilterOpt } from '../../components/ModalForm/ModalFilter';\n\nexport type OrderFilterOption = FilterOpt;\nexport enum OrderTypeEnum {\n  SIMPLE = 'SIMPLE',\n  SET = 'SET',\n}\nexport type OrderStatus = 'rejected' | 'approved' | 'pending' | 'error' | 'success' | 'warning' | 'info';\nexport interface IOrderSlotItem extends IPriceListItem {\n  owner: ICompany;\n  manager?: IManager;\n\n  origin?: IPriceListItem;\n}\n\nexport interface IOrderSlot extends IBase {\n  owner: ICompany;\n  items?: IOrderSlotItem[];\n  status?: OrderStatus;\n  warehouse?: IBaseDirItem<any, ApiDirType.WAREHOUSES>;\n  supplier?: IBaseDirItem<ContractorsTypesEnum.SUPPLIER, ApiDirType.CONTRACTORS>;\n}\nexport interface IOrder extends IBase {\n  owner: ICompany;\n  manager?: IManager;\n\n  customer?: any;\n  receiver?: any;\n\n  slots?: IOrderSlot[];\n  status?: OrderStatus;\n\n  payments?: OnlyUUID[];\n  destination?: string;\n  comment?: string;\n  innerComment?: string;\n}\n\nexport interface IAllOrderSlotItemsRes extends AppResponse<IOrderSlotItem[]> {}\nexport interface IOrderSlotItemRes extends AppResponse<IOrderSlotItem> {}\n\nexport interface IAllOrderSlotsRes extends AppResponse<IOrderSlot[]> {}\nexport interface IOrderSlotRes extends AppResponse<IOrderSlot> {}\nexport interface IAllOrdersRes extends AppResponse<IOrder[]> {}\nexport interface IOrderRes extends AppResponse<IOrder> {}\n\nexport interface IOrderReqData {\n  _id?: string;\n  data: IOrder;\n}\nexport interface IOrderSlotReqData {\n  _id?: string;\n  data: IOrderSlot;\n}\nexport interface IOrderSlotItemReqData {\n  _id?: string;\n  data: IOrderSlotItem;\n}\n\n// export type OrderStatus = 'rejected' | 'approved' | 'pending' | 'error' | 'success' | 'warning' | 'info';\n//\n// export enum OrderTypeEnum {\n//   SIMPLE = 'SIMPLE',\n//   SET = 'SET',\n// }\n//\n// export type OrderType = keyof typeof OrderTypeEnum;\n//\n// export type OrderFilterOption = FilterOpt<OrderType>;\n//\n// export enum OrderPriceTypeEnum {\n//   DEFAULT = 'DEFAULT',\n//   COMMISSION = 'COMMISSION',\n//   COMMISSION_FIX = 'COMMISSION_FIX',\n// }\n//\n// export type OrderPriceType = 'COMMISSION' | 'DEFAULT' | 'COMMISSION_FIX';\n//\n// export interface IOrderBase extends IBase {\n//   price?: number;\n//   priceType?: OrderPriceType;\n//   type?: OrderType;\n//   currency?: CurrencyCode;\n//   status?: OrderStatus;\n//   archived?: boolean;\n//   visible?: boolean;\n//   description?: string;\n//   tags?: string[];\n//   isService?: boolean;\n// }\n//\n// export interface IOrderSlot extends IPriceListItem {\n//   origin?: IPriceListItem;\n// }\n//\n// export interface IOrderInvoice extends IBase {\n//   order?: IOrder;\n//   payments?: IOrderPayment;\n//   payer?: IBaseDirItem<any, ApiDirType.CONTRACTORS>;\n//   bankInfo?: any;\n// }\n//\n// export interface IOrderShipment extends IBase {\n//   customer?: IBaseDirItem<any, ApiDirType.CONTRACTORS>;\n//   receiver?: IBaseDirItem<any, ApiDirType.CONTRACTORS>;\n// }\n//\n// export interface IOrderPayment extends IBase {\n//   invoice: IOrderInvoice;\n// }\n//\n// export interface IDestination extends Partial<IBase> {\n//   postCode?: string;\n//   region?: string;\n//   city?: string;\n//   street?: string;\n//   house?: string;\n//   room?: string;\n// }\n//\n// export interface ITransporter extends IBaseDirItem {}\n//\n// export interface IOrder extends IOrderBase {\n//   owner?: ICompany;\n//   author?: IManager;\n//   editor?: IManager;\n//   manager?: IManager;\n//\n//   // customer?: IBaseDirItem<any, ApiDirType.CONTRACTORS>;\n//   // receiver?: IBaseDirItem<any, ApiDirType.CONTRACTORS>;\n//   customer?: string;\n//   receiver?: string;\n//   destination?: string;\n//   transporter?: string;\n//   // destination?: IDestination;\n//   // transporter?: ITransporter;\n//\n//   slots?: IOrderSlot[];\n//   invoices?: IOrderInvoice[];\n//   payments?: IOrderPayment[];\n//   shipments?: IOrderShipment[];\n//\n//   comment?: string;\n//   innerComment?: string;\n// }\n//\n// export type OrderImage = { img_preview?: string; img_1x: string; img_2x: string; webp: string };\n//\n// export interface IOrderForReq extends Partial<Record<keyof IOrder, any>> {\n//   type?: OrderType;\n//   customer?: OnlyUUID;\n//   receiver?: OnlyUUID;\n//   slots?: OnlyUUID;\n//   invoices?: OnlyUUID;\n//   payments?: OnlyUUID;\n//   shipments?: OnlyUUID;\n//   comment?: string;\n//   innerComment?: string;\n//   status?: OrderStatus;\n//   tags?: string[];\n// }\n//\n// export interface IOrderReqData {\n//   _id?: string;\n//   data: IOrderForReq;\n// }\n//\n// export interface IOrderReqData {\n//   _id?: string;\n//   data: IOrderForReq;\n// }\n//\n// export interface IAllOrdersRes extends AppResponse<IOrder[]> {}\n//\n// export interface IOrderRes extends AppResponse<IOrder> {}\n//\n// export interface ICreateOrderRes extends AppResponse<IOrder> {}\n","import { useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { useCallback } from 'react';\nimport { ITableListContext, TableActionCreator } from '../components/TableList/tableTypes.types';\nimport { IOrder, OrderFilterOption, OrderTypeEnum } from '../redux/orders/orders.types';\nimport { Modals } from '../components/ModalProvider/Modals';\n\nconst orderFilterOptions: OrderFilterOption[] = [\n  {\n    label: OrderTypeEnum.SIMPLE,\n    value: OrderTypeEnum.SIMPLE,\n  },\n  {\n    label: OrderTypeEnum.SET,\n    value: OrderTypeEnum.SET,\n  },\n];\nexport type OrdersActionsCreator = TableActionCreator<IOrder>;\nconst useOrdersActionsCreatorHook = (): OrdersActionsCreator => {\n  const modals = useModalProvider();\n  // const { orders } = useAppServiceProvider();\n\n  return useCallback(\n    (ctx: ITableListContext<IOrder>) => [\n      {\n        name: 'archiveOrder',\n        icon: 'archive',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: () => {\n          if (ctx?.selectedRow?._id) window.confirm(`Архівувати замовення: ${ctx?.selectedRow?._id}`);\n        },\n      },\n      {\n        name: 'editOrder',\n        icon: 'edit',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: () => {\n          modals.handleOpenModal({\n            Modal: Modals.FormCreateOrder,\n            props: {\n              title: 'Edit order',\n              filterOptions: orderFilterOptions,\n            },\n          });\n        },\n      },\n      {\n        name: 'copyOrder',\n        icon: 'copy',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: () => {\n          modals.handleOpenModal({\n            Modal: Modals.FormCreateOrder,\n            props: {\n              title: `Copy order: ${ctx?.selectedRow?._id}`,\n              filterOptions: orderFilterOptions,\n            },\n          });\n        },\n      },\n      { separator: true },\n      {\n        name: 'createOrder',\n        icon: 'plus',\n        type: 'onlyIconFilled',\n        onClick: () => {\n          modals.handleOpenModal({\n            Modal: Modals.FormCreateOrder,\n            props: {\n              title: `Create order`,\n              filterOptions: orderFilterOptions,\n            },\n          });\n        },\n      },\n    ],\n    [modals]\n  );\n};\nexport default useOrdersActionsCreatorHook;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useOrdersSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\nimport { ordersSearchParams, ordersTableColumns } from '../../data/orders.data';\nimport useOrdersServiceHook from '../../hooks/useOrdersService.hook';\nimport { IOrder } from '../../redux/orders/orders.types';\nimport useOrdersActionsCreatorHook from '../../hooks/useOrdersActionsCreator.hook';\n// import useOrdersActionsCreatorHook from '../../hooks/useOrdersActionsCreator.hook';\n\ntype Props = {\n  path: PagePathType;\n};\n\nexport const useOrderTableConfigs = () => {\n  const service = useOrdersServiceHook();\n  const state = useOrdersSelector();\n  const { getAll } = service;\n  const actionsCreator = useOrdersActionsCreatorHook();\n  // const filterSelectors = useProductsFilterSelectorsHook();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IOrder> => ({\n      tableData: state.orders,\n      tableTitles: ordersTableColumns,\n      tableSortParams: ordersSearchParams.filter(el => el.sort),\n      isFilter: true,\n      isSearch: true,\n      footer: true,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, getAll, sortParams, state.orders]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.orders.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, getAll, isLoading, sortParams, state.orders.length, tableConfig]);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    filterParams,\n  };\n};\nconst PageOrders: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOrderTableConfigs();\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageOrders;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["ordersTableColumns","top","name","t","align","path","bottom","width","action","ordersSearchParams","label","dataPath","filter","search","sort","dispatch","useAppDispatch","useMemo","createOne","_createOne","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","apply","arguments","getById","_getById","_callee2","_context2","getAll","_getAll","_callee3","_context3","deleteOne","_deleteOne","_callee4","_context4","updateOne","_updateOne","_callee5","_context5","getSlotsByOrderId","_getSlotsByOrderId","_callee6","_context6","getShipmentsByOrderId","_getShipmentsByOrderId","_callee7","_context7","getPaymentsByOrderId","_getPaymentsByOrderId","_callee8","_context8","getInvoicesByOrderId","_getInvoicesByOrderId","_callee9","_context9","OrderTypeEnum","orderFilterOptions","SIMPLE","value","SET","modals","useModalProvider","useCallback","ctx","_ctx$selectedRow","_ctx$selectedRow4","_ctx$selectedRow5","icon","disabled","selectedRow","_id","onClick","_ctx$selectedRow2","_ctx$selectedRow3","window","confirm","concat","handleOpenModal","Modal","Modals","props","title","filterOptions","_ctx$selectedRow6","separator","type","useOrderTableConfigs","service","useOrdersServiceHook","state","useOrdersSelector","actionsCreator","useOrdersActionsCreatorHook","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","tableData","orders","tableTitles","tableSortParams","el","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","data","refresh","query","onLoading","then","handleTableSort","param","sortOrder","useEffect","length","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","_useOrderTableConfigs","_jsx","AppGridPage","children","TableList","_objectSpread","css","takeFullPlace","_templateObject2","_templateObject3"],"sourceRoot":""}