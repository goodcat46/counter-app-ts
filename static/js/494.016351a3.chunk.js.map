{"version":3,"file":"static/js/494.016351a3.chunk.js","mappings":"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","sources":["components/Forms/offers/OfferBaseInfoFormArea.tsx","components/atoms/AppTagsSelect.tsx","components/Forms/offers/OfferTagsFormArea.tsx","components/Forms/offers/categories/OfferFormCategoriesArea.tsx","components/Forms/offers/dimensions/DimensionsInputs.tsx","components/Forms/offers/dimensions/OfferDimensionsFormArea.tsx","components/Forms/offers/images/OfferFormImagesArea.tsx","components/Forms/offers/measurement/MeasuremenInputs.tsx","components/Forms/offers/measurement/OfferMeasurementFormArea.tsx","components/Forms/offers/properties/OfferFormPropertiesArea.tsx","components/Modals/CreateOfferModal.tsx"],"sourcesContent":["import { AccordionForm } from '../../atoms/FormArea/AccordionForm';\nimport { OfferFormAreaProps } from './types';\nimport {\n  OfferEntity,\n  OfferFormData,\n  OfferFullFormData,\n  OfferStatusEnum,\n  OfferTypeEnum,\n} from '../../../types/offers/offers.types';\nimport { useAppForm } from '../../../hooks';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport { t } from '../../../lang';\nimport InputText from '../../atoms/Inputs/InputText';\nimport FlexBox from '../../atoms/FlexBox';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect';\nimport { ApiDirType } from '../../../redux/APP_CONFIGS';\nimport TextareaPrimary from '../../atoms/Inputs/TextareaPrimary';\nimport { toReqData } from '../../../utils';\nimport useOffersService from '../../../hooks/useOffersService.hook';\nimport { MaybeNull } from '../../../types/utils.types';\nimport { useOfferLoadersProvider } from '../../Modals/CreateOfferModal';\nimport { OfferStatusFilterOptions } from '../../../data';\nimport { useDirectorySelector, useWarehousesSelector } from '../../../redux/selectors.store';\nimport { offerTypeFilterOptions } from '../../../data/modalFilterOptions.data';\nimport ButtonSwitch from '../../atoms/ButtonSwitch';\nimport ButtonsGroup from '../../atoms/ButtonsGroup';\n\nexport interface OfferBaseInfoFormAreaProps extends OfferFormAreaProps<OfferFullFormData> {\n  type?: MaybeNull<OfferTypeEnum>;\n  onSuccess?: (data: { data: OfferEntity }) => void;\n  edit?: boolean;\n}\n\nexport const OfferBaseInfoFormArea = ({ defaultValues, edit, type, onSuccess, _id }: OfferBaseInfoFormAreaProps) => {\n  const { isLoading, onLoading } = useOfferLoadersProvider();\n  const service = useOffersService();\n\n  const warehousesState = useWarehousesSelector();\n  const counterparties = useDirectorySelector(ApiDirType.COUNTERPARTIES).directory;\n  const brandsList = useDirectorySelector(ApiDirType.BRANDS).directory;\n\n  const {\n    formState: { errors },\n    register,\n    registerSelect,\n    formValues,\n    setValue,\n    handleSubmit,\n    ...appForm\n  } = useAppForm<OfferFullFormData>({\n    defaultValues: { visible: false, approved: OfferStatusEnum.pending, ...defaultValues, type },\n  });\n\n  function onValid(sData: OfferFormData) {\n    const productForSubmit = toReqData(sData, { ignorePaths: ['measurement'] });\n\n    !edit\n      ? service.create({\n          data: {\n            data: {\n              data: productForSubmit,\n            },\n          },\n          onSuccess: onSuccess,\n          onLoading: onLoading('offer_create'),\n        })\n      : service.updateById({\n          data: { data: { data: productForSubmit, _id } },\n          onSuccess: onSuccess,\n          onLoading: onLoading('offer_update'),\n        });\n  }\n\n  return (\n    <>\n      <AccordionForm\n        label={t('Base info')}\n        isLoading={!edit ? isLoading?.offer_create : isLoading?.offer_update}\n        onSubmit={handleSubmit(onValid)}\n        onReset={appForm.reset}\n        canSubmit={true}\n        expandable={false}\n      >\n        <ButtonsGroup\n          value={formValues?.type ?? OfferTypeEnum.GOODS}\n          options={offerTypeFilterOptions}\n          onSelect={o => setValue('type', o.value)}\n        />\n\n        <InputLabel label={t('label')} error={errors.label} required>\n          <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={12} fillWidth>\n          <InputLabel label={t('sku')} error={errors.sku}>\n            <InputText placeholder={t('sku')} {...register('sku')} />\n          </InputLabel>\n\n          <InputLabel label={t('Bar-code')} error={errors.barCode}>\n            <InputText placeholder={t('Bar-code')} {...register('barCode')} />\n          </InputLabel>\n        </FlexBox>\n\n        <CustomSelect\n          {...registerSelect('brand', {\n            options: brandsList,\n            label: t('brand'),\n            placeholder: t('selectBrand'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('warehouse', {\n            options: warehousesState.warehouses,\n            label: t('Select warehouse'),\n            placeholder: t('Select warehouse'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('supplier', {\n            options: counterparties,\n            label: t('Select supplier'),\n            placeholder: t('Select supplier'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('approved', {\n            options: OfferStatusFilterOptions,\n            label: t('status'),\n            placeholder: t('status'),\n            onlyValue: true,\n            valuePath: 'approved',\n          })}\n        />\n\n        <InputLabel label={t('description')} error={errors.description}>\n          <TextareaPrimary placeholder={t('description')} {...register('description')} />\n        </InputLabel>\n\n        <InputLabel label={t('Visibility')} error={errors.description}>\n          <ButtonSwitch\n            value={formValues.visible}\n            onChange={val => {\n              setValue('visible', val, { shouldTouch: true, shouldDirty: true });\n            }}\n          />\n        </InputLabel>\n      </AccordionForm>\n    </>\n  );\n};\n","import { useTagsSelector } from '../../redux/selectors.store';\nimport * as React from 'react';\nimport { useEffect, useMemo, useState } from 'react';\nimport FlexBox from './FlexBox';\nimport InputLabel from './Inputs/InputLabel';\nimport { t } from '../../lang';\nimport { tagsFilterOptions } from '../../data/modalFilterOptions.data';\nimport { Values } from '../../types/utils.types';\nimport TabSelector from './TabSelector';\nimport { TagTypeEnum } from '../../types/directories.types';\nimport { TagEntity } from '../../types/tags.types';\nimport TagButtonsFilter, { TagButtonsFilterProps } from './TagButtonsFilter';\nimport { useAppDispatch } from '../../redux/store.store';\nimport { getAllTagsThunk } from '../../redux/tags/tags.thunks';\nimport { useTheme } from 'styled-components';\nimport { useModalService } from '../../Providers/ModalProvider/ModalProvider';\nimport FormTags from '../Modals/FormTags';\nimport ActionsDropdown from './ActionsDropdown';\n\ntype FilterData = {\n  type: Values<typeof TagTypeEnum>;\n};\nexport const AppTagsSelect = ({\n  selected,\n  onSelect,\n  filterValue = { type: TagTypeEnum.OFFER },\n  onChangeIds,\n  value,\n  hideFilter,\n}: {\n  selected?: TagEntity;\n  onSelect?: (opt: TagEntity) => void;\n  filterValue?: FilterData;\n  hideFilter?: boolean;\n} & Pick<TagButtonsFilterProps<TagTypeEnum, TagEntity>, 'onChangeIds' | 'value'>) => {\n  const theme = useTheme();\n  // const service = useAppServiceProvider().get(AppModuleName.offers);\n  const dispatch = useAppDispatch();\n  const state = useTagsSelector();\n  const modalSrv = useModalService();\n  const [filter, setFilter] = useState<FilterData>(filterValue);\n  // const [current, setCurrent] = useState<TagEntity | undefined>();\n  // const loaders = useLoaders<'getList' | 'create' | 'update' | 'delete'>();\n\n  const list = useMemo(() => {\n    const type = filter.type;\n\n    return state.listsMap?.[type];\n  }, [filter.type, state.listsMap]);\n\n  // useEffect(() => {\n  //   if (selected) {\n  //     setCurrent(selected);\n  //   }\n  // }, [selected]);\n\n  // useEffect(() => {\n  //   if (list?.length && !current) {\n  //     if (onSelect && list[0]) {\n  //       onSelect(list[0]);\n  //     } else {\n  //       setCurrent(list[0]);\n  //     }\n  //   }\n  // }, [current, onSelect, list]);\n\n  useEffect(() => {\n    if (!list?.length) {\n      dispatch(\n        getAllTagsThunk({\n          params: { type: filter.type },\n        })\n      );\n    }\n  }, [dispatch, filter.type, list, list?.length]);\n\n  const onCreateNewPress = () => {\n    modalSrv.create(FormTags, { defaultValues: { type: filter.type } });\n  };\n\n  return (\n    <FlexBox gap={8}>\n      <FlexBox\n        fxDirection={'row'}\n        gap={8}\n        padding={'0 8px 8px'}\n        borderBottom={`1px solid ${theme.modalBorderColor}`}\n        justifyContent={'flex-end'}\n      >\n        <ActionsDropdown actions={[{ title: t('Create'), onPress: onCreateNewPress }]} />\n      </FlexBox>\n\n      {!hideFilter && (\n        <InputLabel label={t('Select tags group')}>\n          <TabSelector\n            options={tagsFilterOptions}\n            defaultValue={filter.type}\n            onSelect={({ value }) => {\n              value &&\n                setFilter(prev => {\n                  return { ...prev, type: value };\n                });\n            }}\n          />\n        </InputLabel>\n      )}\n\n      <TagButtonsFilter multiple options={list} onChangeIds={onChangeIds} value={value} />\n    </FlexBox>\n  );\n};\n","import { OfferFormAreaProps } from './types';\nimport { OfferEntity, OfferFullFormData } from '../../../types/offers/offers.types';\nimport { AccordionForm } from '../../atoms/FormArea/AccordionForm';\nimport { AppTagsSelect } from '../../atoms/AppTagsSelect';\nimport { useCurrentOffer } from '../../../hooks';\nimport { useOfferLoadersProvider } from '../../Modals/CreateOfferModal';\nimport { idsFromRefs, sortIds } from '../../../utils';\nimport { ServiceName, useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { FormEventHandler, useEffect, useMemo, useState } from 'react';\nimport { TagTypeEnum } from '../../../types/directories.types';\nimport { isArray } from 'lodash';\n\ntype OfferField = OfferFullFormData['tagsIds'] | OfferFullFormData['tags'];\n\nexport interface OfferTagsFormAreaProps extends OfferFormAreaProps<OfferField> {\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n  onSuccess?: (data: { data: OfferEntity }) => void;\n}\n\nconst OfferTagsFormArea = ({ disabled, offer }: OfferTagsFormAreaProps) => {\n  const Offer = useCurrentOffer(offer);\n  const loaders = useOfferLoadersProvider();\n  const initIds = sortIds(Offer?.tags?.map(p => p._id));\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const [selectedIds, setSelectedIds] = useState<string[]>(initIds);\n\n  const canSubmit = useMemo(() => {\n    return !!selectedIds?.length && initIds?.join(',') !== sortIds(selectedIds).join(',');\n  }, [initIds, selectedIds]);\n\n  const handleFormSubmit: FormEventHandler = ev => {\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    Offer &&\n      service.updateById({\n        onLoading: loaders.onLoading('tags'),\n        // onSuccess: (data, meta) => {},\n        data: {\n          data: {\n            _id: Offer._id,\n            data: { tagsIds: selectedIds },\n          },\n        },\n      });\n  };\n\n  useEffect(() => {\n    if (Offer?.tags) {\n      setSelectedIds(idsFromRefs(Offer?.tags));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AccordionForm\n      label={'Tags'}\n      isOpen={false}\n      disabled={disabled}\n      onSubmit={handleFormSubmit}\n      canSubmit={canSubmit}\n      isLoading={loaders.isLoading.tags}\n    >\n      <AppTagsSelect\n        filterValue={{ type: TagTypeEnum.OFFER }}\n        hideFilter\n        value={selectedIds}\n        onChangeIds={({ value }) => {\n          setSelectedIds(isArray(value) ? value : [value]);\n        }}\n      />\n    </AccordionForm>\n  );\n};\nexport default OfferTagsFormArea;\n\n// const Inner = styled.div``;\n// const ContainerChild = styled.div`\n//   @container sidebar (width < calc(64 px + 12 ch)) {\n//     display: none;\n//   }\n// `;\n","import { FormEventHandler, useEffect, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport styled from 'styled-components';\nimport { FlexUl } from '../../../atoms/FlexBox';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { OfferFormAreaProps } from '../types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { t } from '../../../../lang';\nimport { OfferEntity, OfferFormRelatedFieldKeyEnum, OfferFullFormData } from '../../../../types/offers/offers.types';\nimport { idsFromRefs, sortIds } from '../../../../utils';\nimport OfferCategoriesSelector from './OfferCategoriesSelector';\nimport { useCurrentOffer } from '../../../../hooks';\n\nexport interface OfferFormCategoriesAreaProps\n  extends OfferFormAreaProps<OfferFullFormData[OfferFormRelatedFieldKeyEnum.categoriesIds]> {\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n  onSuccess?: (data: OfferEntity) => void;\n}\n\nexport const OfferFormCategoriesArea = ({ offer, disabled }: OfferFormCategoriesAreaProps) => {\n  const Offer = useCurrentOffer(offer);\n  const loaders = useOfferLoadersProvider();\n  const initIds = sortIds(Offer?.categories?.map(p => p._id));\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const [categoriesIds, setCategoriesIds] = useState<string[]>(initIds);\n\n  const canSubmit = useMemo(() => {\n    return !!categoriesIds?.length && initIds?.join(',') !== sortIds(categoriesIds).join(',');\n  }, [initIds, categoriesIds]);\n\n  const handleFormSubmit: FormEventHandler = ev => {\n    ev.preventDefault();\n\n    Offer &&\n      service.updateById({\n        onLoading: loaders.onLoading('categories'),\n        data: {\n          data: {\n            _id: Offer._id,\n            data: { categoriesIds },\n          },\n        },\n        onSuccess: (data, meta) => {},\n      });\n  };\n\n  useEffect(() => {\n    if (Offer?.categories) {\n      setCategoriesIds(idsFromRefs(Offer?.categories));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AccordionForm\n      label={t('Categories')}\n      onSubmit={handleFormSubmit}\n      disabled={disabled}\n      isLoading={loaders.isLoading?.categories}\n      canSubmit={canSubmit}\n      maxHeight={'300px'}\n      isOpen={false}\n    >\n      <ListBox flex={1} overflow={'auto'}>\n        <OfferCategoriesSelector onChangeIds={setCategoriesIds} offer={Offer} />\n      </ListBox>\n    </AccordionForm>\n  );\n};\nconst ListBox = styled(FlexUl)`\n  padding-bottom: 8px;\n`;\n","import { t } from 'lang';\nimport * as React from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport styled from 'styled-components';\nimport { UseFormReturn } from 'react-hook-form/dist/types';\nimport { DimensionsKeyType, IDimensions } from 'types/utils.types';\n\nexport interface DimensionsFormData {\n  dimensions?: IDimensions;\n}\n\nexport const dimensionsInputsProps: {\n  label?: string;\n  placeholder?: string;\n  name: DimensionsKeyType;\n}[] = [\n  { name: 'height', label: t('Height'), placeholder: t('Sm') },\n  { name: 'width', label: t('Width'), placeholder: t('Sm') },\n  { name: 'length', label: t('Length'), placeholder: t('Sm') },\n  { name: 'weight', label: t('Weight'), placeholder: t('Kg') },\n];\n\nconst DimensionsInputs = <TContext = any,>({\n  form,\n  disabled,\n}: {\n  disabled?: boolean;\n  form: UseFormReturn<DimensionsFormData, TContext>;\n}) => {\n  const errors = form?.formState?.errors?.dimensions;\n\n  return (\n    <Box fillWidth>\n      {dimensionsInputsProps.map(input => {\n        return (\n          <InputLabel key={input.name} label={input.label} error={errors && errors[input.name]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={1}\n              type={'number'}\n              {...form.register(`dimensions.${input.name}`, {\n                valueAsNumber: true,\n                min: 1,\n              })}\n              disabled={disabled}\n            />\n          </InputLabel>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 8px;\n\n  @media screen and (min-width: 480px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nexport default DimensionsInputs;\n","import DimensionsInputs, { DimensionsFormData } from './DimensionsInputs';\nimport { useAppForm } from '../../../../hooks';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport useOffersService from '../../../../hooks/useOffersService.hook';\nimport { ToastService } from '../../../../services';\nimport { useState } from 'react';\nimport { OfferFormAreaProps } from '../types';\nimport { t } from '../../../../lang';\nimport { OfferFormData } from '../../../../types/offers/offers.types';\n\nexport interface OfferDimensionsFormSectionProps extends OfferFormAreaProps<OfferFormData['dimensions']> {}\n\nexport const OfferDimensionsFormArea = ({\n  defaultValues,\n  _id,\n  disabled,\n  ...props\n}: OfferDimensionsFormSectionProps) => {\n  const service = useOffersService();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useAppForm<DimensionsFormData>({\n    defaultValues: { dimensions: defaultValues ?? {} },\n  });\n\n  const onValid = (sData: DimensionsFormData) => {\n    service.updateById({\n      data: { data: { data: sData, _id } },\n      onSuccess(d) {\n        ToastService.success(`Product updated`);\n      },\n      onError: e => {\n        console.error('Product update action', e);\n      },\n      onLoading: setIsLoading,\n    });\n  };\n\n  const canSubmit = form.formState.dirtyFields?.dimensions\n    ? Object.values(form.formState.dirtyFields?.dimensions)?.some(fd => fd)\n    : false;\n\n  return (\n    <AccordionForm\n      onSubmit={form.handleSubmit(onValid)}\n      label={t('Package size')}\n      isLoading={isLoading}\n      isOpen={false}\n      {...props}\n      disabled={!canSubmit || disabled}\n    >\n      <DimensionsInputs form={form} disabled={disabled} />\n    </AccordionForm>\n  );\n};\n","import { OfferFormAreaProps } from '../types';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { OfferEntity, OfferImageSlotEntity } from '../../../../types/offers/offers.types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useMemo, useState } from 'react';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport FormOfferImagesComponent from './FormOfferImagesComponent';\nimport { getIdRef } from '../../../../utils';\nimport { t } from '../../../../lang';\n\ntype OfferField = Partial<OfferImageSlotEntity>[];\nexport interface OfferFormImagesAreaProps extends OfferFormAreaProps<OfferField> {\n  onSubmit?: AppSubmitHandler<OfferField>;\n  onSuccess?: (data: { data: OfferEntity }) => void;\n  update?: string;\n}\n\nexport const OfferFormImagesArea = ({\n  offer,\n  onSubmit,\n  onSuccess,\n  disabled,\n  defaultValues,\n}: OfferFormImagesAreaProps) => {\n  const loaders = useOfferLoadersProvider();\n  const [state, setState] = useState<OfferField>(defaultValues || loaders?.state?.images || []);\n\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (onSubmit) {\n      onSubmit(state);\n    } else if (offer) {\n      service.updateById({\n        data: { refresh: true, data: { ...getIdRef(offer), data: { images: state as OfferImageSlotEntity[] } } },\n        onSuccess: onSuccess,\n        onLoading: loaders.onLoading('images'),\n      });\n    } else {\n      console.warn('Offer not passed');\n    }\n  };\n  const canSubmit = useMemo(() => {\n    return !!state?.length;\n  }, [state?.length]);\n\n  return (\n    <AccordionForm\n      label={t('Images')}\n      onSubmit={handleSubmit}\n      canSubmit={canSubmit}\n      disabled={disabled}\n      isLoading={loaders.isLoading?.images}\n      isOpen={false}\n      maxHeight={'400px'}\n    >\n      <FormOfferImagesComponent\n        hideLabel\n        initialData={state}\n        onChangeState={setState}\n        contentContainerStyle={{\n          flex: 1,\n          // borderTop: `1px solid ${theme.sideBarBorderColor}`,\n          // borderBottom: `1px solid ${theme.sideBarBorderColor}`,\n        }}\n      />\n    </AccordionForm>\n  );\n};\n","import { Path } from 'react-hook-form';\nimport { FilterOption } from '../../../atoms/TabSelector';\nimport { enumToFilterOptions } from 'utils/fabrics';\nimport CustomSelect from '../../../atoms/Inputs/CustomSelect';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport FlexBox from '../../../atoms/FlexBox';\nimport * as React from 'react';\nimport { UseAppFormReturn } from 'hooks/useAppForm.hook';\nimport { t } from 'lang';\nimport { HasMeasurement } from 'types/utils.types';\nimport { MeasurementUnit } from '../../../../types/enums.types';\n\nexport interface MeasurementInputsFormData extends HasMeasurement {}\n\nconst offerMeasurementUnitOptions = enumToFilterOptions(MeasurementUnit);\n\nconst measurementInputs: {\n  label?: string;\n  placeholder?: string;\n  name: Path<MeasurementInputsFormData>;\n  type?: HTMLInputElement['type'];\n  options?: FilterOption[];\n}[] = [\n  { name: 'measurement.unit', label: t('unit'), placeholder: t('unit'), options: offerMeasurementUnitOptions },\n  { name: 'measurement.min', label: t('min'), placeholder: t('min'), type: 'number' },\n  { name: 'measurement.max', label: t('max'), placeholder: t('max'), type: 'number' },\n  // { name: 'measurement.step', label: t('step'), placeholder: t('step'), type: 'number' },\n];\n\nconst MeasurementInputs = ({\n  appForm,\n  disabled,\n}: {\n  disabled?: boolean;\n  appForm: UseAppFormReturn<MeasurementInputsFormData>;\n}) => {\n  return (\n    <FlexBox fillWidth style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', columnGap: 8 }}>\n      {measurementInputs.map(input => {\n        return input.options ? (\n          <CustomSelect\n            key={input.name}\n            {...appForm.registerSelect(input?.name, {\n              options: input?.options,\n              label: input?.label,\n              placeholder: input?.label,\n              onlyValue: true,\n            })}\n            disabled={disabled}\n          />\n        ) : (\n          <InputLabel key={input.name} label={input.label} error={appForm?.formState?.errors[input.name as never]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={input?.type === 'number' ? 1 : undefined}\n              type={input?.type}\n              {...appForm.register(input.name, {\n                valueAsNumber: input?.type === 'number',\n                min: input?.type === 'number' ? 1 : undefined,\n              })}\n              disabled={disabled}\n            />\n          </InputLabel>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default MeasurementInputs;\n","import MeasurementInputs, { MeasurementInputsFormData } from './MeasuremenInputs';\nimport { useAppForm } from '../../../../hooks';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport useOffersService from '../../../../hooks/useOffersService.hook';\nimport { ToastService } from '../../../../services';\nimport { IMeasurement } from '../../../../types/utils.types';\nimport { useState } from 'react';\nimport { OfferFormAreaProps } from '../types';\nimport { t } from '../../../../lang';\n\nexport interface OfferMeasurementFormProps extends OfferFormAreaProps<IMeasurement> {}\n\nexport const OfferMeasurementFormArea = ({ defaultValues, _id, disabled, ...props }: OfferMeasurementFormProps) => {\n  const service = useOffersService();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useAppForm<MeasurementInputsFormData>({ defaultValues: { measurement: defaultValues } });\n\n  const onValid = (sData: MeasurementInputsFormData) => {\n    service.updateById({\n      data: { data: { data: sData, _id } },\n      update: true,\n      onSuccess(d) {\n        ToastService.success(`Product updated`);\n      },\n      onError: e => {\n        console.error('Product update action', e);\n      },\n      onLoading: setIsLoading,\n    });\n  };\n  const canSubmit = form.formState.dirtyFields?.measurement\n    ? Object.values(form.formState.dirtyFields?.measurement)?.some(fd => fd)\n    : false;\n  return (\n    <AccordionForm\n      onSubmit={form.handleSubmit(onValid)}\n      label={t('Measurement info')}\n      isLoading={isLoading}\n      disabled={!canSubmit || disabled}\n      isOpen={false}\n      {...props}\n    >\n      <MeasurementInputs appForm={form} disabled={disabled} />\n    </AccordionForm>\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport styled from 'styled-components';\nimport FlexBox from '../../../atoms/FlexBox';\nimport { useOffersSelector } from '../../../../redux/selectors.store';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { OfferFormAreaProps } from '../types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { t } from '../../../../lang';\nimport { OfferFormRelatedFieldKeyEnum, OfferFullFormData } from '../../../../types/offers/offers.types';\nimport { PropertiesGroupSelector } from '../../../atoms/PropertiesGroupSelector';\nimport { PropertyBaseEntity, PropertyEntity } from '../../../../types/offers/properties.types';\nimport OfferPropertySelector from '../variations/OfferPropertySelector';\nimport { Text } from '../../../atoms/Text';\nimport { useCurrentOffer } from '../../../../hooks';\nimport { sortIds, updateIdsArray } from '../../../../utils';\n\nexport interface OfferFormPropertiesAreaProps\n  extends OfferFormAreaProps<OfferFullFormData[OfferFormRelatedFieldKeyEnum.propertiesIds]> {\n  // onSubmit?: AppSubmitHandler<string[]>;\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n}\n\nexport const OfferFormPropertiesArea = ({ onSuccess, disabled, offer }: OfferFormPropertiesAreaProps) => {\n  const loaders = useOfferLoadersProvider();\n  const state = useOffersSelector();\n  const Offer = useCurrentOffer(offer);\n  const service = useAppServiceProvider().get(ServiceName.offers);\n  const initIds = sortIds(Offer?.properties?.map(p => p._id));\n  const [propertiesIds, setPropertiesIds] = useState<string[]>(initIds);\n  const [template, setTemplate] = useState<PropertyBaseEntity>();\n\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n    ev.stopPropagation();\n\n    if (Offer) {\n      service.updateById({\n        data: {\n          data: {\n            _id: Offer?._id,\n            data: { propertiesIds, templateId: template?._id },\n          },\n        },\n        update: true,\n        onLoading: loaders.onLoading('properties'),\n        onSuccess: onSuccess,\n      });\n    }\n  };\n\n  const canSubmit = useMemo(() => {\n    return !!propertiesIds?.length && initIds?.join(',') !== sortIds(propertiesIds)?.join(',');\n  }, [propertiesIds, initIds]);\n\n  const propertiesList = useMemo(() => {\n    if (template?.childrenList?.length) {\n      return template?.childrenList.filter(item => !item?.isSelectable);\n    }\n\n    const _rootId = template?._id;\n    const _propertiesList: PropertyEntity[] = [];\n    const _propertiesIds = state.propertiesKeysMap?.[_rootId ?? 'def'] ?? [];\n\n    for (const propId of _propertiesIds) {\n      const prop = state.propertiesDataMap?.[propId];\n      if (prop && !prop?.isSelectable) {\n        const childrenIds = state.propertiesKeysMap[prop?._id];\n        if (childrenIds?.length) {\n          _propertiesList.push(prop);\n        }\n      }\n    }\n\n    return _propertiesList;\n  }, [template, state.propertiesDataMap, state.propertiesKeysMap]);\n\n  const handleSelect = useCallback((_parentId?: string, valueId: string = '') => {\n    setPropertiesIds(prev => {\n      // prev.includes(valueId) ? prev.filter(el => el !== valueId) : [...prev, valueId]\n      return updateIdsArray({\n        arr: prev,\n        id: valueId,\n        toggle: true,\n      });\n    });\n  }, []);\n\n  const renderPropertiesList = useMemo(() => {\n    return propertiesList?.map(prop => {\n      return (\n        <OfferPropertySelector\n          key={`prop_${prop._id}`}\n          item={prop}\n          selectedIds={propertiesIds}\n          onSelect={handleSelect}\n        />\n      );\n    });\n  }, [propertiesList, propertiesIds, handleSelect]);\n\n  return (\n    <AccordionForm\n      label={t('Properties')}\n      canSubmit={canSubmit}\n      onSubmit={handleSubmit}\n      isLoading={loaders.isLoading?.properties}\n      isOpen={false}\n      disabled={!Offer || disabled}\n    >\n      <PropertiesGroupSelector selected={template} onSelect={setTemplate} />\n\n      <TemplateBox flex={1} overflow={'auto'}>\n        {renderPropertiesList?.length ? (\n          renderPropertiesList\n        ) : (\n          <FlexBox padding={'24px'} alignItems={'center'} justifyContent={'center'}>\n            <Text $size={16}>{t('Data not found')}</Text>\n          </FlexBox>\n        )}\n      </TemplateBox>\n    </AccordionForm>\n  );\n};\nconst TemplateBox = styled(FlexBox)`\n  padding-bottom: 8px;\n`;\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/dimensions/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../lang';\nimport { toOfferFormData } from '../../utils';\nimport { useEffect } from 'react';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/measurement/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport { OfferFormPropertiesArea } from '../Forms/offers/properties/OfferFormPropertiesArea';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider, useLoadersProvider } from '../../Providers/Loaders/LoaderProvider';\nimport { OfferFormImagesArea } from '../Forms/offers/images/OfferFormImagesArea';\nimport { useAppRouter, useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/categories/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\nimport { OfferPriceFormArea } from '../Forms/pricing/OfferPriceFormArea';\nimport OfferTagsFormArea from '../Forms/offers/OfferTagsFormArea';\nimport PriceDiscountsFormArea from '../Forms/pricing/PriceDiscountsFormArea';\n\nexport interface CreateOfferModalProps extends ModalFormProps {\n  _id: string;\n}\n\nexport const useOfferLoadersProvider = () => useLoadersProvider<OfferLoadersKey, OfferLoadersData>();\n\nconst CreateOfferModal: React.FC<CreateOfferModalProps> = ({ onClose, _id }) => {\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>();\n  const {\n    state: { formData },\n    setData,\n  } = loaders;\n  const router = useAppRouter();\n  const Offer = useCurrentOffer({ _id: router.query?.offerId });\n\n  useEffect(() => {\n    // router.push({ query: omit(router.query, ['offerId']) });\n    // return () => {\n    //   router.push({ query: {} });\n    // };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ModalBase title={t('Create offer')} onClose={onClose}>\n      <LoadersProvider value={loaders}>\n        <FlexBox padding={'0 8px 16px'}>\n          <OfferBaseInfoFormArea\n            defaultValues={formData}\n            onSuccess={({ data }) => {\n              setData('formData', toOfferFormData(data));\n\n              router.push({ query: { offerId: data?._id } });\n            }}\n            type={formData?.type}\n          />\n\n          {Offer && (\n            <>\n              <OfferFormCategoriesArea offer={Offer} defaultValues={formData?.categoriesIds} disabled={!formData} />\n\n              <OfferFormPropertiesArea offer={Offer} defaultValues={formData?.propertiesIds} disabled={!formData} />\n\n              <OfferPriceFormArea\n                expandable={!!Offer}\n                isOpen={false}\n                offer={Offer}\n                defaultState={Offer?.price}\n                price={Offer?.price}\n                title={t('Price')}\n              />\n\n              {Offer?.price && <PriceDiscountsFormArea price={Offer?.price} />}\n\n              <OfferFormImagesArea offer={Offer} defaultValues={formData?.images} disabled={!formData} />\n\n              <OfferTagsFormArea offer={Offer} defaultValues={formData?.tagsIds} disabled={!formData} />\n\n              <OfferDimensionsFormArea offer={Offer} defaultValues={formData?.dimensions} disabled={!formData} />\n\n              <OfferMeasurementFormArea offer={Offer} defaultValues={formData?.measurement} disabled={!formData} />\n            </>\n          )}\n        </FlexBox>\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default CreateOfferModal;\n"],"names":["OfferBaseInfoFormArea","_ref","_formValues$type","defaultValues","edit","type","onSuccess","_id","_useOfferLoadersProvi","useOfferLoadersProvider","isLoading","onLoading","service","useOffersService","warehousesState","useWarehousesSelector","counterparties","useDirectorySelector","ApiDirType","directory","brandsList","_useAppForm","useAppForm","_objectSpread","visible","approved","OfferStatusEnum","errors","formState","register","registerSelect","formValues","setValue","handleSubmit","appForm","_objectWithoutProperties","_excluded","_jsx","_Fragment","children","_jsxs","AccordionForm","label","t","offer_update","offer_create","onSubmit","sData","productForSubmit","toReqData","ignorePaths","updateById","data","create","onReset","reset","canSubmit","expandable","ButtonsGroup","value","OfferTypeEnum","options","offerTypeFilterOptions","onSelect","o","InputLabel","error","required","InputText","placeholder","autoFocus","FlexBox","fxDirection","gap","fillWidth","sku","barCode","CustomSelect","warehouses","OfferStatusFilterOptions","onlyValue","valuePath","description","TextareaPrimary","ButtonSwitch","onChange","val","shouldTouch","shouldDirty","AppTagsSelect","selected","_ref$filterValue","filterValue","TagTypeEnum","onChangeIds","hideFilter","theme","useTheme","dispatch","useAppDispatch","state","useTagsSelector","modalSrv","useModalService","_useState","useState","_useState2","_slicedToArray","filter","setFilter","list","useMemo","_state$listsMap","listsMap","useEffect","length","getAllTagsThunk","params","padding","borderBottom","concat","modalBorderColor","justifyContent","ActionsDropdown","actions","title","onPress","FormTags","TabSelector","tagsFilterOptions","defaultValue","_ref2","prev","TagButtonsFilter","multiple","_Offer$tags","disabled","offer","Offer","useCurrentOffer","loaders","initIds","sortIds","tags","map","p","useAppServiceProvider","ServiceName","selectedIds","setSelectedIds","join","idsFromRefs","isOpen","ev","preventDefault","stopPropagation","tagsIds","isArray","OfferFormCategoriesArea","_Offer$categories","_loaders$isLoading","categories","categoriesIds","setCategoriesIds","meta","maxHeight","ListBox","flex","overflow","OfferCategoriesSelector","styled","FlexUl","_templateObject","_taggedTemplateLiteral","dimensionsInputsProps","name","Box","_form$formState","_form$formState$error","form","dimensions","input","min","valueAsNumber","OfferDimensionsFormArea","_form$formState$dirty","_Object$values","_form$formState$dirty2","props","setIsLoading","dirtyFields","Object","values","some","fd","d","ToastService","onError","e","console","DimensionsInputs","OfferFormImagesArea","_loaders$state","images","setState","refresh","getIdRef","warn","FormOfferImagesComponent","hideLabel","initialData","onChangeState","contentContainerStyle","offerMeasurementUnitOptions","enumToFilterOptions","MeasurementUnit","measurementInputs","style","display","gridTemplateColumns","columnGap","_appForm$formState","undefined","OfferMeasurementFormArea","measurement","update","MeasurementInputs","OfferFormPropertiesArea","_Offer$properties","useOffersSelector","get","properties","propertiesIds","setPropertiesIds","_useState3","_useState4","template","setTemplate","_sortIds","propertiesList","_template$childrenLis","_state$propertiesKeys","_state$propertiesKeys2","childrenList","item","isSelectable","_step","_rootId","_propertiesList","_propertiesIds","propertiesKeysMap","_iterator","_createForOfIteratorHelper","s","n","done","_state$propertiesData","propId","prop","propertiesDataMap","childrenIds","push","err","f","handleSelect","useCallback","_parentId","valueId","arguments","updateIdsArray","arr","id","toggle","renderPropertiesList","OfferPropertySelector","templateId","PropertiesGroupSelector","TemplateBox","alignItems","Text","$size","useLoadersProvider","_router$query","onClose","useLoaders","formData","setData","router","useAppRouter","query","offerId","ModalBase","LoadersProvider","toOfferFormData","OfferPriceFormArea","defaultState","price","PriceDiscountsFormArea","OfferTagsFormArea"],"sourceRoot":""}