{"version":3,"file":"static/js/779.31303af3.chunk.js","mappings":"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","sources":["components/AppPages/cart/FooterSummary.tsx","components/AppPages/cart/SelectVariationModal.tsx","components/AppPages/cart/SelectOfferModal.tsx","components/AppPages/cart/OrderSlotOverview.tsx","components/AppPages/cart/CartPage.tsx","hooks/useProductsFilterSelectors.hook.ts","hooks/useOffersActionsCreator.hook.ts","components/AppPages/offers/PageOffers.tsx","components/Modals/EditOfferModal.tsx"],"sourcesContent":["import { IOrderTempSlot } from '../../../types/orders/order-slot.types';\nimport { useEffect, useRef, useState } from 'react';\nimport styled, { useTheme } from 'styled-components';\nimport { isUndefined } from 'lodash';\nimport FlexBox from '../../atoms/FlexBox';\nimport { Text } from '../../atoms/Text';\nimport { t } from '../../../lang';\nimport { toPrice } from '../../../utils/numbers';\nimport InputText from '../../atoms/Inputs/InputText';\nimport ButtonIcon from '../../atoms/ButtonIcon';\n\nexport const FooterSummary = ({\n  slot,\n  onChangeQuantity,\n}: {\n  slot?: IOrderTempSlot;\n  onChangeQuantity?: (val: number) => void;\n}) => {\n  const [quantity, setQuantity] = useState(slot?.quantity ?? 1);\n  const theme = useTheme();\n  const timeoutRef = useRef<NodeJS.Timeout | undefined>();\n  const intervalRef = useRef<NodeJS.Timer | undefined>();\n\n  const registerIncrement = (inc: 1 | -1) => {\n    return () => {\n      const q = slot?.quantity;\n      if (!isUndefined(q) && onChangeQuantity) {\n        onChangeQuantity(q + inc < 0 ? q : q + inc);\n      } else {\n        setQuantity(prev => (prev + inc < 0 ? prev : prev + inc));\n      }\n    };\n  };\n\n  const registerAutoIncrement = (inc: 1 | -1) => {\n    return {\n      onMouseDown: () => {\n        timeoutRef.current = setTimeout(() => {\n          intervalRef.current = setInterval(() => {\n            setQuantity(prev => (prev + inc < 0 ? prev : prev + inc));\n          }, 100);\n        }, 250);\n      },\n      onMouseUp: () => {\n        clearTimeout(timeoutRef.current);\n        clearInterval(intervalRef.current);\n        timeoutRef.current = undefined;\n        intervalRef.current = undefined;\n        onChangeQuantity && onChangeQuantity(quantity);\n      },\n    };\n  };\n\n  useEffect(() => {\n    const q = slot?.quantity;\n    if (!isUndefined(q)) {\n      setQuantity(q);\n    }\n  }, [slot?.quantity]);\n\n  return (\n    <FlexBox\n      flexWrap={'wrap'}\n      gap={8}\n      padding={'8px'}\n      fxDirection={'row'}\n      style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr' }}\n    >\n      {(['cashback', 'bonus', 'discount'] as const).map(dataKey => {\n        return (\n          <FlexBox\n            key={dataKey}\n            background={theme.fieldBackgroundColor}\n            borderRadius={'6px'}\n            justifyContent={'space-between'}\n          >\n            <Text $weight={400} $size={12} $padding={'4px 6px'}>\n              {t(dataKey)}\n            </Text>\n            <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n              {toPrice(slot?.[dataKey]?.amount)}\n            </Text>\n          </FlexBox>\n        );\n      })}\n\n      {(['brutto', 'netto'] as const).map(dataKey => {\n        return (\n          <FlexBox\n            key={dataKey}\n            background={theme.fieldBackgroundColor}\n            borderRadius={'6px'}\n            justifyContent={'space-between'}\n          >\n            <Text $weight={400} $size={12} $padding={'4px 6px'}>\n              {t(dataKey)}\n            </Text>\n            <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n              {toPrice(slot?.[dataKey])}\n            </Text>\n          </FlexBox>\n        );\n      })}\n\n      <FlexBox padding={'0 8px'}>\n        <ChangeButton\n          variant={'def'}\n          iconSize={'15px'}\n          icon={'SmallArrowUp'}\n          {...registerAutoIncrement(1)}\n          onClick={registerIncrement(1)}\n        ></ChangeButton>\n\n        <InputText\n          value={quantity}\n          name={'quantity'}\n          align={'center'}\n          onChange={ev => {\n            setQuantity(Number(ev.target.value));\n          }}\n          onBlur={() => {\n            onChangeQuantity && onChangeQuantity(quantity);\n          }}\n        />\n\n        <ChangeButton\n          variant={'def'}\n          iconSize={'15px'}\n          icon={'SmallArrowDown'}\n          {...registerAutoIncrement(-1)}\n          onClick={registerIncrement(-1)}\n        ></ChangeButton>\n      </FlexBox>\n    </FlexBox>\n  );\n};\nconst ChangeButton = styled(ButtonIcon)`\n  height: 15px;\n\n  &:hover {\n    padding: 4px 0;\n  }\n`;\n","import { OverlayFooter } from 'components/atoms';\nimport VariationsTab from '../offers/tabs/VariationsTab';\nimport { FooterSummary } from './FooterSummary';\nimport ModalBase from '../../atoms/Modal';\nimport { countOrderSlotValues } from '../../../utils';\nimport { useMemo, useState } from 'react';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { useCurrentOffer } from '../../../hooks';\nimport { VariationEntity } from '../../../types/offers/variations.types';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport { WarehouseEntity } from '../../../types/warehousing/warehouses.types';\nimport { CreatedModal, useModalProvider } from '../../../Providers/ModalProvider/ModalProvider';\n\nexport const SelectVariationModal = ({\n  offer,\n  warehouse,\n  slotId,\n  onClose,\n}: {\n  offer?: OfferEntity;\n  warehouse?: WarehouseEntity;\n  slotId?: string;\n} & CreatedModal) => {\n  // const query = useAppQuery();\n\n  const modalSrv = useModalProvider();\n  const Offer = useCurrentOffer(offer);\n  const [selected, setSelected] = useState<VariationEntity>();\n  // const loaders = useLoaders();\n  const cart = useCart();\n  const currentSlot = cart.actions.getSlotByVariationId(selected?._id);\n  const [quantity, setQuantity] = useState(currentSlot?.quantity ?? 1);\n\n  const counted = useMemo(() => {\n    return countOrderSlotValues({\n      ...currentSlot,\n      quantity: quantity,\n      ...(selected?.price ?? Offer?.price),\n      offer: Offer,\n      variation: selected,\n      warehouse: warehouse ?? Offer?.warehouse,\n    });\n  }, [currentSlot, Offer, quantity, selected, warehouse]);\n\n  return (\n    <ModalBase title={`Select variation | ${Offer?.label}`} fillHeight>\n      <VariationsTab offer={Offer} onSelect={setSelected} selected={selected} />\n\n      <FooterSummary slot={counted} onChangeQuantity={setQuantity} />\n\n      <OverlayFooter\n        canAccept={!!selected}\n        onAcceptPress={() => {\n          if (selected?._id) {\n            if (counted?.tempId && counted?.tempId?.includes(selected?._id)) {\n              counted.quantity !== currentSlot.quantity && cart.actions.update(counted);\n            } else if (counted?.warehouse) {\n              cart.actions.addSlot(counted);\n            }\n\n            modalSrv.clearStack();\n          }\n\n          onClose && onClose();\n        }}\n      />\n    </ModalBase>\n  );\n};\n","import { WarehouseEntity } from '../../../types/warehousing/warehouses.types';\nimport { CreatedModal, useModalService } from '../../../Providers/ModalProvider/ModalProvider';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { useAppRouter } from '../../../hooks';\nimport { useEffect, useMemo, useState } from 'react';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport { useOffersTableSettings } from '../offers/PageOffers';\nimport { countOrderSlotValues, setValueByPath } from '../../../utils';\nimport OverlayBase from '../../Overlays/OverlayBase';\nimport TableList from '../../TableList/TableList';\nimport { FooterSummary } from './FooterSummary';\nimport { OverlayFooter } from '../../atoms';\nimport { SelectVariationModal } from './SelectVariationModal';\nimport { GetAllOffersQuery } from '../../../api';\nimport { CartSlotId } from '../../../redux/cart/cart.slice';\n\nexport default function SelectOfferModal({\n  warehouse,\n  slotId,\n}: { warehouse?: WarehouseEntity; slotId?: CartSlotId } & CreatedModal) {\n  const cart = useCart();\n  const service = useAppServiceProvider().get(AppModuleName.offers);\n  const { getAll } = service;\n  const currentSlot = cart.actions.getSlot(slotId);\n  // const offersState = useProductsSelector();\n  const router = useAppRouter();\n  // const loaders = useLoaders();\n  const [selected, setSelected] = useState<OfferEntity>();\n  const [quantity, setQuantity] = useState(currentSlot?.quantity ?? 1);\n\n  const modalSrv = useModalService();\n\n  const { tableConfig, isLoading, searchParams } = useOffersTableSettings({\n    searchState: warehouse?.label\n      ? { search: warehouse?.label ?? '', param: { dataPath: 'warehouse.label', label: 'Склад' } }\n      : undefined,\n  });\n\n  const counted = useMemo(() => {\n    return countOrderSlotValues({ ...currentSlot, quantity: quantity, ...selected?.price });\n  }, [currentSlot, quantity, selected?.price]);\n\n  useEffect(() => {\n    const params: GetAllOffersQuery = setValueByPath(searchParams?.param?.dataPath, searchParams?.search);\n\n    if (warehouse) {\n      getAll({\n        data: {\n          refresh: true,\n          params: params,\n        },\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <OverlayBase title={warehouse?.label || 'Select offer'} fillHeight>\n      <TableList\n        {...tableConfig}\n        isLoading={isLoading?.offers}\n        checkBoxes={false}\n        selectedRow={selected}\n        onRowClick={data => {\n          if (data?.rowData) {\n            data?.rowData?._id &&\n              router.push({\n                query: {\n                  offerId: data?.rowData?._id,\n                },\n              });\n            setSelected(data?.rowData);\n          }\n        }}\n      />\n\n      {selected && <FooterSummary slot={counted} onChangeQuantity={setQuantity} />}\n\n      <OverlayFooter\n        canAccept={!!selected}\n        onAcceptPress={() => {\n          if (selected) {\n            modalSrv.create(SelectVariationModal, {\n              offer: selected,\n            });\n          }\n        }}\n      />\n    </OverlayBase>\n  );\n}\n","import { WarehouseEntity } from '../../../types/warehousing/warehouses.types';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { useAppQuery } from '../../../hooks';\nimport { useMemo, useState } from 'react';\nimport { VariationEntity } from '../../../types/offers/variations.types';\nimport { countOrderSlotValues } from '../../../utils';\nimport { OverlayHeader } from '../../Overlays';\nimport FlexBox from '../../atoms/FlexBox';\nimport { FooterSummary } from './FooterSummary';\nimport { OverlayFooter } from '../../atoms';\nimport styled from 'styled-components';\n\nexport default function OrderSlotOverview({ warehouse }: { warehouse?: WarehouseEntity; slotId?: string }) {\n  const cart = useCart();\n  const query = useAppQuery();\n  const currentSlot = cart.actions.getSlot(query.query?.slotId as never);\n\n  // const service = useAppServiceProvider().get(AppModuleName.offers);\n  // const { getAll } = service;\n  // const offersState = useProductsSelector();\n  // const router = useAppRouter();\n  // const loaders = useLoaders();\n  const [selected] = useState<VariationEntity | undefined>(currentSlot.variation);\n  const [quantity, setQuantity] = useState(currentSlot?.quantity ?? 1);\n  // const modalSrv = useModalService();\n\n  const counted = useMemo(() => {\n    return countOrderSlotValues({\n      ...selected?.price,\n      offer: selected,\n      variation: selected,\n      ...currentSlot,\n      quantity: quantity,\n    });\n  }, [currentSlot, quantity, selected]);\n\n  return (\n    <Container fillHeight maxWidth={'380px'} flex={1} padding={'0 8px 8px'}>\n      <OverlayHeader title={'Current slot'} />\n\n      <FlexBox flex={1}></FlexBox>\n\n      <FooterSummary slot={counted} onChangeQuantity={setQuantity} />\n\n      <OverlayFooter\n        canAccept={!!currentSlot.tempId && currentSlot.quantity !== quantity}\n        onAcceptPress={() => {\n          currentSlot.setQty(quantity);\n        }}\n      />\n    </Container>\n  );\n}\nconst Container = styled(FlexBox)`\n  position: relative;\n  overflow: hidden;\n\n  background-color: ${p => p.theme.sideBarBackgroundColor};\n`;\n","import styled, { useTheme } from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { takeFullGridArea } from '../pagesStyles';\nimport { BaseAppPageProps } from '../index';\nimport { AppGridPage } from '../pages';\nimport TableList from '../../TableList/TableList';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { tempOrderSlotTableColumns } from '../../../data';\nimport { useEffect, useMemo } from 'react';\nimport { useModalService } from '../../../Providers/ModalProvider/ModalProvider';\nimport ButtonIcon from '../../atoms/ButtonIcon';\nimport { AccordionFormArea } from '../../atoms/FormArea/AccordionForm';\nimport { ITableAction } from '../../TableList/tableTypes.types';\nimport { useAppParams, useAppQuery, useAppRouter } from '../../../hooks';\nimport OverlayStackProvider from '../../../Providers/Overlay/OverlayStackProvider';\nimport { OverlayStack } from '../../../Providers/Overlay/OverlayStack';\nimport SelectOfferModal from './SelectOfferModal';\nimport OrderSlotOverview from './OrderSlotOverview';\nimport { useMediaQuery } from 'react-responsive';\nimport { Text } from '../../atoms/Text';\nimport { t } from '../../../lang';\nimport { toPrice } from '../../../utils/numbers';\n\ninterface Props extends BaseAppPageProps {}\n\nexport default function CartPage({ path }: Props) {\n  // const [isVisible, setIsVisible] = useState(false);\n  const query = useAppQuery();\n  const params = useAppParams();\n  const isDesktop = useMediaQuery({ query: '(min-width: 960px)' });\n  const cart = useCart();\n\n  useEffect(() => {\n    if (params.cartId) {\n      cart.actions.setCartId(params.cartId);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AppGridPage path={path}>\n      <OverlayStackProvider>\n        <Page fillWidth flex={1} overflow={'hidden'} fillHeight fxDirection={'row'} gap={12}>\n          <FlexBox fillHeight flex={2}>\n            <PageCartSlots\n            // onSlotEditPress={() => setIsVisible(true)}\n            />\n          </FlexBox>\n\n          <RightSide\n            isVisible={isDesktop ? undefined : !!query?.query?.slotId}\n            className={'RightSide'}\n            // onAcceptPress={() => setIsVisible(false)}\n            style={\n              {\n                // position: 'absolute',\n                // top: 0,\n                // right: 0,\n                // zIndex: 100,\n                //\n                // width: '100%',\n                // height: '100%',\n                // alignItems: 'flex-end',\n                // background: theme.backdropColor,\n              }\n            }\n          >\n            <OrderSlotOverview />\n          </RightSide>\n        </Page>\n\n        <OverlayStack />\n      </OverlayStackProvider>\n    </AppGridPage>\n  );\n}\n\nconst Page = styled(FlexBox)`\n  ${takeFullGridArea}\n`;\nconst RightSide = styled(FlexBox)<{ isVisible?: boolean }>`\n  overflow: auto;\n\n  max-width: 100%;\n  height: 100%;\n\n  transition: ${p => p.theme.globals.timingFunctionMain};\n  background-color: ${p => p.theme.backgroundColorLight};\n\n  @media screen and (min-width: 768px) {\n    min-width: 320px;\n  }\n\n  @media screen and (max-width: 768px) {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 250;\n    height: 100%;\n\n    transform: translateX(${p => (p.isVisible ? 0 : 100)}%);\n\n    box-shadow: 0 12px 26px rgba(0, 0, 0, 0.25);\n  }\n`;\n\nfunction PageCartSlots({ onSlotEditPress }: { onSlotEditPress?: () => void }) {\n  const cartId = useAppQuery().query.cartId;\n  // const cartState = useCartSelector();\n  const cartSrv = useCart();\n  const modalSrv = useModalService();\n  const router = useAppRouter();\n  const theme = useTheme();\n  const cart = cartSrv.actions.getCurrentCart(cartId);\n\n  const renderOrders = useMemo(() => {\n    const ordersIds = cart?.ordersIds;\n\n    return ordersIds?.map((orderId, index) => {\n      if (!orderId) {\n        return null;\n      }\n      const order = cartSrv.actions.getOrderById(orderId);\n      const slots = cartSrv.ordersSlotsMap?.[orderId];\n\n      return (\n        <AccordionFormArea\n          key={orderId ?? index}\n          label={t('Warehouse') + ': ' + order?.warehouse?.label ?? t('undefined')}\n          hideFooter\n        >\n          <FlexBox minHeight={'300px'}>\n            <TableList\n              tableData={slots}\n              hasSearch={false}\n              hasFilter={false}\n              tableTitles={tempOrderSlotTableColumns}\n              actionsCreator={(ctx): ITableAction[] => {\n                const currentId = ctx.selectedRow?.tempId;\n                return [\n                  {\n                    icon: 'delete',\n                    disabled: !currentId,\n                    onClick: () => {\n                      currentId && cartSrv.actions.remove(currentId);\n                    },\n                  },\n                  {\n                    icon: 'edit',\n                    disabled: !currentId,\n                    onClick: () => {\n                      currentId &&\n                        router.push({\n                          query: {\n                            slotId: currentId,\n                          },\n                        });\n                    },\n                  },\n                  {\n                    icon: 'plus',\n                    disabled: !order?.warehouse,\n                    onClick: () => {\n                      order?.warehouse &&\n                        modalSrv.create(SelectOfferModal, {\n                          warehouse: order?.warehouse,\n                        });\n                    },\n                  },\n                ];\n              }}\n            />\n          </FlexBox>\n        </AccordionFormArea>\n      );\n    });\n  }, [cart?.ordersIds, cartSrv.actions, cartSrv.ordersSlotsMap, modalSrv, router]);\n\n  return (\n    <FlexBox overflow={'auto'} fillHeight>\n      <AccordionFormArea label={`Cart: ${cart?.tempId}`} expandable={true} isOpen={true} hideFooter={true}>\n        <FlexBox padding={'8px 12px'} flexWrap={'wrap'} fxDirection={'row'} gap={10}>\n          {(['cashback', 'bonus', 'discount'] as const).map(dataKey => {\n            return (\n              <FlexBox\n                key={dataKey}\n                background={theme.backgroundColorSecondary}\n                borderRadius={'4px'}\n                justifyContent={'space-between'}\n              >\n                <Text $weight={400} $size={12} $padding={'4px 6px'} $textTransform={'capitalize'}>\n                  {t(dataKey)}\n                </Text>\n                <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n                  {toPrice(cart?.summary?.[dataKey]?.amount)}\n                </Text>\n              </FlexBox>\n            );\n          })}\n\n          {(['brutto', 'netto'] as const).map(dataKey => {\n            return (\n              <FlexBox\n                key={dataKey}\n                background={theme.backgroundColorSecondary}\n                borderRadius={'4px'}\n                justifyContent={'space-between'}\n              >\n                <Text $weight={400} $size={12} $padding={'4px 6px'} $textTransform={'capitalize'}>\n                  {t(dataKey)}\n                </Text>\n                <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n                  {toPrice(cart?.summary?.[dataKey])}\n                </Text>\n              </FlexBox>\n            );\n          })}\n        </FlexBox>\n      </AccordionFormArea>\n\n      <FlexBox flex={1}>{renderOrders}</FlexBox>\n\n      <FlexBox\n        fxDirection={'row'}\n        gap={12}\n        padding={'16px'}\n        fillWidth\n        alignItems={'center'}\n        justifyContent={'center'}\n        style={{\n          position: 'sticky',\n          bottom: 0,\n          left: 0,\n        }}\n      >\n        <ButtonIcon\n          variant={'filledMiddle'}\n          icon={'plus'}\n          onClick={() => {\n            modalSrv.create(SelectOfferModal, {});\n          }}\n        >\n          {'Create'}\n        </ButtonIcon>\n      </FlexBox>\n    </FlexBox>\n  );\n}\n","import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { OfferEntity } from '../types/offers/offers.types';\n\nconst useStorageFilterSelectors = (): FilterSelectorType<keyof OfferEntity>[] => {\n  return [\n    // {\n    //   label: 'Рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'category',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useStorageFilterSelectors;\n","import { useModalProvider } from '../Providers/ModalProvider/ModalProvider';\nimport { useCallback } from 'react';\nimport { TableActionsCreator } from '../components/TableList/tableTypes.types';\nimport { OfferEntity } from '../types/offers/offers.types';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { t } from '../lang';\nimport EditOfferModal from '../components/Modals/EditOfferModal';\nimport CreateOfferModal from '../components/Modals/CreateOfferModal';\nimport { useAppRouter } from './useRouter.hook';\nimport { useOffersSelector } from '../redux/selectors.store';\nimport { UseLoadersReturn } from '../Providers/Loaders/useLoaders.hook';\n\nexport type OffersActionsCreator = TableActionsCreator<OfferEntity>;\n\nexport const useOffersActionsCreator = ({\n  loaders,\n}: { loaders?: UseLoadersReturn<'refresh' | 'offer'> } = {}): OffersActionsCreator => {\n  const service = useAppServiceProvider().get(ServiceName.offers);\n  const router = useAppRouter();\n  const modals = useModalProvider();\n  const stateMap = useOffersSelector().dataMap;\n\n  return useCallback(\n    ctx => {\n      const currentId = ctx.selectedRow?._id;\n      const Offer = currentId ? stateMap?.[currentId] : undefined;\n\n      return [\n        {\n          name: 'refreshData',\n          title: t('Refresh data'),\n          icon: 'refresh',\n          type: 'onlyIcon',\n          onClick: () => {\n            service.getAll({\n              data: { refresh: true },\n              onLoading: loaders ? loaders.onLoading('refresh') : ctx.onRefresh,\n            });\n          },\n        },\n        { separator: true },\n\n        {\n          name: 'review',\n          title: 'Перегляд продукту',\n          icon: 'openInNew',\n          disabled: !currentId,\n          type: 'onlyIcon',\n          navTo: `/app/${router.params.permissionId}/offers/` + currentId,\n        },\n\n        {\n          name: 'edit',\n          title: 'Змінити',\n          icon: 'edit',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !currentId,\n          onClick: () => {\n            if (Offer) {\n              modals.create(EditOfferModal, {\n                offer: Offer,\n              });\n            } else if (currentId) {\n              service.getOne({\n                data: { data: { params: { _id: currentId } } },\n                onLoading: loaders ? loaders.onLoading('offer') : ctx.onRefresh,\n                onSuccess: ({ data }) => {\n                  // router.push({ query: { offerId: data._id } });\n\n                  modals.create(EditOfferModal, {\n                    offer: data,\n                  });\n                },\n              });\n            }\n          },\n        },\n        {\n          name: 'copy',\n          title: 'Копіювати',\n          icon: 'copy',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !Offer,\n          onClick: () => {\n            Offer &&\n              modals.create(EditOfferModal, {\n                offer: Offer,\n                copy: true,\n              });\n          },\n        },\n        {\n          name: 'archiveProduct',\n          title: 'Архів',\n          icon: 'archive',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        { separator: true },\n        {\n          name: 'createProduct',\n          title: 'Новий',\n          icon: 'plus',\n          iconSize: '90%',\n          type: 'onlyIconFilled',\n          disabled: false,\n          onClick: () => {\n            modals.create(CreateOfferModal);\n          },\n        },\n      ];\n    },\n\n    [loaders, modals, router, service, stateMap]\n  );\n};\n\nexport default useOffersActionsCreator;\n\n// const currentProduct=useProductsSelector().currentProduct\n\n// const onSubmitCreateWrapper = useCallback(\n//   (onCloseModal: () => void) => {\n//     return (data: ITransactionReqData, options: AfterFormSubmitOptions,) => {\n//       service.create({\n//         data,\n//         onSuccess(d) {\n//           toast.success(`Сторено транзакцію на суму: ${d.amount}`);\n//           options?.close && onCloseModal();\n//         },\n//       });\n//     };\n//   },\n//   [service]\n// );\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps, TableSortOrderEnum } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { useOffersSelector } from '../../../redux/selectors.store';\nimport { GetAllOffersQuery } from '../../../api';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport useProductsFilterSelectorsHook from '../../../hooks/useProductsFilterSelectors.hook';\nimport useOffersActionsCreator from '../../../hooks/useOffersActionsCreator.hook';\nimport { BaseAppPageProps } from '../index';\nimport {\n  OfferSearchParam,\n  OfferSortParam,\n  offersSearchParams,\n  offersSortParams,\n  offersTableColumns,\n} from '../../../data';\nimport { useLoaders } from '../../../Providers/Loaders/useLoaders.hook';\nimport { TableSearchFormState } from '../../TableList/TableOverHead/TableSearchForm/TableSearchForm';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { setValueByPath } from '../../../utils';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageOffers: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOffersTableSettings({});\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading?.offers} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageOffers;\n\nexport const useOffersTableSettings = ({\n  searchState,\n  sortState,\n}: {\n  searchState?: TableSearchFormState<OfferSearchParam>;\n  sortState?: { param: OfferSortParam; order: TableSortOrderEnum };\n}) => {\n  const loaders = useLoaders<'offers' | 'refresh' | 'offer'>({\n    offers: { content: 'Refreshing...' },\n    refresh: { content: 'Refreshing...' },\n    offer: { content: 'Refreshing...' },\n  });\n  const { onLoading, isLoading } = loaders;\n  const service = useAppServiceProvider().get(AppModuleName.offers);\n  const { getAll } = service;\n  const state = useOffersSelector();\n\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useOffersActionsCreator({ loaders });\n\n  const [sortParams, setSortParams] = useState(sortState);\n  const [searchParams, setSearchParams] = useState<TableSearchFormState | undefined>(searchState);\n  // const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<OfferEntity, OfferSearchParam, OfferSortParam> => ({\n      onSubmitSearch: data => {\n        if (data.search) {\n          const params: GetAllOffersQuery | undefined = data.param?.dataPath\n            ? setValueByPath(data.param?.dataPath, data.search)\n            : undefined;\n\n          setSearchParams(data);\n\n          getAll({\n            data: { refresh: true, params },\n            onLoading: onLoading('offers'),\n          }).then();\n        } else {\n          getAll({\n            data: { refresh: true },\n            onLoading: onLoading('offers'),\n          }).then();\n        }\n      },\n      tableData: state.list,\n      tableTitles: offersTableColumns,\n      searchParams: offersSearchParams,\n      sortParams: offersSortParams,\n      filterSelectors,\n      hasFilter: true,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      actionsCreator,\n      // onFilterSubmit: filterParams => {\n      //   setFilterParams(filterParams);\n      //   getAll({\n      //     data: {\n      //       refresh: true,\n      //       params: {\n      //         filterParams,\n      //         sortOrder: sortParams?.order,\n      //         dataKey: sortParams?.param.dataKey,\n      //         dataPath: sortParams?.param.dataPath,\n      //       },\n      //     },\n      //     onLoading: setIsLoading,\n      //   }).then();\n      // },\n      onTableSortChange: (param, order) => {\n        setSortParams({ param, order });\n        getAll({\n          data: {\n            refresh: true,\n            params: {\n              sortOrder: order,\n              dataKey: param?.dataKey,\n              dataPath: param?.dataPath,\n            },\n          },\n          onLoading: onLoading('offers'),\n        }).then();\n      },\n    }),\n    [actionsCreator, filterSelectors, getAll, onLoading, state.list]\n  );\n\n  useEffect(() => {\n    if (state.list.length === 0) {\n      getAll({\n        data: { refresh: true },\n        onLoading: onLoading('offers'),\n      });\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    // filterParams,\n    searchParams,\n  };\n};\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/dimensions/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../lang';\nimport { toOfferFormData } from '../../utils';\nimport { OfferEntity, OfferTypeEnum } from '../../types/offers/offers.types';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/measurement/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport { AppLoaderSpiner } from '../atoms/AppLoaderSpiner';\nimport { Text } from '../atoms/Text';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider } from 'Providers/Loaders/LoaderProvider';\nimport { OfferFormPropertiesArea } from '../Forms/offers/properties/OfferFormPropertiesArea';\nimport { OfferFormImagesArea } from '../Forms/offers/images/OfferFormImagesArea';\nimport { useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/categories/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\nimport { OfferPriceFormArea } from '../Forms/pricing/OfferPriceFormArea';\n\nexport interface EditOfferModalProps extends ModalFormProps {\n  copy?: boolean;\n  offer: OfferEntity;\n}\n\nconst EditOfferModal: React.FC<EditOfferModalProps> = ({ onClose, offer, copy }) => {\n  const Offer = useCurrentOffer(offer);\n  // const service = useOffersService();\n  // const router = useAppRouter();\n\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>(\n    { offer_refresh: { content: 'Refreshing...' }, offer_update: { content: 'Updating...' } },\n    {\n      formData: Offer ? toOfferFormData(Offer) : { type: OfferTypeEnum.GOODS },\n    }\n  );\n\n  const { setData, state } = loaders;\n\n  const offerId = copy ? state.formData?._id : Offer?._id;\n\n  if (!Offer) {\n    return (\n      <ModalBase title={!copy ? t('Update offer') : t('Copy offer')} fillHeight>\n        <FlexBox fillWidth fillHeight padding={'26px'} alignItems={'center'} justifyContent={'center'}>\n          <Text $size={16} $weight={600}>\n            {t('Offer not found')}\n          </Text>\n        </FlexBox>\n      </ModalBase>\n    );\n  }\n\n  return (\n    <ModalBase fillHeight title={!copy ? t('Update offer') : t('Copy offer')} onClose={onClose}>\n      <LoadersProvider value={loaders}>\n        {loaders.isLoading?.offer ? (\n          <FlexBox fillWidth padding={'24px'} alignItems={'center'} gap={16}>\n            <AppLoaderSpiner size={52} />\n\n            <Text>{t('Loading info about offer...')}</Text>\n          </FlexBox>\n        ) : (\n          <FlexBox padding={'0 8px 16px'}>\n            <OfferBaseInfoFormArea\n              _id={offerId}\n              edit={!copy}\n              type={state.formData?.type}\n              defaultValues={state?.formData}\n              onSuccess={({ data }) => {\n                setData('formData', copy ? { ...toOfferFormData(data), _id: data._id } : toOfferFormData(data));\n              }}\n            />\n\n            <OfferFormCategoriesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.categories}\n              disabled={!state.formData}\n            />\n\n            <OfferFormPropertiesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.properties}\n              disabled={!state.formData}\n            />\n\n            <OfferPriceFormArea\n              expandable={true}\n              isOpen={false}\n              offer={Offer}\n              defaultState={Offer?.price}\n              price={Offer?.price}\n              title={t('Price')}\n            />\n\n            <OfferFormImagesArea\n              offer={Offer}\n              defaultValues={state?.formData?.images}\n              disabled={!state?.formData}\n              _id={offerId}\n            />\n\n            <OfferDimensionsFormArea\n              offer={Offer}\n              defaultValues={state.formData?.dimensions}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n            <OfferMeasurementFormArea\n              offer={Offer}\n              defaultValues={state.formData?.measurement}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n          </FlexBox>\n        )}\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default EditOfferModal;\n"],"names":["FooterSummary","_ref","_slot$quantity","slot","onChangeQuantity","_useState","useState","quantity","_useState2","_slicedToArray","setQuantity","theme","useTheme","timeoutRef","useRef","intervalRef","registerIncrement","inc","q","isUndefined","prev","registerAutoIncrement","onMouseDown","current","setTimeout","setInterval","onMouseUp","clearTimeout","clearInterval","undefined","useEffect","_jsxs","FlexBox","flexWrap","gap","padding","fxDirection","style","display","gridTemplateColumns","children","map","dataKey","_slot$dataKey","background","fieldBackgroundColor","borderRadius","justifyContent","_jsx","Text","$weight","$size","$padding","t","$align","toPrice","amount","ChangeButton","_objectSpread","variant","iconSize","icon","onClick","InputText","value","name","align","onChange","ev","Number","target","onBlur","styled","ButtonIcon","_templateObject","_taggedTemplateLiteral","SelectVariationModal","_currentSlot$quantity","offer","warehouse","onClose","slotId","modalSrv","useModalProvider","Offer","useCurrentOffer","selected","setSelected","cart","useCart","currentSlot","actions","getSlotByVariationId","_id","_useState3","_useState4","counted","useMemo","_selected$price","countOrderSlotValues","price","variation","ModalBase","title","concat","label","fillHeight","VariationsTab","onSelect","OverlayFooter","canAccept","onAcceptPress","_counted$tempId","tempId","includes","update","addSlot","clearStack","SelectOfferModal","_warehouse$label","getAll","useAppServiceProvider","get","AppModuleName","getSlot","router","useAppRouter","useModalService","_useOffersTableSettin","useOffersTableSettings","searchState","search","param","dataPath","tableConfig","isLoading","searchParams","_searchParams$param","params","setValueByPath","data","refresh","OverlayBase","TableList","offers","checkBoxes","selectedRow","onRowClick","_data$rowData","_data$rowData2","rowData","push","query","offerId","create","OrderSlotOverview","_query$query","useAppQuery","Container","maxWidth","flex","OverlayHeader","setQty","p","sideBarBackgroundColor","CartPage","path","useAppParams","isDesktop","useMediaQuery","cartId","setCartId","AppGridPage","OverlayStackProvider","Page","fillWidth","overflow","PageCartSlots","RightSide","isVisible","className","OverlayStack","takeFullGridArea","_templateObject2","globals","timingFunctionMain","backgroundColorLight","_ref2","onSlotEditPress","cartSrv","getCurrentCart","renderOrders","ordersIds","orderId","index","_cartSrv$ordersSlotsM","_ref3","_order$warehouse","order","getOrderById","slots","ordersSlotsMap","AccordionFormArea","hideFooter","minHeight","tableData","hasSearch","hasFilter","tableTitles","tempOrderSlotTableColumns","actionsCreator","ctx","_ctx$selectedRow","currentId","disabled","remove","expandable","isOpen","_cart$summary","_cart$summary$dataKey","backgroundColorSecondary","$textTransform","summary","_cart$summary2","alignItems","position","bottom","left","loaders","arguments","length","service","ServiceName","modals","stateMap","useOffersSelector","dataMap","useCallback","type","onLoading","onRefresh","separator","navTo","permissionId","EditOfferModal","getOne","onSuccess","copy","CreateOfferModal","props","sortState","useLoaders","content","state","filterSelectors","useProductsFilterSelectorsHook","useOffersActionsCreator","sortParams","setSortParams","setSearchParams","onSubmitSearch","_data$param","_data$param2","then","list","offersTableColumns","offersSearchParams","offersSortParams","showFooter","onTableSortChange","sortOrder","_state$formData","_loaders$isLoading","_state$formData2","_state$formData3","_state$formData4","_state$formData5","_state$formData6","_state$formData7","_state$formData8","_state$formData9","offer_refresh","offer_update","formData","toOfferFormData","OfferTypeEnum","setData","LoadersProvider","AppLoaderSpiner","size","OfferBaseInfoFormArea","edit","defaultValues","OfferFormCategoriesArea","categories","OfferFormPropertiesArea","properties","OfferPriceFormArea","defaultState","OfferFormImagesArea","images","OfferDimensionsFormArea","dimensions","OfferMeasurementFormArea","measurement"],"sourceRoot":""}