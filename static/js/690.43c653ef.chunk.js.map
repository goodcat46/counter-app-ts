{"version":3,"file":"static/js/690.43c653ef.chunk.js","mappings":"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","sources":["components/Forms/FormCreateProduct.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMemo } from 'react';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\nimport CustomSelect from '../atoms/Inputs/CustomSelect/CustomSelect';\nimport { useAppSelector } from '../../redux/store.store';\nimport FlexBox from '../atoms/FlexBox';\nimport t from '../../lang';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\nimport { useAppForm } from '../../hooks';\nimport { IProductFormData, IProductReqData, ProductFilterOpt } from '../../redux/products/products.types';\nimport { createDataForReq } from '../../utils/dataTransform';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\n\nexport interface FormCreateProductProps extends Omit<ModalFormProps<any, any, IProductFormData>, 'onSubmit'> {\n  copy?: boolean;\n  id?: string;\n  edit?: boolean;\n  _id?: string;\n  onSubmit?: AppSubmitHandler<IProductReqData>;\n  filterOptions?: ProductFilterOpt[];\n  defaultState?: IProductFormData;\n  addInputs?: boolean;\n}\n\nconst FormCreateProduct: React.FC<FormCreateProductProps> = ({\n  edit,\n  _id,\n  onSubmit,\n  copy,\n  defaultState,\n  addInputs,\n  ...props\n}) => {\n  const {\n    directories: { directories },\n    products: { properties },\n  } = useAppSelector();\n  const {\n    formState: { errors },\n    formValues,\n    register,\n    setValue,\n    registerSelect,\n    handleSubmit,\n    toggleAfterSubmitOption,\n    closeAfterSave,\n    clearAfterSave,\n  } = useAppForm<IProductFormData>({\n    defaultValues: defaultState,\n  });\n  const categories = useMemo(() => {\n    return directories[ApiDirType.CATEGORIES_PROD].filter(el => el.type === formValues.type);\n  }, [directories, formValues.type]);\n  // TODO eventDate: formatDateForInputValue(defaultState?.eventDate)\n  function onValidSubmit(submitData: IProductFormData) {\n    const omitPathArr: (keyof IProductFormData)[] = [];\n\n    const productForSubmit = createDataForReq(submitData, omitPathArr);\n\n    onSubmit &&\n      onSubmit(\n        { _id, data: productForSubmit },\n        {\n          closeAfterSave,\n          clearAfterSave,\n        }\n      );\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={handleSubmit(onValidSubmit, data => console.log(data))}\n      onOptSelect={({ value }) => value && setValue('type', value)}\n      extraFooter={\n        <FormAfterSubmitOptions\n          toggleOption={toggleAfterSubmitOption}\n          closeAfterSave={closeAfterSave}\n          clearAfterSave={clearAfterSave}\n        />\n      }\n    >\n      <FlexBox className={'inputs'} flex={'1'} fillWidth maxHeight={'100%'} padding={'12px'} overflow={'auto'}>\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <InputLabel label={t('sku')} direction={'vertical'} error={errors.sku}>\n          <InputText placeholder={t('sku')} {...register('sku', { max: 120 })} />\n        </InputLabel>\n\n        <CustomSelect\n          treeMode\n          {...registerSelect('category', {\n            label: t('category'),\n            placeholder: t('category'),\n            required: true,\n            options: categories,\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('brand', {\n            options: directories[ApiDirType.BRANDS],\n            label: t('brand'),\n            placeholder: t('selectBrand'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('template', {\n            options: properties,\n            label: t('variationsTemplate'),\n            placeholder: t('selectVariationsTemplate'),\n          })}\n        />\n\n        <InputLabel label={t('status')} direction={'vertical'} error={errors.status} disabled>\n          <InputText placeholder={t('status')} {...register('status')} disabled />\n        </InputLabel>\n\n        <InputLabel label={'Штрих-код'} direction={'vertical'} error={errors.barCode}>\n          <InputText placeholder={'Штрих-код'} {...register('barCode')} />\n        </InputLabel>\n\n        <InputLabel label={'Одиниці виміру'} direction={'vertical'} error={errors.unitsOfMeasurement} disabled>\n          <InputText placeholder={'Одиниці виміру'} {...register('unitsOfMeasurement')} disabled />\n        </InputLabel>\n\n        <InputLabel label={t('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={t('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\n// const GridWrapper = styled.div<{ gridTemplateColumns?: string }>`\n//   display: grid;\n//   grid-template-columns: ${({ gridTemplateColumns }) => gridTemplateColumns || '1fr 120px'};\n//   gap: 12px;\n// `;\n\nexport default FormCreateProduct;\n// const optionalSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .nullable()\n//   .optional();\n// const requiredSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .required();\n//\n// const getValidation = (type: TransactionType) =>\n//   yup.object().shape({\n//     category: requiredSelectItem,\n//   });\n"],"names":["_ref","edit","_id","onSubmit","defaultState","copy","props","addInputs","_objectWithoutProperties","_excluded","_useAppSelector","useAppSelector","directories","properties","products","_useAppForm","useAppForm","defaultValues","errors","formState","formValues","register","setValue","registerSelect","handleSubmit","toggleAfterSubmitOption","closeAfterSave","clearAfterSave","categories","useMemo","ApiDirType","filter","el","type","_jsx","ModalForm","_objectSpread","submitData","productForSubmit","createDataForReq","data","console","log","onOptSelect","_ref2","value","extraFooter","FormAfterSubmitOptions","toggleOption","children","_jsxs","FlexBox","className","flex","fillWidth","maxHeight","padding","overflow","InputLabel","label","t","direction","error","required","InputText","placeholder","autoFocus","sku","max","CustomSelect","treeMode","options","status","disabled","barCode","unitsOfMeasurement","description","TextareaPrimary"],"sourceRoot":""}