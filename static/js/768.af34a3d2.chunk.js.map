{"version":3,"file":"static/js/768.af34a3d2.chunk.js","mappings":"2MAEaA,GAAmBC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mDAItBC,GAAgBH,EAAAA,EAAAA,IAAGI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,4CAIVF,EAAAA,EAAAA,IAAGK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,uC,uLC2EnBI,EAAOC,EAAAA,GAAAA,IAAUN,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gBACnBH,EAAAA,IAEJ,UArE+C,SAAHS,GAAkB,IAADC,EAAAC,EAAXC,EAAIH,EAAJG,KAC1CC,EAAuB,QAAjBH,GAAGI,EAAAA,EAAAA,aAAc,IAAAJ,OAAA,EAAdA,EAAgBK,YACzBC,GAAiBC,EAAAA,EAAAA,GAAmCJ,GAG/BK,GAAvBC,EAAAA,EAAAA,MADFC,gBAAmBC,EAAOH,EAAPG,QAASC,EAAYJ,EAAZI,aAExBC,EAA8B,QAA1BZ,GAAGa,EAAAA,EAAAA,aAAuB,IAAAb,OAAA,EAAvBA,EAAyBc,QACtCC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAoCL,EAAAA,EAAAA,YAAuBM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAwCT,EAAAA,EAAAA,YAAgCU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjEE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,IAEpCG,EAAAA,EAAAA,YAAU,YACPF,GAAgBJ,IAAeO,QAAQC,IAAI,mDAC5CR,GAAcO,QAAQC,IAAI,CAAER,WAAAA,IAC5BI,GAAgBG,QAAQC,IAAI,CAAEJ,aAAAA,GAChC,GAAG,CAACA,EAAcJ,IAElB,IAAMS,GAAcC,EAAAA,EAAAA,UAClB,iBAAwC,CACtCC,UAAe,OAAJtB,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,OACjBC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,YAAY,EACZlC,eAAAA,EACAmC,eAAgB,SAAAb,GACdC,EAAgBD,EAClB,EACAc,gBAAiB,SAACC,EAAOC,GACvBnB,EAAc,CAAEoB,SAAUF,EAAME,SAAUD,UAAAA,GAC5C,EACD,GACD,CAACtC,EAAoB,OAAJO,QAAI,IAAJA,OAAI,EAAJA,EAAMuB,SAoBzB,OAjBAN,EAAAA,EAAAA,YAAU,WACRjB,GAAQkB,QAAQC,IAAI,wBAAyBnB,EAC/C,GAAG,CAACA,KAEJiB,EAAAA,EAAAA,YAAU,WACJ3B,GACFQ,EAAQ,CACNmC,KAAM,CAAEjC,KAAM,CAAEkC,IAAK5C,GAAU6C,gBAAgB,GAC/CC,UAAW5B,EACX6B,UAAW,SAAAC,GACTvC,EAAa,CAAEkC,KAAM,CAAEM,OAAQ,CAAEvC,MAAMwC,EAAAA,EAAAA,IAASF,IAAMH,gBAAgB,IACxE,GAIN,GAAG,CAAC7C,KAGFmD,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CAACrD,KAAMA,EAAKsD,UACtBF,EAAAA,EAAAA,KAACzD,EAAI,CAAA2D,UACHF,EAAAA,EAAAA,KAACG,EAAAA,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJzB,GAAW,IACfb,UAAWA,EACXd,eAAgBA,EAChBgC,UAAU,EACVqB,YAAaC,EAAAA,SAKvB,C","sources":["components/AppPages/pagesStyles.tsx","components/AppPages/priceManagement/PagePriceListOverview.tsx"],"sourcesContent":["import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { useAppParams } from '../../../hooks';\nimport { AppGridPage } from '../pages';\nimport styled from 'styled-components';\nimport { takeFullGridArea } from '../pagesStyles';\n\nimport { usePriceListOverviewActionsCreator } from '../../../hooks/usePriceListOverviewActionsCreator.hook';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { useEffect, useMemo, useState } from 'react';\nimport { IPriceListItem } from '../../../redux/priceManagement/priceManagement.types';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport { ISortParams } from '../../../api';\nimport { FilterReturnDataType } from '../../Filter/AppFilter';\nimport TableList from '../../TableList/TableList';\nimport { usePriceListsSelector } from '../../../redux/selectors.store';\nimport { BaseAppPageProps } from '../index';\nimport { priceListContentColumns } from '../../../data/priceManagement.data';\nimport { getIdRef } from '../../../utils/dataTransform';\n\ninterface Props extends BaseAppPageProps {}\nconst PagePriceListOverview: React.FC<Props> = ({ path }) => {\n  const listId = useAppParams()?.priceListId;\n  const actionsCreator = usePriceListOverviewActionsCreator(listId);\n  const {\n    priceManagement: { getById, getAllPrices },\n  } = useAppServiceProvider();\n  const list = usePriceListsSelector()?.current;\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  useEffect(() => {\n    (filterParams || sortParams) && console.log('PagePriceListOverview ==============>>>>>>>>>>>');\n    sortParams && console.log({ sortParams });\n    filterParams && console.log({ filterParams });\n  }, [filterParams, sortParams]);\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IPriceListItem> => ({\n      tableData: list?.prices,\n      isFilter: false,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n      },\n    }),\n    [actionsCreator, list?.prices]\n  );\n\n  useEffect(() => {\n    list && console.log('PagePriceListOverview', list);\n  }, [list]);\n\n  useEffect(() => {\n    if (listId) {\n      getById({\n        data: { list: { _id: listId }, refreshCurrent: true },\n        onLoading: setIsLoading,\n        onSuccess: d => {\n          getAllPrices({ data: { params: { list: getIdRef(d) }, refreshCurrent: true } });\n        },\n      });\n    }\n    // eslint-disable-next-line\n  }, [listId]);\n\n  return (\n    <AppGridPage path={path}>\n      <Page>\n        <TableList\n          {...tableConfig}\n          isLoading={isLoading}\n          actionsCreator={actionsCreator}\n          isSearch={false}\n          tableTitles={priceListContentColumns}\n        />\n      </Page>\n    </AppGridPage>\n  );\n};\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\nexport default PagePriceListOverview;\n"],"names":["takeFullGridArea","css","_templateObject","_taggedTemplateLiteral","takeFullPlace","_templateObject2","_templateObject3","Page","styled","_ref","_useAppParams","_usePriceListsSelecto","path","listId","useAppParams","priceListId","actionsCreator","usePriceListOverviewActionsCreator","_useAppServiceProvide2","useAppServiceProvider","priceManagement","getById","getAllPrices","list","usePriceListsSelector","current","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","useEffect","console","log","tableConfig","useMemo","tableData","prices","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","handleTableSort","param","sortOrder","dataPath","data","_id","refreshCurrent","onLoading","onSuccess","d","params","getIdRef","_jsx","AppGridPage","children","TableList","_objectSpread","tableTitles","priceListContentColumns"],"sourceRoot":""}