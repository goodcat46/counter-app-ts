{"version":3,"file":"static/js/237.5ee6b71a.chunk.js","mappings":"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","sources":["components/Forms/FormCreateCompany.tsx"],"sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { toast } from 'react-toastify';\nimport { BusinessSubjectTypeEnum, ICompanyFormData, OwnershipTypeEnum } from '../../redux/companies/companies.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport { useAppServiceProvider } from '../../hooks/useAppServices.hook';\nimport ButtonsGroup from '../atoms/ButtonsGroup';\nimport { t } from '../../lang';\nimport { useAppForm } from '../../hooks';\nimport CustomSelect from '../atoms/Inputs/CustomSelect/CustomSelect';\nimport { businessSubjectTypeFilterOptions, ownershipTypeFilterOptions } from '../../data/companies.data';\nimport { ContractorsTypesEnum } from '../../redux/directories/contractors.types';\nimport { FormInputs } from './components/atoms';\nimport { AppModuleName } from '../../redux/reduxTypes.types';\n\nconst createCompanyFormSchema = yup.object().shape({\n  name: yup.string(),\n  fullName: yup.string(),\n  email: yup.string().required(),\n  businessSubjectType: yup.string().oneOf(Object.values(BusinessSubjectTypeEnum), 'Недопустиме значення').required(),\n  ownershipType: yup.object().shape({\n    label: yup.string(),\n    value: yup.string().oneOf(Object.values(OwnershipTypeEnum), 'Недопустиме значення'),\n  }),\n  taxCode: yup.string(),\n  label: yup.string(),\n  fullLabel: yup.string(),\n  phone: yup.string(),\n} as Record<keyof ICompanyFormData, any>);\n\nexport interface FormCreateCompanyProps extends Omit<ModalFormProps<any, any, ICompanyFormData>, 'onSubmit'> {}\nconst FormCreateCompany: React.FC<FormCreateCompanyProps> = ({ defaultState, ...props }) => {\n  const pServ = useAppServiceProvider()[AppModuleName.permissions];\n\n  const {\n    register,\n    unregister,\n    formState: { errors },\n    handleSubmit,\n    formValues: { businessSubjectType, type: currentType, ...fv },\n    registerSelect,\n    setValue,\n  } = useAppForm<ICompanyFormData>({\n    defaultValues: { businessSubjectType: BusinessSubjectTypeEnum.company, ...defaultState },\n    reValidateMode: 'onChange',\n    resolver: yupResolver(createCompanyFormSchema),\n    shouldUnregister: true,\n  });\n\n  useEffect(() => {\n    console.debug(fv);\n  }, [fv]);\n\n  const formRenderConfig = useMemo(\n    () => ({\n      renderOwnershipTypeSelect: businessSubjectType === BusinessSubjectTypeEnum.company,\n      renderLabelInput:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderNamesInputs:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderPersonalTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderAttractionSourceSelect: currentType === ContractorsTypesEnum.CUSTOMER,\n    }),\n    [currentType, businessSubjectType]\n  );\n\n  function onValid(data: ICompanyFormData) {\n    pServ\n      .createCompany({\n        data,\n        onSuccess(data) {\n          console.log('Company created', data);\n          toast.success(`Company created: ${data?.name || data?.label}`);\n          props?.onClose && props?.onClose();\n        },\n        onError() {\n          toast.error('Error');\n        },\n        onLoading() {},\n      })\n      .then();\n  }\n\n  return (\n    <Form\n      fillHeight\n      width={'480px'}\n      {...props}\n      onSubmit={handleSubmit(onValid, errors => {\n        console.error('FormCreateCompany', errors);\n      })}\n    >\n      <FormInputs flex={1} fillWidth padding={'8px 4px'} overflow={'auto'}>\n        <InputLabel label={t('businessSubjectType')} error={errors.businessSubjectType} required>\n          <ButtonsGroup\n            options={businessSubjectTypeFilterOptions}\n            currentOption={{ value: businessSubjectType }}\n            onSelect={({ value }) => {\n              setValue('businessSubjectType', value);\n              if (value !== BusinessSubjectTypeEnum.company) {\n                unregister('ownershipType');\n              }\n            }}\n          />\n        </InputLabel>\n\n        {formRenderConfig.renderOwnershipTypeSelect && (\n          <CustomSelect\n            {...registerSelect('ownershipType', {\n              options: ownershipTypeFilterOptions,\n              label: 'Форма власності',\n              placeholder: 'Оберіть форму власності компанії',\n            })}\n          />\n        )}\n\n        {formRenderConfig.renderNamesInputs && (\n          <>\n            <InputLabel label={t('name')} error={errors.name} required>\n              <InputText\n                placeholder={t('insertLabel')}\n                {...register('name')}\n                required\n                autoFocus={formRenderConfig.renderNamesInputs}\n              />\n            </InputLabel>\n\n            <InputLabel label={t('secondName')} error={errors.secondName} required>\n              <InputText placeholder={t('insertSecondName')} {...register('secondName')} required />\n            </InputLabel>\n          </>\n        )}\n\n        {formRenderConfig.renderLabelInput && (\n          <>\n            <InputLabel label={t('label')} error={errors.label} required={!formRenderConfig.renderNamesInputs}>\n              <InputText\n                placeholder={t('insertLabel')}\n                {...register('label')}\n                required={!formRenderConfig.renderNamesInputs}\n                autoFocus={!formRenderConfig.renderNamesInputs}\n              />\n            </InputLabel>\n\n            <InputLabel label={t('Print name')} error={errors.fullName}>\n              <InputText placeholder={t('Enter print name')} {...register('fullName')} />\n            </InputLabel>\n          </>\n        )}\n\n        <InputLabel label={'Емейл (основний)'} error={errors.email} required>\n          <InputText placeholder={'Введіть основний емейл'} {...register('email')} type={'email'} required />\n        </InputLabel>\n\n        <InputLabel label={'Телефон (основний)'} error={errors.phone}>\n          <InputText placeholder={'Введіть осний контактний номер'} {...register('phone')} />\n        </InputLabel>\n\n        {formRenderConfig.renderTaxCode && (\n          <InputLabel label={t('taxCode')} error={errors.taxCode}>\n            <InputText placeholder={t('taxCode')} {...register('taxCode')} />\n          </InputLabel>\n        )}\n\n        {formRenderConfig.renderPersonalTaxCode && (\n          <InputLabel label={t('personalTaxCode')} error={errors.taxCode}>\n            <InputText placeholder={t('personalTaxCode')} {...register('personalTaxCode')} />\n          </InputLabel>\n        )}\n      </FormInputs>\n    </Form>\n  );\n};\n\nconst Form = styled(ModalForm)``;\n\nexport default FormCreateCompany;\n"],"names":["createCompanyFormSchema","yup","shape","name","fullName","email","required","businessSubjectType","oneOf","Object","values","BusinessSubjectTypeEnum","ownershipType","label","value","OwnershipTypeEnum","taxCode","fullLabel","phone","Form","styled","ModalForm","_templateObject","_taggedTemplateLiteral","_ref","defaultState","props","_objectWithoutProperties","_excluded","pServ","useAppServiceProvider","AppModuleName","_useAppForm","useAppForm","defaultValues","_objectSpread","reValidateMode","resolver","yupResolver","shouldUnregister","register","unregister","errors","formState","handleSubmit","_useAppForm$formValue","formValues","currentType","type","fv","_excluded2","registerSelect","setValue","useEffect","console","debug","formRenderConfig","useMemo","renderOwnershipTypeSelect","renderLabelInput","includes","renderNamesInputs","renderPersonalTaxCode","renderTaxCode","renderAttractionSourceSelect","ContractorsTypesEnum","_jsx","fillHeight","width","onSubmit","data","createCompany","onSuccess","log","toast","concat","onClose","onError","onLoading","then","error","children","_jsxs","FormInputs","flex","fillWidth","padding","overflow","InputLabel","t","ButtonsGroup","options","businessSubjectTypeFilterOptions","currentOption","onSelect","_ref2","CustomSelect","ownershipTypeFilterOptions","placeholder","_Fragment","InputText","autoFocus","secondName"],"sourceRoot":""}