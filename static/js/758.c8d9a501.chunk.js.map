{"version":3,"file":"static/js/758.c8d9a501.chunk.js","mappings":"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","sources":["components/Forms/offers/properties/FormCreateProperty.tsx","components/atoms/LangButtonsGroup.tsx"],"sourcesContent":["import ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { OfferTypeEnum } from '../../../../types/offers/offers.types';\nimport FlexBox from '../../../atoms/FlexBox';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport { t } from '../../../../lang';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport { useAppForm } from '../../../../hooks';\nimport { IProperty, IPropertyBase, IPropertyDto, PropertyFormData } from '../../../../types/offers/properties.types';\nimport FormAfterSubmitOptions, { useAfterSubmitOptions } from '../../components/FormAfterSubmitOptions';\nimport { Text } from '../../../atoms/Text';\nimport styled from 'styled-components';\nimport ButtonSwitch from '../../../atoms/ButtonSwitch';\nimport React, { useEffect } from 'react';\nimport LangButtonsGroup from '../../../atoms/LangButtonsGroup';\n\nexport interface FormCreatePropertyProps extends Omit<ModalFormProps<OfferTypeEnum, any, IPropertyBase>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<IPropertyDto, { isGroup?: boolean; isProperty?: boolean; isValue?: boolean }>;\n  type?: OfferTypeEnum;\n  create?: boolean;\n  parent?: IProperty;\n  edit?: boolean;\n\n  isGroup?: boolean;\n  isProperty?: boolean;\n  isValue?: boolean;\n}\n\nexport interface IPropertyFormData extends PropertyFormData {}\n\nconst FormCreateProperty: React.FC<FormCreatePropertyProps> = ({\n  onSubmit,\n  isGroup,\n  isProperty,\n  isValue,\n  defaultState,\n  type,\n  parent,\n  ...props\n}) => {\n  const submitOptions = useAfterSubmitOptions();\n  const {\n    formState: { errors },\n    register,\n    handleSubmit,\n    setValue,\n  } = useAppForm<IPropertyFormData>({\n    defaultValues: { ...defaultState, type } as IPropertyFormData,\n  });\n\n  console.log(errors);\n\n  const onValid = (data: IPropertyFormData) => {\n    onSubmit && onSubmit(data, { ...submitOptions.state, isGroup, isProperty, isValue });\n  };\n\n  useEffect(() => {\n    console.log('parent', defaultState?.parent);\n  }, [defaultState?.parent]);\n\n  return (\n    <ModalForm\n      onSubmit={handleSubmit(onValid)}\n      fillHeight\n      {...props}\n      onOptSelect={(_o, value, _i) => {\n        setValue('type', value);\n      }}\n      extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <FlexBox padding={'4px 8px 8px'} flex={1} fillWidth>\n        <InputLabel label={t('type')} disabled>\n          <InputText placeholder={t('type')} {...register('type')} disabled />\n        </InputLabel>\n\n        {(isProperty || isValue) && (\n          <InputLabel label={t(isProperty ? 'group' : 'property')} disabled>\n            <InputText\n              placeholder={t(isProperty ? 'group' : 'property')}\n              defaultValue={defaultState?.parent?.label ?? ''}\n              disabled\n            />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('label')} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} autoFocus required />\n        </InputLabel>\n\n        {isProperty && (\n          <InputLabel label={'Доступно для формування варіацій'}>\n            <ButtonSwitch\n              name={'isSelectable'}\n              value={!!defaultState?.isSelectable}\n              onChange={res => {\n                setValue('isSelectable', res);\n              }}\n            />\n          </InputLabel>\n        )}\n\n        <CmsConfigs margin={'8px 0 0'} fillWidth>\n          <CmsConfigsHeader padding={'8px'} justifyContent={'flex-end'} fxDirection={'row'} fillWidth>\n            <Text $size={13} $weight={500}>\n              {t('Cms configs')}\n            </Text>\n          </CmsConfigsHeader>\n\n          <InputLabel label={t('Cms key')}>\n            <InputText placeholder={t('Key')} {...register('cmsConfigs.key')} />\n          </InputLabel>\n\n          <InputLabel label={t('Cms key')} error={errors?.cmsConfigs?.key}>\n            <InputText placeholder={'Key'} {...register('cmsConfigs.key')} />\n          </InputLabel>\n\n          <InputLabel label={t('Language key')} error={errors?.cmsConfigs?.key}>\n            <LangButtonsGroup />\n          </InputLabel>\n\n          <InputLabel label={t('Label by lang key')} error={errors?.cmsConfigs?.labels?.ua}>\n            <InputText placeholder={'Label'} {...register('cmsConfigs.labels.ua')} />\n          </InputLabel>\n\n          {isGroup && (\n            <InputLabel label={t('Description')}>\n              <InputText placeholder={t('description')} {...register('cmsConfigs.description')} />\n            </InputLabel>\n          )}\n\n          {isValue && defaultState?.parent?.cmsConfigs?.type === 'color' && (\n            <InputLabel label={t('Colors')}>\n              <InputText placeholder={t('Colors')} type={'color'} {...register('cmsConfigs.description')} />\n            </InputLabel>\n          )}\n\n          {/*{isProperty && (*/}\n          {/*  <InputLabel label={t('Cms type')}>*/}\n          {/*    <CustomSelect*/}\n          {/*      {...registerSelect('cmsConfigs.type', {*/}\n          {/*        options: propCmsTypeFilterOptions,*/}\n          {/*        placeholder: t('Select cms type'),*/}\n          {/*      })}*/}\n          {/*    />*/}\n          {/*  </InputLabel>*/}\n          {/*)}*/}\n        </CmsConfigs>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\nconst CmsConfigs = styled(FlexBox)``;\n\nconst CmsConfigsHeader = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default FormCreateProperty;\n","import { LangKeyEnum } from '../../lang';\nimport React, { useMemo } from 'react';\nimport { enumToFilterOptions } from '../../utils/fabrics';\nimport ButtonsGroup from './ButtonsGroup';\n\nconst LangButtonsGroup = ({ onChange, disabled }: { onChange?: (value: LangKeyEnum) => void; disabled?: boolean }) => {\n  const options = useMemo(() => enumToFilterOptions(LangKeyEnum), []);\n\n  return <ButtonsGroup disabled={disabled} options={options} onSelect={info => onChange && onChange(info.value)} />;\n};\n\nexport default LangButtonsGroup;\n"],"names":["CmsConfigs","styled","FlexBox","_templateObject","_taggedTemplateLiteral","CmsConfigsHeader","_templateObject2","p","theme","modalBorderColor","_ref","_defaultState$parent$","_defaultState$parent","_errors$cmsConfigs","_errors$cmsConfigs2","_errors$cmsConfigs3","_errors$cmsConfigs3$l","_defaultState$parent2","_defaultState$parent3","onSubmit","isGroup","isProperty","isValue","defaultState","type","props","parent","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","_useAppForm","useAppForm","defaultValues","_objectSpread","errors","formState","register","handleSubmit","setValue","console","log","useEffect","_jsx","ModalForm","data","state","fillHeight","onOptSelect","_o","value","_i","extraFooter","FormAfterSubmitOptions","children","_jsxs","padding","flex","fillWidth","InputLabel","label","t","disabled","InputText","placeholder","defaultValue","required","autoFocus","ButtonSwitch","name","isSelectable","onChange","res","margin","justifyContent","fxDirection","Text","$size","$weight","error","cmsConfigs","key","LangButtonsGroup","labels","ua","options","useMemo","enumToFilterOptions","LangKeyEnum","ButtonsGroup","onSelect","info"],"sourceRoot":""}