{"version":3,"file":"static/js/487.b8f42042.chunk.js","mappings":"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","sources":["components/Forms/FormCreatePriceList.tsx"],"sourcesContent":["import {\n  IPriceList,\n  IPriceListReqData,\n  PriceListDto,\n  PriceListType,\n} from '../../redux/priceManagement/priceManagement.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport { useAppForm } from '../../hooks';\nimport { omit } from 'lodash';\nimport FlexBox from '../atoms/FlexBox';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport translate from '../../lang';\nimport FormCreateInner from './components/FormCreateInner';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\n\nexport interface FormCreatePriceListProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n  defaultData?: Partial<IPriceList>;\n  edit?: boolean;\n  onSubmit?: AppSubmitHandler<\n    IPriceListReqData,\n    {\n      onSuccess: (data: IPriceList) => void;\n      onError: () => void;\n    }\n  >;\n}\n\nconst FormCreatePriceList: React.FC<FormCreatePriceListProps> = ({\n  filterOptions,\n  onSubmit,\n  defaultData,\n  edit,\n  ...props\n}) => {\n  // const modalService = useModalProvider();\n  const [isSuccess] = useState(false);\n  // const [currentList, setCurrentList] = useState<IPriceList | undefined>();\n  // const currentList = usePriceListById();\n  const {\n    formState: { errors, isValid },\n    register,\n    // registerSelect,\n    clearAfterSave,\n    closeAfterSave,\n    toggleAfterSubmitOption,\n    setValue,\n    handleSubmit,\n  } = useAppForm<PriceListDto>({\n    defaultValues: omit(defaultData, ['createdAt', 'updatedAt', '_id']),\n  });\n\n  const onValidSubmit = (data: PriceListDto) =>\n    onSubmit &&\n    onSubmit(\n      {\n        data,\n        _id: defaultData?._id,\n      },\n      {\n        closeAfterSave,\n        clearAfterSave,\n        onSuccess: data => {},\n        onError: () => {},\n      }\n    );\n\n  const onAddPricesClick = () => {\n    // const newPrice = { _id: nanoid(8).toString() };\n    // toast.info(newPrice._id);\n    // setValue('prices', Array.isArray(formValues.prices) ? [...formValues.prices, newPrice] : [newPrice]);\n    // const modal = modalService.handleOpenModal({\n    //   ModalChildren: FormCreatePrice,\n    //   modalChildrenProps: {\n    //     title: 'Add prices',\n    //     type: formValues.type,\n    //   },\n    // });\n  };\n  return (\n    <ModalForm\n      isValid={isValid}\n      onSubmit={handleSubmit(onValidSubmit)}\n      title={'Create price list'}\n      {...props}\n      fitContentV\n      filterOptions={filterOptions}\n      defaultFilterValue={defaultData?.type}\n      onOptSelect={(option, value) => {\n        setValue('type', value);\n      }}\n      extraFooter={\n        <FlexBox fxDirection={'column'} fillWidth>\n          {isSuccess && <FormCreateInner buttonText={'Add prices'} onClick={onAddPricesClick} />}\n          <FormAfterSubmitOptions\n            {...{\n              clearAfterSave,\n              closeAfterSave,\n              toggleOption: toggleAfterSubmitOption,\n            }}\n          />\n        </FlexBox>\n      }\n    >\n      <FlexBox fxDirection={'column'} gap={4} padding={'8px 16px 16px'}>\n        <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={16}>\n          <InputLabel label={translate('timeFrom')} direction={'vertical'} error={errors.timeFrom} required>\n            <InputText placeholder={translate('timeFrom')} type={'datetime-local'} {...register('timeFrom')} />\n          </InputLabel>\n\n          <InputLabel label={translate('timeTo')} direction={'vertical'} error={errors.timeTo} required>\n            <InputText placeholder={translate('timeTo')} type={'datetime-local'} {...register('timeTo')} />\n          </InputLabel>\n        </FlexBox>\n\n        <InputLabel label={translate('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={translate('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\nexport default FormCreatePriceList;\n//\n// const FormCreatePrice: React.FC<FormCreatePriceProps> = ({ defaultState, type, onSubmit, ...props }) => {\n//   const {\n//     formState: { errors, isValid },\n//     formValues,\n//     register,\n//     registerSelect,\n//     clearAfterSave,\n//     closeAfterSave,\n//     toggleAfterSubmitOption,\n//     setValue,\n//     handleSubmit,\n//   } = useAppForm<PriceListItemDto>();\n//   const onValidSubmit = (data: PriceListItemDto) =>\n//     onSubmit &&\n//     onSubmit(\n//       {\n//         _id: defaultState?._id,\n//         data,\n//       },\n//       {\n//         clearAfterSave,\n//         closeAfterSave,\n//       }\n//     );\n//\n//   return (\n//     <ModalForm fitContentV isValid {...props} onSubmit={handleSubmit(onValidSubmit)}>\n//       <FlexBox gap={4} padding={'0 16px 16px'}>\n//         <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n//           <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n//         </InputLabel>\n//         {type === 'sales' && (\n//           <InputLabel label={translate('price')} direction={'vertical'} error={errors.price} required>\n//             <InputText placeholder={translate('price')} {...register('price')} required autoFocus />\n//           </InputLabel>\n//         )}\n//         {type === 'purchases' && (\n//           <InputLabel label={translate('cost')} direction={'vertical'} error={errors.cost} required>\n//             <InputText placeholder={translate('cost')} {...register('cost')} required autoFocus />\n//           </InputLabel>\n//         )}\n//       </FlexBox>\n//     </ModalForm>\n//   );\n// };\n// export interface FormCreatePriceProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n//   defaultState?: Partial<IPriceListItem>;\n//   onSubmit?: AppSubmitHandler<IPriceListItemReqData>;\n//   type?: PriceListType;\n// }\n"],"names":["_ref","filterOptions","onSubmit","defaultData","props","edit","_objectWithoutProperties","_excluded","_useState","useState","isSuccess","_slicedToArray","_useAppForm","useAppForm","defaultValues","omit","_useAppForm$formState","formState","errors","isValid","register","clearAfterSave","closeAfterSave","toggleAfterSubmitOption","setValue","handleSubmit","_jsx","ModalForm","_objectSpread","data","_id","onSuccess","onError","title","fitContentV","defaultFilterValue","type","onOptSelect","option","value","extraFooter","_jsxs","FlexBox","fxDirection","fillWidth","children","FormCreateInner","buttonText","onClick","FormAfterSubmitOptions","toggleOption","gap","padding","InputLabel","label","translate","direction","error","required","InputText","placeholder","autoFocus","timeFrom","timeTo","description","TextareaPrimary"],"sourceRoot":""}