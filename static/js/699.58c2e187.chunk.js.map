{"version":3,"file":"static/js/699.58c2e187.chunk.js","mappings":"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","sources":["components/AppPages/PageRefunds.tsx","components/AppPages/pagesStyles.tsx","hooks/useOrdersService.hook.ts"],"sourcesContent":["import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport styled from 'styled-components';\nimport { useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useRefundsSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\nimport { mockOrdersData, ordersTableColumns } from '../../data/orders.data';\nimport { IRefund } from '../../redux/refunds/refunds.types';\nimport useOrdersServiceHook from '../../hooks/useOrdersService.hook';\n// import useOrdersActionsCreatorHook from '../../hooks/useOrdersActionsCreator.hook';\n\ntype Props = {\n  path: PagePathType;\n};\n\nexport const useOrderTableConfigs = () => {\n  const service = useOrdersServiceHook();\n  const state = useRefundsSelector();\n  const { getAll } = service;\n  // const actionsCreator = useOrdersActionsCreatorHook();\n  // const filterSelectors = useProductsFilterSelectorsHook();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IRefund> => ({\n      tableData: state.refunds,\n      tableTitles: ordersTableColumns as never,\n      // tableSortParams: ordersSearchParams.filter(el => el.sort),\n      isFilter: true,\n      isSearch: true,\n      footer: true,\n      checkBoxes: true,\n      // actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [filterParams, getAll, sortParams, state.refunds]\n  );\n\n  // useEffect(() => {\n  //   if (sortParams || filterParams) {\n  //     return;\n  //   }\n  //\n  //   if (!sortParams && !filterParams) {\n  //     if (state.orders.length === 0) {\n  //       getAll({\n  //         data: { refresh: true },\n  //         onLoading: setIsLoading,\n  //       });\n  //     }\n  //   }\n  // }, [filterParams, getAll, isLoading, sortParams, state.orders.length, tableConfig]);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    filterParams,\n  };\n};\nconst PageRefunds: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOrderTableConfigs();\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} tableData={mockOrdersData} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageRefunds;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { useMemo } from 'react';\nimport { useAppDispatch } from '../redux/store.store';\nimport { OnlyUUID, ServiceDispatcherAsync } from '../redux/global.types';\n// import { createOrderThunk, getAllOrdersThunk, getOrderByIdThunk } from '../redux/orders/orders.thunks';\nimport { IOrder, IOrderReqData } from '../redux/orders/orders.types';\nimport { AppQueryParams } from '../api';\n\ntype EmptyFn = (...args: any[]) => Promise<any>;\n\nexport interface OrdersService {\n  createOne: EmptyFn | ServiceDispatcherAsync<IOrderReqData, IOrder>;\n  deleteOne: EmptyFn | ServiceDispatcherAsync;\n  updateOne: EmptyFn | ServiceDispatcherAsync;\n  getById: EmptyFn | ServiceDispatcherAsync<OnlyUUID, IOrder>;\n  getAll:\n    | EmptyFn\n    | ServiceDispatcherAsync<\n        {\n          refresh?: boolean;\n          query?: AppQueryParams;\n        },\n        IOrder[]\n      >;\n  getSlotsByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n  getShipmentsByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n  getPaymentsByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n  getInvoicesByOrderId: EmptyFn | ServiceDispatcherAsync<OnlyUUID>;\n}\n\nconst useOrdersServiceHook = (): OrdersService => {\n  const dispatch = useAppDispatch();\n\n  return useMemo(\n    (): OrdersService => ({\n      createOne: async () => dispatch(() => {}),\n      getById: async () => dispatch(() => {}),\n      getAll: async () => dispatch(() => {}),\n      deleteOne: async () => dispatch(() => {}),\n      updateOne: async () => dispatch(() => {}),\n\n      getSlotsByOrderId: async () => dispatch(() => {}),\n      getShipmentsByOrderId: async () => dispatch(() => {}),\n      getPaymentsByOrderId: async () => dispatch(() => {}),\n      getInvoicesByOrderId: async () => dispatch(() => {}),\n    }),\n    [dispatch]\n  );\n};\n\nexport default useOrdersServiceHook;\n"],"names":["useOrderTableConfigs","service","useOrdersServiceHook","state","useRefundsSelector","getAll","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","refunds","tableTitles","ordersTableColumns","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","data","refresh","query","onLoading","then","handleTableSort","param","sortOrder","dataPath","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","_useOrderTableConfigs","_jsx","AppGridPage","path","children","TableList","_objectSpread","mockOrdersData","css","takeFullPlace","_templateObject2","_templateObject3","dispatch","useAppDispatch","createOne","_createOne","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","stop","apply","arguments","getById","_getById","_callee2","_context2","_getAll","_callee3","_context3","deleteOne","_deleteOne","_callee4","_context4","updateOne","_updateOne","_callee5","_context5","getSlotsByOrderId","_getSlotsByOrderId","_callee6","_context6","getShipmentsByOrderId","_getShipmentsByOrderId","_callee7","_context7","getPaymentsByOrderId","_getPaymentsByOrderId","_callee8","_context8","getInvoicesByOrderId","_getInvoicesByOrderId","_callee9","_context9"],"sourceRoot":""}