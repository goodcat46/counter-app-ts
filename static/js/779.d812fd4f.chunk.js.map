{"version":3,"file":"static/js/779.d812fd4f.chunk.js","mappings":"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","sources":["components/AppPages/cart/FooterSummary.tsx","components/AppPages/cart/SelectVariationModal.tsx","components/AppPages/cart/SelectOfferModal.tsx","components/AppPages/cart/OrderSlotOverview.tsx","components/AppPages/cart/CartPage.tsx","hooks/useProductsFilterSelectors.hook.ts","hooks/useOffersActionsCreator.hook.tsx","components/AppPages/offers/PageOffers.tsx","components/Modals/EditOfferModal.tsx"],"sourcesContent":["import { IOrderTempSlot } from '../../../types/orders/order-slot.types';\nimport { useEffect, useRef, useState } from 'react';\nimport styled, { useTheme } from 'styled-components';\nimport { isUndefined } from 'lodash';\nimport FlexBox from '../../atoms/FlexBox';\nimport { Text } from '../../atoms/Text';\nimport { t } from '../../../lang';\nimport { toPrice } from '../../../utils/numbers';\nimport InputText from '../../atoms/Inputs/InputText';\nimport ButtonIcon from '../../atoms/ButtonIcon';\n\nexport const FooterSummary = ({\n  slot,\n  onChangeQuantity,\n}: {\n  slot?: IOrderTempSlot;\n  onChangeQuantity?: (val: number) => void;\n}) => {\n  const [quantity, setQuantity] = useState(slot?.quantity ?? 1);\n  const theme = useTheme();\n  const timeoutRef = useRef<NodeJS.Timeout | undefined>();\n  const intervalRef = useRef<NodeJS.Timer | undefined>();\n\n  const registerIncrement = (inc: 1 | -1) => {\n    return () => {\n      const q = slot?.quantity;\n      if (!isUndefined(q) && onChangeQuantity) {\n        onChangeQuantity(q + inc < 0 ? q : q + inc);\n      } else {\n        setQuantity(prev => (prev + inc < 0 ? prev : prev + inc));\n      }\n    };\n  };\n\n  const registerAutoIncrement = (inc: 1 | -1) => {\n    return {\n      onMouseDown: () => {\n        timeoutRef.current = setTimeout(() => {\n          intervalRef.current = setInterval(() => {\n            setQuantity(prev => (prev + inc < 0 ? prev : prev + inc));\n          }, 100);\n        }, 250);\n      },\n      onMouseUp: () => {\n        clearTimeout(timeoutRef.current);\n        clearInterval(intervalRef.current);\n        timeoutRef.current = undefined;\n        intervalRef.current = undefined;\n        onChangeQuantity && onChangeQuantity(quantity);\n      },\n    };\n  };\n\n  useEffect(() => {\n    const q = slot?.quantity;\n    if (!isUndefined(q)) {\n      setQuantity(q);\n    }\n  }, [slot?.quantity]);\n\n  return (\n    <FlexBox\n      flexWrap={'wrap'}\n      gap={8}\n      padding={'8px'}\n      fxDirection={'row'}\n      style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr' }}\n    >\n      {(['cashback', 'bonus', 'discount'] as const).map(dataKey => {\n        return (\n          <FlexBox\n            key={dataKey}\n            background={theme.fieldBackgroundColor}\n            borderRadius={'4px'}\n            justifyContent={'space-between'}\n          >\n            <Text $weight={400} $size={12} $padding={'4px 6px'}>\n              {t(dataKey)}\n            </Text>\n            <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n              {toPrice(slot?.[dataKey]?.amount)}\n            </Text>\n          </FlexBox>\n        );\n      })}\n\n      {(['brutto', 'netto'] as const).map(dataKey => {\n        return (\n          <FlexBox\n            key={dataKey}\n            background={theme.fieldBackgroundColor}\n            borderRadius={'4px'}\n            justifyContent={'space-between'}\n          >\n            <Text $weight={400} $size={12} $padding={'4px 6px'}>\n              {t(dataKey)}\n            </Text>\n            <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n              {toPrice(slot?.[dataKey])}\n            </Text>\n          </FlexBox>\n        );\n      })}\n\n      <FlexBox padding={'0 8px'}>\n        <ChangeButton\n          variant={'def'}\n          iconSize={'15px'}\n          icon={'SmallArrowUp'}\n          {...registerAutoIncrement(1)}\n          onClick={registerIncrement(1)}\n        ></ChangeButton>\n\n        <InputText\n          value={quantity}\n          name={'quantity'}\n          align={'center'}\n          onChange={ev => {\n            setQuantity(Number(ev.target.value));\n          }}\n          onBlur={() => {\n            onChangeQuantity && onChangeQuantity(quantity);\n          }}\n        />\n\n        <ChangeButton\n          variant={'def'}\n          iconSize={'15px'}\n          icon={'SmallArrowDown'}\n          {...registerAutoIncrement(-1)}\n          onClick={registerIncrement(-1)}\n        ></ChangeButton>\n      </FlexBox>\n    </FlexBox>\n  );\n};\nconst ChangeButton = styled(ButtonIcon)`\n  height: 15px;\n\n  &:hover {\n    padding: 4px 0;\n  }\n`;\n","import { OverlayFooter } from 'components/atoms';\nimport { FooterSummary } from './FooterSummary';\nimport { countOrderSlotValues } from '../../../utils';\nimport { useMemo, useState } from 'react';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { useAppRouter, useCurrentOffer } from '../../../hooks';\nimport { VariationEntity } from '../../../types/offers/variations.types';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport { WarehouseEntity } from '../../../types/warehousing/warehouses.types';\nimport { CreatedModal, useModalProvider } from '../../../Providers/ModalProvider/ModalProvider';\nimport DrawerBase from '../../Overlays/OverlayBase';\nimport VariationsTab from '../offers/tabs/VariationsTab';\nimport { omit } from 'lodash';\n\nexport const SelectVariationModal = ({\n  offer,\n  warehouse,\n  slotId,\n  onClose,\n}: {\n  offer?: OfferEntity;\n  warehouse?: WarehouseEntity;\n  slotId?: string;\n} & CreatedModal) => {\n  // const query = useAppQuery();\n\n  const modalSrv = useModalProvider();\n  const Offer = useCurrentOffer(offer);\n  const [selected, setSelected] = useState<VariationEntity>();\n  // const loaders = useLoaders();\n  const router = useAppRouter();\n  const cart = useCart();\n  const currentSlot = cart.actions.getSlotByVariationId(selected?._id);\n  const [quantity, setQuantity] = useState(currentSlot?.quantity ?? 1);\n\n  const counted = useMemo(() => {\n    return countOrderSlotValues({\n      ...currentSlot,\n      quantity: quantity,\n      ...(selected?.price ?? Offer?.price),\n      offer: Offer,\n      origin: selected,\n      warehouse: warehouse ?? Offer?.warehouse,\n    });\n  }, [currentSlot, Offer, quantity, selected, warehouse]);\n\n  return (\n    <DrawerBase title={`Select variation | ${Offer?.label}`} fillHeight okButton onBackPress={onClose}>\n      <VariationsTab offer={Offer} onSelect={setSelected} selected={selected} />\n\n      <FooterSummary slot={counted} onChangeQuantity={setQuantity} />\n\n      <OverlayFooter\n        canAccept={!!selected}\n        onAcceptPress={() => {\n          if (selected?._id) {\n            if (counted?.tempId && counted?.tempId?.includes(selected?._id)) {\n              counted.quantity !== currentSlot?.quantity && cart.actions.update(counted);\n            } else if (counted?.warehouse) {\n              cart.actions.addSlot(counted);\n            }\n          }\n\n          router.push({ query: omit(router.query, ['offerId', 'slotId', 'variationId']) });\n          modalSrv.clearStack();\n        }}\n      />\n    </DrawerBase>\n  );\n};\n","import { WarehouseEntity } from '../../../types/warehousing/warehouses.types';\nimport { CreatedModal, useModalService } from '../../../Providers/ModalProvider/ModalProvider';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { useAppRouter } from '../../../hooks';\nimport { useEffect, useMemo, useState } from 'react';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport { useOffersTableSettings } from '../offers/PageOffers';\nimport { countOrderSlotValues, setValueByPath } from '../../../utils';\nimport DrawerBase from '../../Overlays/OverlayBase';\nimport TableList from '../../TableList/TableList';\nimport { FooterSummary } from './FooterSummary';\nimport { OverlayFooter } from '../../atoms';\nimport { SelectVariationModal } from './SelectVariationModal';\nimport { GetAllOffersQuery } from '../../../api';\nimport { CartSlotId } from '../../../redux/cart/cart.slice';\n\nexport default function SelectOfferModal({\n  warehouse,\n  slotId,\n  onClose,\n}: { warehouse?: WarehouseEntity; slotId?: CartSlotId } & CreatedModal) {\n  const cart = useCart();\n  const service = useAppServiceProvider().get(AppModuleName.offers);\n  const { getAll } = service;\n  const currentSlot = cart.actions.getSlotWithMethods(slotId);\n  // const offersState = useProductsSelector();\n  const router = useAppRouter();\n  // const loaders = useLoaders();\n  const [selected, setSelected] = useState<OfferEntity>();\n  const [quantity, setQuantity] = useState(currentSlot?.quantity ?? 1);\n\n  const modalSrv = useModalService();\n\n  const { tableConfig, isLoading, searchParams } = useOffersTableSettings({\n    searchState: warehouse?.label\n      ? { search: warehouse?.label ?? '', param: { dataPath: 'warehouse.label', label: 'Склад' } }\n      : undefined,\n  });\n\n  const counted = useMemo(() => {\n    return countOrderSlotValues({ ...currentSlot, quantity: quantity, ...selected?.price });\n  }, [currentSlot, quantity, selected?.price]);\n\n  useEffect(() => {\n    const params: GetAllOffersQuery = setValueByPath(searchParams?.param?.dataPath, searchParams?.search);\n\n    if (warehouse) {\n      getAll({\n        data: {\n          refresh: true,\n          params: params,\n        },\n      });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <DrawerBase title={'Select offer'} fillHeight okButton onBackPress={onClose}>\n      <TableList\n        {...tableConfig}\n        isLoading={isLoading?.offers}\n        checkBoxes={false}\n        selectedRow={selected}\n        onRowClick={data => {\n          if (data?.rowData) {\n            data?.rowData?._id &&\n              router.push({\n                query: {\n                  offerId: data?.rowData?._id,\n                },\n              });\n            setSelected(data?.rowData);\n          }\n        }}\n      />\n\n      {selected && <FooterSummary slot={counted} onChangeQuantity={setQuantity} />}\n\n      <OverlayFooter\n        canAccept={!!selected}\n        onAcceptPress={() => {\n          if (selected) {\n            modalSrv.create(SelectVariationModal, {\n              offer: selected,\n            });\n          }\n        }}\n      />\n    </DrawerBase>\n  );\n}\n","import { WarehouseEntity } from '../../../types/warehousing/warehouses.types';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { useAppQuery } from '../../../hooks';\nimport { useMemo, useState } from 'react';\nimport { VariationEntity } from '../../../types/offers/variations.types';\nimport { countOrderSlotValues } from '../../../utils';\nimport FlexBox from '../../atoms/FlexBox';\nimport { FooterSummary } from './FooterSummary';\nimport { OverlayFooter } from '../../atoms';\nimport styled from 'styled-components';\n\nexport default function OrderSlotOverview({ warehouse }: { warehouse?: WarehouseEntity; slotId?: string }) {\n  const cart = useCart();\n  const query = useAppQuery();\n  const Slot = cart.actions.getSlotWithMethods(query.query?.slotId as never);\n  // const service = useAppServiceProvider().get(AppModuleName.offers);\n  // const { getAll } = service;\n  // const offersState = useProductsSelector();\n  // const router = useAppRouter();\n  // const loaders = useLoaders();\n  // const modalSrv = useModalService();\n\n  const [selected] = useState<VariationEntity | undefined>(Slot.variation);\n  const [quantity, setQuantity] = useState(Slot?.quantity ?? 1);\n\n  const counted = useMemo(() => {\n    return countOrderSlotValues({\n      variation: selected,\n      ...Slot,\n      ...(selected?.price ?? Slot),\n      origin: selected?.price ?? Slot.origin,\n      quantity: quantity,\n    });\n  }, [Slot, quantity, selected]);\n\n  return (\n    <Container fillHeight maxWidth={'380px'} flex={1} padding={'0 8px 8px'}>\n      <FlexBox flex={1}></FlexBox>\n\n      <FooterSummary slot={counted} onChangeQuantity={setQuantity} />\n\n      <OverlayFooter\n        canAccept={!!Slot.tempId && Slot.quantity !== quantity}\n        onAcceptPress={() => {\n          Slot.setQty(quantity);\n        }}\n      />\n    </Container>\n  );\n}\nconst Container = styled(FlexBox)`\n  position: relative;\n  overflow: hidden;\n\n  background-color: ${p => p.theme.sideBarBackgroundColor};\n`;\n","import styled, { useTheme } from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { takeFullGridArea } from '../pagesStyles';\nimport { BaseAppPageProps } from '../index';\nimport { AppGridPage } from '../pages';\nimport TableList from '../../TableList/TableList';\nimport { useCart } from '../../../Providers/CartProvider';\nimport { tempOrderSlotTableColumns } from '../../../data';\nimport { useEffect, useMemo } from 'react';\nimport { useModalService } from '../../../Providers/ModalProvider/ModalProvider';\nimport ButtonIcon from '../../atoms/ButtonIcon';\nimport { AccordionFormArea } from '../../atoms/FormArea/AccordionForm';\nimport { ITableAction } from '../../TableList/tableTypes.types';\nimport { useAppParams, useAppQuery, useAppRouter } from '../../../hooks';\nimport OverlayStackProvider from '../../../Providers/Overlay/OverlayStackProvider';\nimport { OverlayStack } from '../../../Providers/Overlay/OverlayStack';\nimport SelectOfferModal from './SelectOfferModal';\nimport OrderSlotOverview from './OrderSlotOverview';\nimport { useMediaQuery } from 'react-responsive';\nimport { Text } from '../../atoms/Text';\nimport { t } from '../../../lang';\nimport { toPrice } from '../../../utils/numbers';\nimport { CART_DEFAULT_ID } from '../../../redux/cart/cart.slice';\nimport { enumToTabs } from '../../../utils';\nimport TabSelector from '../../atoms/TabSelector';\n\ninterface Props extends BaseAppPageProps {}\n\nexport enum CartPageRightTabsEnum {\n  Slot = 'Slot',\n  Chat = 'Chat',\n}\nexport const cartPageTabsOptions = enumToTabs(CartPageRightTabsEnum, opt => t(opt));\nexport default function CartPage({ path }: Props) {\n  // const [isVisible, setIsVisible] = useState(false);\n  const query = useAppQuery();\n  const params = useAppParams();\n  const isDesktop = useMediaQuery({ query: '(min-width: 960px)' });\n  const cart = useCart();\n\n  useEffect(() => {\n    if (params.cartId) {\n      cart.actions.setCartId(params.cartId);\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AppGridPage path={path}>\n      <OverlayStackProvider>\n        <Page fillWidth flex={1} overflow={'hidden'} fillHeight fxDirection={'row'} gap={4}>\n          <FlexBox fillHeight flex={2}>\n            <PageCartSlots\n            // onSlotEditPress={() => setIsVisible(true)}\n            />\n          </FlexBox>\n\n          <RightSide\n            isVisible={isDesktop ? undefined : !!query?.query?.slotId}\n            className={'RightSide'}\n            // onAcceptPress={() => setIsVisible(false)}\n            style={\n              {\n                // position: 'absolute',\n                // top: 0,\n                // right: 0,\n                // zIndex: 100,\n                //\n                // width: '100%',\n                // height: '100%',\n                // alignItems: 'flex-end',\n                // background: theme.backdropColor,\n              }\n            }\n          >\n            <TabSelector options={cartPageTabsOptions} />\n\n            <OrderSlotOverview />\n          </RightSide>\n        </Page>\n\n        <OverlayStack />\n      </OverlayStackProvider>\n    </AppGridPage>\n  );\n}\n\nconst Page = styled(FlexBox)`\n  ${takeFullGridArea}\n`;\nconst RightSide = styled(FlexBox)<{ isVisible?: boolean }>`\n  overflow: auto;\n\n  max-width: 100%;\n  height: 100%;\n\n  transition: ${p => p.theme.globals.timingFunctionMain};\n  background-color: ${p => p.theme.backgroundColorLight};\n\n  border-color: ${p => p.theme.trBorderClr};\n  border-style: solid;\n  border: 0;\n\n  // border-left-width: ${p => (p.isVisible ? `1px` : 0)};\n  border-left-width: 1px;\n\n  @media screen and (min-width: 960px) {\n    min-width: 320px;\n  }\n\n  @media screen and (max-width: 960px) {\n    border-left-width: ${p => (p.isVisible ? `1px` : 0)};\n\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 250;\n    height: 100%;\n\n    transform: translateX(${p => (p.isVisible ? 0 : 100)}%);\n\n    box-shadow: ${p => (p.isVisible ? `0 12px 26px rgba(0, 0, 0, 0.25)` : '')};\n  }\n`;\n\nfunction PageCartSlots({ onSlotEditPress }: { onSlotEditPress?: () => void }) {\n  const cartId = useAppQuery().query.cartId;\n  // const cartState = useCartSelector();\n  const cartSrv = useCart();\n  const modalSrv = useModalService();\n  const router = useAppRouter();\n  const theme = useTheme();\n  const Cart = cartSrv.actions.getCurrentCart(cartId || CART_DEFAULT_ID);\n\n  const renderOrders = useMemo(() => {\n    const ordersIds = Cart?.ordersIds;\n\n    return ordersIds?.map((orderId, index) => {\n      if (!orderId) {\n        return null;\n      }\n      const order = cartSrv.actions.getOrderById(orderId);\n      const slots = cartSrv.ordersSlotsMap?.[orderId];\n\n      return (\n        <AccordionFormArea\n          key={orderId ?? index}\n          label={t('Warehouse') + ': ' + order?.warehouse?.label ?? t('undefined')}\n          hideFooter\n          renderTitle={\n            <FlexBox fxDirection={'row'} gap={8} padding={'0 12px'}>\n              <Text $size={13} $weight={600} $padding={'2px 8px'}>\n                {t('Warehouse') + ': ' + order?.warehouse?.label ?? t('undefined')}\n              </Text>\n            </FlexBox>\n          }\n        >\n          <FlexBox minHeight={'300px'}>\n            <TableList\n              tableData={slots}\n              hasSearch={false}\n              hasFilter={false}\n              checkBoxes={true}\n              onCheckboxChange={ev => {\n                cartSrv.actions.setChecked({ tempId: ev.rowId, checked: ev.checked });\n              }}\n              onHeadCheckboxChange={ev => {\n                cartSrv.actions.setChecked({ orderId, checked: ev.checked });\n              }}\n              selectedRows={order?.selectedIds}\n              rowIds={order?.slotsIds}\n              keyExtractor={data => {\n                return data?.tempId ?? 'slot';\n              }}\n              tableTitles={tempOrderSlotTableColumns}\n              onRowClick={() => {}}\n              actionsCreator={(ctx): ITableAction[] => {\n                const currentId = ctx.selectedRow?.tempId;\n\n                return [\n                  {\n                    icon: 'delete',\n                    disabled: !currentId,\n                    onClick: () => {\n                      currentId && cartSrv.actions.removeSlot(currentId);\n                    },\n                  },\n                  {\n                    icon: 'edit',\n                    disabled: !currentId,\n                    onClick: () => {\n                      currentId &&\n                        router.push({\n                          query: {\n                            slotId: currentId,\n                          },\n                        });\n                    },\n                  },\n                  {\n                    icon: 'plus',\n                    type: 'onlyIconFilled',\n                    disabled: !order?.warehouse,\n                    onClick: () => {\n                      order?.warehouse &&\n                        modalSrv.create(SelectOfferModal, {\n                          warehouse: order?.warehouse,\n                        });\n                    },\n                  },\n                ];\n              }}\n            />\n          </FlexBox>\n\n          <FlexBox padding={'8px 0'}>\n            <ButtonIcon\n              variant={'filledMiddle'}\n              onClick={() => {\n                // modalSrv.create(SelectOfferModal, {});\n                cartSrv.actions.removeOrder(orderId);\n              }}\n            >\n              {'Remove'}\n            </ButtonIcon>\n          </FlexBox>\n        </AccordionFormArea>\n      );\n    });\n  }, [Cart?.ordersIds, cartSrv.actions, cartSrv.ordersSlotsMap, modalSrv, router]);\n\n  return (\n    <FlexBox overflow={'auto'} fillHeight>\n      <AccordionFormArea label={`Cart: ${Cart?.tempId}`} expandable={true} isOpen={true} hideFooter={true}>\n        <FlexBox padding={'8px 12px'} flexWrap={'wrap'} fxDirection={'row'} gap={10}>\n          {(['cashback', 'bonus', 'discount'] as const).map(dataKey => {\n            return (\n              <FlexBox\n                key={dataKey}\n                background={theme.backgroundColorSecondary}\n                borderRadius={'2px'}\n                justifyContent={'space-between'}\n              >\n                <Text $weight={400} $size={12} $padding={'4px 6px'} $textTransform={'capitalize'}>\n                  {t(dataKey)}\n                </Text>\n                <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n                  {toPrice(Cart?.summary?.[dataKey]?.amount)}\n                </Text>\n              </FlexBox>\n            );\n          })}\n\n          {(['brutto', 'netto'] as const).map(dataKey => {\n            return (\n              <FlexBox\n                key={dataKey}\n                background={theme.backgroundColorSecondary}\n                borderRadius={'2px'}\n                justifyContent={'space-between'}\n              >\n                <Text $weight={400} $size={12} $padding={'4px 6px'} $textTransform={'capitalize'}>\n                  {t(dataKey)}\n                </Text>\n                <Text $weight={600} $size={13} $padding={'4px 6px'} $align={'end'}>\n                  {toPrice(Cart?.summary?.[dataKey])}\n                </Text>\n              </FlexBox>\n            );\n          })}\n        </FlexBox>\n      </AccordionFormArea>\n\n      <FlexBox flex={1} gap={8}>\n        {renderOrders}\n      </FlexBox>\n\n      <FlexBox\n        fxDirection={'row'}\n        gap={12}\n        padding={'16px'}\n        fillWidth\n        alignItems={'center'}\n        justifyContent={'center'}\n        style={{\n          position: 'sticky',\n          bottom: 0,\n          left: 0,\n          zIndex: 100,\n\n          backdropFilter: 'blur(3px)',\n        }}\n      >\n        <ButtonIcon\n          variant={'outlinedMiddle'}\n          icon={'plus'}\n          disabled={!Cart}\n          onClick={() => {\n            modalSrv.create(SelectOfferModal, {});\n          }}\n        >\n          {'Add slot'}\n        </ButtonIcon>\n\n        <ButtonIcon\n          variant={'filledMiddle'}\n          disabled={!Cart}\n          onClick={() => {\n            Cart?.remove();\n          }}\n        >\n          {'Remove all'}\n        </ButtonIcon>\n      </FlexBox>\n    </FlexBox>\n  );\n}\n","import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { OfferEntity } from '../types/offers/offers.types';\n\nconst useStorageFilterSelectors = (): FilterSelectorType<keyof OfferEntity>[] => {\n  return [\n    // {\n    //   label: 'Рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'category',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useStorageFilterSelectors;\n","import { CreatedModal, useModalProvider } from '../Providers/ModalProvider/ModalProvider';\nimport { useCallback, useMemo, useState } from 'react';\nimport { TableActionsCreator } from '../components/TableList/tableTypes.types';\nimport { OfferEntity, OfferStatusEnum } from '../types/offers/offers.types';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { t } from '../lang';\nimport EditOfferModal from '../components/Modals/EditOfferModal';\nimport CreateOfferModal from '../components/Modals/CreateOfferModal';\nimport { useAppRouter } from './useRouter.hook';\nimport {\n  useDirectorySelector,\n  useOffersSelector,\n  usePropertiesSelector,\n  useWarehousesSelector,\n} from '../redux/selectors.store';\nimport { UseLoadersReturn } from '../Providers/Loaders/useLoaders.hook';\nimport { useAppForm } from './index';\nimport { enumToFilterOptions, toReqData } from '../utils';\nimport { FlexBox, FlexForm } from '../components/atoms/FlexBox';\nimport ButtonSwitch from '../components/atoms/ButtonSwitch';\nimport ModalBase from '../components/atoms/Modal';\nimport InputLabel from '../components/atoms/Inputs/InputLabel';\nimport InputText from '../components/atoms/Inputs/InputText';\nimport { GetAllOffersQuery } from '../api';\nimport { AccordionFormArea } from '../components/atoms/FormArea/AccordionForm';\nimport ModalFooter from '../components/atoms/Modal/ModalFooter';\nimport ButtonsGroup from '../components/atoms/ButtonsGroup';\nimport { offerTypeFilterOptions } from '../data/modalFilterOptions.data';\nimport TagButtonsFilter from '../components/atoms/TagButtonsFilter';\nimport { ApiDirType } from '../redux/APP_CONFIGS';\nimport OfferCategoriesSelector from '../components/Forms/offers/categories/OfferCategoriesSelector';\nimport OfferPropertySelector from '../components/Forms/offers/variations/OfferPropertySelector';\nimport { PropertiesGroupEntity } from '../types/offers/properties.types';\nimport TabSelector from '../components/atoms/TabSelector';\nimport { omit } from 'lodash';\n\nexport type OffersActionsCreator = TableActionsCreator<OfferEntity>;\n\nexport const useOffersActionsCreator = ({\n  loaders,\n}: { loaders?: UseLoadersReturn<'refresh' | 'offer'> } = {}): OffersActionsCreator => {\n  const service = useAppServiceProvider().get(ServiceName.offers);\n  const router = useAppRouter();\n  const modals = useModalProvider();\n  const stateMap = useOffersSelector().dataMap;\n\n  return useCallback(\n    ctx => {\n      const currentId = ctx.selectedRow?._id;\n      const Offer = currentId ? stateMap?.[currentId] : undefined;\n\n      return [\n        {\n          name: 'filter',\n          icon: 'filterOff',\n          onClick: () => {\n            modals.create(OffersFilterModal, {\n              onSubmit: data => {\n                service.getAll({\n                  params: toReqData(data),\n                });\n              },\n            });\n          },\n        },\n        { separator: true },\n        {\n          name: 'refreshData',\n          title: t('Refresh data'),\n          icon: 'refresh',\n          type: 'onlyIcon',\n          onClick: () => {\n            service.getAll({\n              data: { refresh: true },\n              onLoading: loaders ? loaders.onLoading('refresh') : ctx.onRefresh,\n            });\n          },\n        },\n        { separator: true },\n\n        {\n          name: 'review',\n          title: 'Перегляд продукту',\n          icon: 'openInNew',\n          disabled: !currentId,\n          type: 'onlyIcon',\n          navTo: `/app/${router.params.permissionId}/offers/` + currentId,\n        },\n\n        {\n          name: 'edit',\n          title: 'Змінити',\n          icon: 'edit',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !currentId,\n          onClick: () => {\n            if (Offer) {\n              modals.create(EditOfferModal, {\n                offer: Offer,\n              });\n            } else if (currentId) {\n              service.getOne({\n                data: { data: { params: { _id: currentId } } },\n                onLoading: loaders ? loaders.onLoading('offer') : ctx.onRefresh,\n                onSuccess: ({ data }) => {\n                  // router.push({ query: { offerId: data._id } });\n\n                  modals.create(EditOfferModal, {\n                    offer: data,\n                  });\n                },\n              });\n            }\n          },\n        },\n        {\n          name: 'copy',\n          title: 'Копіювати',\n          icon: 'copy',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !Offer,\n          onClick: () => {\n            Offer &&\n              modals.create(EditOfferModal, {\n                offer: Offer,\n                copy: true,\n              });\n          },\n        },\n        {\n          name: 'archiveOffer',\n          title: 'Архів',\n          icon: 'archive',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        { separator: true },\n        {\n          name: 'createOffer',\n          title: 'Новий',\n          icon: 'plus',\n          iconSize: '90%',\n          type: 'onlyIconFilled',\n          disabled: false,\n          onClick: () => {\n            modals.create(CreateOfferModal);\n          },\n        },\n      ];\n    },\n\n    [loaders, modals, router, service, stateMap]\n  );\n};\n\nexport default useOffersActionsCreator;\n\nexport type OffersFilterForm = GetAllOffersQuery & {\n  propsIdsMap?: Record<string, string[]>;\n};\n\nconst keys = ['createdAt', 'updatedAt', 'deletedAt'] as const;\nconst OffersFilterModal = ({ onSubmit, onClose }: { onSubmit?: (data: GetAllOffersQuery) => void } & CreatedModal) => {\n  const dirTags = useDirectorySelector(ApiDirType.TAGS);\n  const dirBrands = useDirectorySelector(ApiDirType.BRANDS);\n  const dirCategories = useDirectorySelector(ApiDirType.CATEGORIES_PROD);\n  const dirProperties = usePropertiesSelector();\n  const warehouses = useWarehousesSelector().warehouses;\n\n  const filter = useAppForm<OffersFilterForm>();\n\n  const offerStatusFilterOptions = enumToFilterOptions(OfferStatusEnum);\n  const [template, setTemplate] = useState<PropertiesGroupEntity>();\n\n  const mappedOptions = useMemo(() => {\n    return {\n      tags: dirTags.directory.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      categories: dirCategories.directory.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      brands: dirBrands.directory.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      properties: dirProperties.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n      warehouses: warehouses.map((item, index) => {\n        return { ...item, label: item.label ?? `Item ${index}`, value: item._id, name: '' };\n      }),\n    };\n  }, [dirBrands.directory, dirCategories.directory, dirProperties, dirTags.directory, warehouses]);\n\n  return (\n    <ModalBase title={'Filter'} onClose={onClose}>\n      <FlexForm\n        padding={'8px'}\n        onSubmit={filter.handleSubmit(fData => {\n          console.log(fData);\n          onSubmit && onSubmit(omit(fData, ['propsIdsMap']));\n        })}\n      >\n        <InputLabel label={t('Status')}>\n          <TagButtonsFilter<OfferStatusEnum>\n            onSelectValue={option => {\n              filter.setValue('approved', option.value as OfferStatusEnum);\n            }}\n            value={filter.formValues.approved ? [filter.formValues.approved] : undefined}\n            options={offerStatusFilterOptions}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('Type')}>\n          <ButtonsGroup value={filter.formValues.type} options={offerTypeFilterOptions} form={filter} />\n        </InputLabel>\n\n        <InputLabel label={t('Visibility')}>\n          <ButtonSwitch\n            name={'visible'}\n            value={filter.formValues.visible}\n            onChange={val => {\n              filter.setValue('visible', val, { shouldTouch: true, shouldDirty: true });\n            }}\n          />\n        </InputLabel>\n\n        <AccordionFormArea hideFooter label={'Tags'}>\n          <TagButtonsFilter\n            multiple\n            onChange={values => {\n              filter.setValue('tagsIds', values);\n            }}\n            value={filter.formValues.tagsIds}\n            options={mappedOptions.tags}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Categories'} maxHeight={'500px'}>\n          <OfferCategoriesSelector\n            onChangeIds={ids => {\n              filter.setValue('categoriesIds', ids);\n            }}\n            selectedIds={filter.formValues.categoriesIds}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Properties'}>\n          <TabSelector\n            options={dirProperties}\n            defaultOption={template}\n            onOptSelect={option => {\n              setTemplate(option);\n            }}\n          />\n\n          {template?.childrenList?.map(item => {\n            return (\n              <OfferPropertySelector\n                key={item._id}\n                item={item}\n                multiple\n                selectedIds={filter.formValues.propsIdsMap?.[item._id]}\n                onChangeIds={(propId, valueIds) => {\n                  filter.setValue(`propsIdsMap.${propId}`, valueIds, { shouldDirty: true, shouldTouch: true });\n\n                  filter.setValue(\n                    `propertiesIds`,\n                    Array.from(new Set([...(filter.formValues.propertiesIds ?? []), ...valueIds])),\n                    { shouldDirty: true, shouldTouch: true }\n                  );\n                }}\n              />\n            );\n          })}\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Brands'}>\n          <TagButtonsFilter\n            multiple\n            onChange={values => {\n              filter.setValue('brandsIds', values);\n            }}\n            value={filter.formValues.brandsIds}\n            options={mappedOptions.brands}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea hideFooter label={'Warehouses'}>\n          <TagButtonsFilter\n            multiple\n            onChange={values => {\n              filter.setValue('warehouse.ids', values);\n            }}\n            value={filter.formValues.warehouse?.ids}\n            options={mappedOptions.warehouses}\n          />\n        </AccordionFormArea>\n\n        <AccordionFormArea label={'Date fields'} hideFooter>\n          {keys.map(key => {\n            return (\n              <FlexBox\n                key={key}\n                gap={12}\n                fxDirection={'row'}\n                fillWidth\n                xsStyles={{ fxDirection: 'column', gap: 0, margin: '0 0 8px' }}\n              >\n                <InputLabel flex={1} label={`${t(key)} ${t('From').toLowerCase()}:`}>\n                  <InputText type={'datetime-local'} {...filter.register(`${key}.dateFrom`)} />\n                </InputLabel>\n\n                <InputLabel flex={1} label={`${t(key)} ${t('To').toLowerCase()}:`}>\n                  <InputText type={'datetime-local'} {...filter.register(`${key}.dateTo`)} />\n                </InputLabel>\n              </FlexBox>\n            );\n          })}\n        </AccordionFormArea>\n\n        <ModalFooter onSubmitPassed />\n      </FlexForm>\n    </ModalBase>\n  );\n};\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps, TableSortOrderEnum } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { useOffersSelector } from '../../../redux/selectors.store';\nimport { GetAllOffersQuery } from '../../../api';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport useProductsFilterSelectorsHook from '../../../hooks/useProductsFilterSelectors.hook';\nimport useOffersActionsCreator from '../../../hooks/useOffersActionsCreator.hook';\nimport { BaseAppPageProps } from '../index';\nimport {\n  OfferSearchParam,\n  OfferSortParam,\n  offersSearchParams,\n  offersSortParams,\n  offersTableColumns,\n} from '../../../data';\nimport { useLoaders } from '../../../Providers/Loaders/useLoaders.hook';\nimport { TableSearchFormState } from '../../TableList/TableOverHead/TableSearchForm/TableSearchForm';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { setValueByPath } from '../../../utils';\nimport FlexBox from '../../atoms/FlexBox';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageOffers: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOffersTableSettings({});\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} showFooter isLoading={isLoading?.offers} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled(FlexBox)`\n  ${takeFullGridArea}\n`;\n\nexport default PageOffers;\n\nexport const useOffersTableSettings = ({\n  searchState,\n  sortState,\n}: {\n  searchState?: TableSearchFormState<OfferSearchParam>;\n  sortState?: { param: OfferSortParam; order: TableSortOrderEnum };\n}) => {\n  const loaders = useLoaders<'offers' | 'refresh' | 'offer'>({\n    offers: { content: 'Refreshing...' },\n    refresh: { content: 'Refreshing...' },\n    offer: { content: 'Refreshing...' },\n  });\n  const { onLoading, isLoading } = loaders;\n  const service = useAppServiceProvider().get(AppModuleName.offers);\n  const { getAll } = service;\n  const state = useOffersSelector();\n\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useOffersActionsCreator({ loaders });\n\n  const [sortParams, setSortParams] = useState(sortState);\n  const [searchParams, setSearchParams] = useState<TableSearchFormState | undefined>(searchState);\n\n  const tableConfig = useMemo(\n    (): ITableListProps<OfferEntity, OfferSearchParam, OfferSortParam> => ({\n      onSubmitSearch: data => {\n        if (data.search) {\n          const params: GetAllOffersQuery = {};\n\n          const path = data.param?.dataPath;\n          if (path && data.search) {\n            setValueByPath(path, data.search, params, { mutation: true });\n          }\n\n          setSearchParams(data);\n\n          getAll({\n            params,\n            onLoading: onLoading('offers'),\n          }).then();\n        } else {\n          getAll({\n            onLoading: onLoading('offers'),\n          }).then();\n        }\n      },\n      tableData: state.list,\n      tableTitles: offersTableColumns,\n      searchParams: offersSearchParams,\n      sortParams: offersSortParams,\n      filterSelectors,\n      hasFilter: false,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      actionsCreator,\n\n      onTableSortChange: (param, order) => {\n        setSortParams({ param, order });\n\n        console.log({ param, order });\n\n        getAll({\n          params: {\n            sortOrder: order,\n            sortPath: param.dataPath,\n          },\n\n          onLoading: onLoading('offers'),\n        }).then();\n      },\n    }),\n    [actionsCreator, filterSelectors, getAll, onLoading, state.list]\n  );\n\n  useEffect(() => {\n    if (state.list.length === 0) {\n      getAll({\n        onLoading: onLoading('offers'),\n      });\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    // filterParams,\n    searchParams,\n  };\n};\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/dimensions/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../lang';\nimport { toOfferFormData } from '../../utils';\nimport { OfferEntity, OfferTypeEnum } from '../../types/offers/offers.types';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/measurement/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport { AppLoaderSpiner } from '../atoms/AppLoaderSpiner';\nimport { Text } from '../atoms/Text';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider } from 'Providers/Loaders/LoaderProvider';\nimport { OfferFormPropertiesArea } from '../Forms/offers/properties/OfferFormPropertiesArea';\nimport { OfferFormImagesArea } from '../Forms/offers/images/OfferFormImagesArea';\nimport { useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/categories/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\nimport { OfferPriceFormArea } from '../Forms/pricing/OfferPriceFormArea';\n\nexport interface EditOfferModalProps extends ModalFormProps {\n  copy?: boolean;\n  offer: OfferEntity;\n}\n\nconst EditOfferModal: React.FC<EditOfferModalProps> = ({ onClose, offer, copy }) => {\n  const Offer = useCurrentOffer(offer);\n  // const service = useOffersService();\n  // const router = useAppRouter();\n\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>(\n    { offer_refresh: { content: 'Refreshing...' }, offer_update: { content: 'Updating...' } },\n    {\n      formData: Offer ? toOfferFormData(Offer) : { type: OfferTypeEnum.GOODS },\n    }\n  );\n\n  const { setData, state } = loaders;\n\n  const offerId = copy ? state.formData?._id : Offer?._id;\n\n  if (!Offer) {\n    return (\n      <ModalBase title={!copy ? t('Update offer') : t('Copy offer')} fillHeight>\n        <FlexBox fillWidth fillHeight padding={'26px'} alignItems={'center'} justifyContent={'center'}>\n          <Text $size={16} $weight={600}>\n            {t('Offer not found')}\n          </Text>\n        </FlexBox>\n      </ModalBase>\n    );\n  }\n\n  return (\n    <ModalBase fillHeight title={!copy ? t('Update offer') : t('Copy offer')} onClose={onClose}>\n      <LoadersProvider value={loaders}>\n        {loaders.isLoading?.offer ? (\n          <FlexBox fillWidth padding={'24px'} alignItems={'center'} gap={16}>\n            <AppLoaderSpiner size={52} />\n\n            <Text>{t('Loading info about offer...')}</Text>\n          </FlexBox>\n        ) : (\n          <FlexBox padding={'0 0 16px'}>\n            <OfferBaseInfoFormArea\n              _id={offerId}\n              edit={!copy}\n              type={state.formData?.type}\n              defaultValues={state?.formData}\n              onSuccess={({ data }) => {\n                setData('formData', copy ? { ...toOfferFormData(data), _id: data._id } : toOfferFormData(data));\n              }}\n            />\n\n            <OfferFormCategoriesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.categories}\n              disabled={!state.formData}\n            />\n\n            <OfferFormPropertiesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.properties}\n              disabled={!state.formData}\n            />\n\n            <OfferPriceFormArea\n              expandable={true}\n              isOpen={false}\n              offer={Offer}\n              defaultState={Offer?.price}\n              price={Offer?.price}\n              title={t('Price')}\n            />\n\n            <OfferFormImagesArea\n              offer={Offer}\n              defaultValues={state?.formData?.images}\n              disabled={!state?.formData}\n              _id={offerId}\n            />\n\n            <OfferDimensionsFormArea\n              offer={Offer}\n              defaultValues={state.formData?.dimensions}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n            <OfferMeasurementFormArea\n              offer={Offer}\n              defaultValues={state.formData?.measurement}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n          </FlexBox>\n        )}\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default EditOfferModal;\n"],"names":["FooterSummary","_ref","_slot$quantity","slot","onChangeQuantity","_useState","useState","quantity","_useState2","_slicedToArray","setQuantity","theme","useTheme","timeoutRef","useRef","intervalRef","registerIncrement","inc","q","isUndefined","prev","registerAutoIncrement","onMouseDown","current","setTimeout","setInterval","onMouseUp","clearTimeout","clearInterval","undefined","useEffect","_jsxs","FlexBox","flexWrap","gap","padding","fxDirection","style","display","gridTemplateColumns","children","map","dataKey","_slot$dataKey","background","fieldBackgroundColor","borderRadius","justifyContent","_jsx","Text","$weight","$size","$padding","t","$align","toPrice","amount","ChangeButton","_objectSpread","variant","iconSize","icon","onClick","InputText","value","name","align","onChange","ev","Number","target","onBlur","styled","ButtonIcon","_templateObject","_taggedTemplateLiteral","SelectVariationModal","_currentSlot$quantity","offer","warehouse","onClose","slotId","modalSrv","useModalProvider","Offer","useCurrentOffer","selected","setSelected","router","useAppRouter","cart","useCart","currentSlot","actions","getSlotByVariationId","_id","_useState3","_useState4","counted","useMemo","_selected$price","countOrderSlotValues","price","origin","DrawerBase","title","concat","label","fillHeight","okButton","onBackPress","VariationsTab","onSelect","OverlayFooter","canAccept","onAcceptPress","_counted$tempId","tempId","includes","update","addSlot","push","query","omit","clearStack","SelectOfferModal","_warehouse$label","getAll","useAppServiceProvider","get","AppModuleName","getSlotWithMethods","useModalService","_useOffersTableSettin","useOffersTableSettings","searchState","search","param","dataPath","tableConfig","isLoading","searchParams","_searchParams$param","params","setValueByPath","data","refresh","TableList","offers","checkBoxes","selectedRow","onRowClick","_data$rowData","_data$rowData2","rowData","offerId","create","OrderSlotOverview","_query$query","_Slot$quantity","useAppQuery","Slot","variation","_selected$price2","Container","maxWidth","flex","setQty","p","sideBarBackgroundColor","CartPageRightTabsEnum","cartPageTabsOptions","enumToTabs","opt","CartPage","path","useAppParams","isDesktop","useMediaQuery","cartId","setCartId","AppGridPage","OverlayStackProvider","Page","fillWidth","overflow","PageCartSlots","RightSide","isVisible","className","TabSelector","options","OverlayStack","takeFullGridArea","_templateObject2","globals","timingFunctionMain","backgroundColorLight","trBorderClr","_ref2","onSlotEditPress","cartSrv","Cart","getCurrentCart","CART_DEFAULT_ID","renderOrders","ordersIds","orderId","index","_cartSrv$ordersSlotsM","_ref3","_order$warehouse","_ref4","_order$warehouse2","order","getOrderById","slots","ordersSlotsMap","AccordionFormArea","hideFooter","renderTitle","minHeight","tableData","hasSearch","hasFilter","onCheckboxChange","setChecked","rowId","checked","onHeadCheckboxChange","selectedRows","selectedIds","rowIds","slotsIds","keyExtractor","_data$tempId","tableTitles","tempOrderSlotTableColumns","actionsCreator","ctx","_ctx$selectedRow","currentId","disabled","removeSlot","type","removeOrder","expandable","isOpen","_Cart$summary","_Cart$summary$dataKey","backgroundColorSecondary","$textTransform","summary","_Cart$summary2","alignItems","position","bottom","left","zIndex","backdropFilter","remove","loaders","arguments","length","service","ServiceName","modals","stateMap","useOffersSelector","dataMap","useCallback","OffersFilterModal","onSubmit","toReqData","separator","onLoading","onRefresh","navTo","permissionId","EditOfferModal","getOne","onSuccess","copy","CreateOfferModal","keys","_template$childrenLis","_filter$formValues$wa","dirTags","useDirectorySelector","ApiDirType","dirBrands","dirCategories","dirProperties","usePropertiesSelector","warehouses","useWarehousesSelector","filter","useAppForm","offerStatusFilterOptions","enumToFilterOptions","OfferStatusEnum","template","setTemplate","mappedOptions","tags","directory","item","_item$label","categories","_item$label2","brands","_item$label3","properties","_item$label4","_item$label5","ModalBase","FlexForm","handleSubmit","fData","console","log","InputLabel","TagButtonsFilter","onSelectValue","option","setValue","formValues","approved","ButtonsGroup","offerTypeFilterOptions","form","ButtonSwitch","visible","val","shouldTouch","shouldDirty","multiple","values","tagsIds","maxHeight","OfferCategoriesSelector","onChangeIds","ids","categoriesIds","defaultOption","onOptSelect","childrenList","_filter$formValues$pr","OfferPropertySelector","propsIdsMap","propId","valueIds","_filter$formValues$pr2","Array","from","Set","_toConsumableArray","propertiesIds","brandsIds","key","xsStyles","margin","toLowerCase","register","ModalFooter","onSubmitPassed","props","showFooter","sortState","useLoaders","content","state","filterSelectors","useProductsFilterSelectorsHook","useOffersActionsCreator","sortParams","setSortParams","setSearchParams","onSubmitSearch","_data$param","mutation","then","list","offersTableColumns","offersSearchParams","offersSortParams","onTableSortChange","sortOrder","sortPath","_state$formData","_loaders$isLoading","_state$formData2","_state$formData3","_state$formData4","_state$formData5","_state$formData6","_state$formData7","_state$formData8","_state$formData9","offer_refresh","offer_update","formData","toOfferFormData","OfferTypeEnum","setData","LoadersProvider","AppLoaderSpiner","size","OfferBaseInfoFormArea","edit","defaultValues","OfferFormCategoriesArea","OfferFormPropertiesArea","OfferPriceFormArea","defaultState","OfferFormImagesArea","images","OfferDimensionsFormArea","dimensions","OfferMeasurementFormArea","measurement"],"sourceRoot":""}