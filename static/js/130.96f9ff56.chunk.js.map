{"version":3,"file":"static/js/130.96f9ff56.chunk.js","mappings":"4SA6BMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KAAaG,IAAI,KACxBC,MAAOJ,EAAAA,KAAaG,IAAI,KAAKE,WAC7BC,YAAaN,EAAAA,KAAaG,IAAI,KAAKE,aA4D/BE,EAASC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHASzB,UAlE0D,SAAHC,GAA8C,IAAxCC,EAAQD,EAARC,SAAkBC,GAAFF,EAANG,OAAYH,EAAJE,MAASE,GAAKC,EAAAA,EAAAA,GAAAL,EAAAM,GAC3FC,GAOIC,EAAAA,EAAAA,IAA4B,CAC9BC,eAAaC,EAAAA,EAAAA,GAAA,GAAOR,GACpBS,UAAUC,EAAAA,EAAAA,GAAYxB,GACtByB,eAAgB,aAChBC,EAAAP,EAVAQ,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QACrBC,EAAQX,EAARW,SACAC,EAAYZ,EAAZY,aACAC,EAAcb,EAAda,eACAC,EAAcd,EAAdc,eACAC,EAAuBf,EAAvBe,wBAmBF,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAASd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJN,GAAK,IACTH,SAXJ,SAA0BwB,GACxB,GAAIA,EACF,OAAON,GAAa,SAAAjB,GAClBuB,EAAUvB,EAAM,CAAEkB,eAAAA,EAAgBC,eAAAA,GACpC,GAEJ,CAKcK,CAAiBzB,GAC3BgB,QAASA,EACTU,aACEJ,EAAAA,EAAAA,KAACK,EAAAA,EAAsB,CACrBR,eAAgBA,EAChBC,eAAgBA,EAChBQ,aAAcP,IAEjBQ,UAEDP,EAAAA,EAAAA,KAAC3B,EAAM,CAAAkC,UAWLP,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACxC,OAAOyC,EAAAA,EAAAA,GAAE,SAAUC,UAAW,WAAYC,MAAOlB,EAAOzB,MAAO4C,UAAQ,EAAAL,UACjFP,EAAAA,EAAAA,KAACa,EAAAA,IAAS1B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAC2B,aAAaL,EAAAA,EAAAA,GAAE,gBAAoBd,EAAS,UAAQ,IAAEiB,UAAQ,EAACG,WAAS,WAK7F,C","sources":["components/Forms/FormCreateMetod.tsx"],"sourcesContent":["import {\n  DirectoriesFormProps,\n  ICommunicationDirItem,\n  IDirItemBase,\n  IPaymentDirItem,\n  IShipmentDirItem,\n  MethodDirType,\n} from '../Directories/dir.types';\nimport ModalForm from '../ModalForm';\n\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport styled from 'styled-components';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport t from '../../lang';\nimport InputText from '../atoms/Inputs/InputText';\nimport React from 'react';\nimport { useAppForm } from '../../hooks';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\n\nexport interface FormCreateMethodProps extends DirectoriesFormProps<MethodDirType, IDirItemBase, IMethodFormData> {}\n\nexport interface IMethodFormData\n  extends Omit<\n    IPaymentDirItem | IShipmentDirItem | ICommunicationDirItem,\n    '_id' | 'createdAt' | 'deletedAt' | 'updatedAt'\n  > {}\n\nconst validation = yup.object().shape({\n  label: yup.string().max(100),\n  email: yup.string().max(100).optional(),\n  description: yup.string().max(250).optional(),\n});\n\nconst FormCreateMethod: React.FC<FormCreateMethodProps> = ({ onSubmit, parent, data, ...props }) => {\n  const {\n    formState: { errors, isValid },\n    register,\n    handleSubmit,\n    clearAfterSave,\n    closeAfterSave,\n    toggleAfterSubmitOption,\n  } = useAppForm<IMethodFormData>({\n    defaultValues: { ...data },\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n\n  // const filterOptions = useMemo(() => {\n  //   return enumToArray(ContractorsTypesEnum).map(el => ({ label: translate(el), value: el }));\n  // }, []);\n\n  function formEventWrapper(evHandler?: AppSubmitHandler<IMethodFormData>) {\n    if (evHandler) {\n      return handleSubmit(data => {\n        evHandler(data, { clearAfterSave, closeAfterSave });\n      });\n    }\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={formEventWrapper(onSubmit)}\n      isValid={isValid}\n      extraFooter={\n        <FormAfterSubmitOptions\n          clearAfterSave={clearAfterSave}\n          closeAfterSave={closeAfterSave}\n          toggleOption={toggleAfterSubmitOption}\n        />\n      }\n    >\n      <Inputs>\n        {/*<CustomSelect*/}\n        {/*  {...registerSelect('type', {*/}\n        {/*    label: t('type'),*/}\n        {/*    placeholder: t('type'),*/}\n        {/*    required: true,*/}\n        {/*    error: errors.type,*/}\n        {/*    options: filterOptions,*/}\n        {/*  })}*/}\n        {/*/>*/}\n\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} required autoFocus />\n        </InputLabel>\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  padding: 16px;\n\n  background-color: inherit;\n`;\nexport default FormCreateMethod;\n"],"names":["validation","yup","shape","label","max","email","optional","description","Inputs","styled","_templateObject","_taggedTemplateLiteral","_ref","onSubmit","data","parent","props","_objectWithoutProperties","_excluded","_useAppForm","useAppForm","defaultValues","_objectSpread","resolver","yupResolver","reValidateMode","_useAppForm$formState","formState","errors","isValid","register","handleSubmit","clearAfterSave","closeAfterSave","toggleAfterSubmitOption","_jsx","ModalForm","evHandler","formEventWrapper","extraFooter","FormAfterSubmitOptions","toggleOption","children","InputLabel","t","direction","error","required","InputText","placeholder","autoFocus"],"sourceRoot":""}