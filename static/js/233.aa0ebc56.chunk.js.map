{"version":3,"file":"static/js/233.aa0ebc56.chunk.js","mappings":"yUAkBMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,MAAOF,EAAAA,KAAaG,WACpBC,YAAaJ,EAAAA,KAAaK,IAAI,KAAKC,aAqE/BC,EAASC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHAUzB,UA5E8D,SAAHC,GACtDA,EAAHC,IAMK,IAADC,EAAAC,EALJC,EAAIJ,EAAJI,KAEAC,GADIL,EAAJM,KACYN,EAAZK,cACAE,EAAQP,EAARO,SACGC,GAAKC,EAAAA,EAAAA,GAAAT,EAAAU,GAERC,GAOIC,EAAAA,EAAAA,IAA8B,CAChCC,cAAeR,EACfS,UAAUC,EAAAA,EAAAA,GAAY3B,GACtB4B,eAAgB,aAChBC,EAAAN,EAVAO,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QACrBC,EAAQV,EAARU,SACAC,EAAYX,EAAZW,aACAC,EAAcZ,EAAdY,eACAC,EAAcb,EAAda,eACAC,EAAuBd,EAAvBc,wBAgBF,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJpB,GAAK,IACTD,SAAUe,GAZE,SAACO,GACfC,QAAQC,IAAI,8BAA+BF,EAAMtB,GAEjDA,GACEA,EAASsB,EAAM,CACbN,eAAAA,EACAC,eAAAA,GAEN,IAKIJ,QAASA,EACTY,aACEN,EAAAA,EAAAA,KAACO,EAAAA,EAAsB,CACrBT,eAAgBA,EAChBD,eAAgBA,EAChBW,aAAcT,IAEjBU,UAEDC,EAAAA,EAAAA,MAACxC,EAAM,CAAAuC,SAAA,EACLT,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAC9C,OAAO+C,EAAAA,EAAAA,GAAE,QAASC,UAAW,WAAYC,MAAOrB,EAAOf,KAAMqC,UAAQ,EAAAN,UAC/ET,EAAAA,EAAAA,KAACgB,EAAAA,GAAS,CAACC,aAAcvC,GAAOkC,EAAAA,EAAAA,GAAElC,GAAMwC,cAAgBxC,EAAMqC,UAAQ,OAG3D,OAAZpC,QAAY,IAAZA,GAAoB,QAARH,EAAZG,EAAcwC,cAAM,IAAA3C,OAAR,EAAZA,EAAsBD,OACrByB,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAC9C,OAAO+C,EAAAA,EAAAA,GAAE,cAAeC,UAAW,WAAYC,MAAOrB,EAAOf,KAAMqC,UAAQ,EAAAN,UACrFT,EAAAA,EAAAA,KAACgB,EAAAA,GAAS,CAACC,aAA0B,OAAZtC,QAAY,IAAZA,GAAoB,QAARF,EAAZE,EAAcwC,cAAM,IAAA1C,OAAR,EAAZA,EAAsBZ,MAAOkD,UAAQ,OAIlEf,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAC9C,OAAO+C,EAAAA,EAAAA,GAAE,SAAUC,UAAW,WAAYC,MAAOrB,EAAO5B,MAAOC,UAAQ,EAAA2C,UACjFT,EAAAA,EAAAA,KAACgB,EAAAA,IAASd,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACkB,aAAaR,EAAAA,EAAAA,GAAE,gBAAoBjB,EAAS,UAAQ,IAAE7B,UAAQ,EAACuD,WAAS,QAGrFrB,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAC9C,OAAO+C,EAAAA,EAAAA,GAAE,WAAYC,UAAW,WAAYC,MAAOrB,EAAO1B,YAAY0C,UAChFT,EAAAA,EAAAA,KAACsB,EAAAA,GAAepB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACkB,aAAaR,EAAAA,EAAAA,GAAE,kBAAsBjB,EAAS,gBAAc,IAAE4B,UAAW,cAKpG,C","sources":["components/Forms/FormCreateCategory.tsx"],"sourcesContent":["import ModalForm from 'components/ModalForm';\nimport { ICategory, ICategoryFormData } from 'redux/directories/directories.types';\nimport React from 'react';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\nimport t from '../../lang';\nimport { DirectoriesFormProps } from '../Directories/dir.types';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { useAppForm } from '../../hooks';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\n\nexport interface FormCreateCategoryProps\n  extends DirectoriesFormProps<ApiDirType.CATEGORIES_PROD, ICategory, ICategoryFormData> {}\n\nconst validation = yup.object().shape({\n  label: yup.string().required(),\n  description: yup.string().max(250).optional(),\n});\n\nconst FormCreateCategory: React.FC<FormCreateCategoryProps> = ({\n  _id,\n  type,\n  edit,\n  defaultState,\n  onSubmit,\n  ...props\n}) => {\n  const {\n    formState: { errors, isValid },\n    register,\n    handleSubmit,\n    closeAfterSave,\n    clearAfterSave,\n    toggleAfterSubmitOption,\n  } = useAppForm<ICategoryFormData>({\n    defaultValues: defaultState,\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n\n  const onValid = (data: ICategoryFormData) => {\n    console.log('FormCreateCategory on valid', data, onSubmit);\n\n    onSubmit &&\n      onSubmit(data, {\n        closeAfterSave,\n        clearAfterSave,\n      });\n  };\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={handleSubmit(onValid)}\n      isValid={isValid}\n      extraFooter={\n        <FormAfterSubmitOptions\n          clearAfterSave={clearAfterSave}\n          closeAfterSave={closeAfterSave}\n          toggleOption={toggleAfterSubmitOption}\n        />\n      }\n    >\n      <Inputs>\n        <InputLabel label={t('type')} direction={'vertical'} error={errors.type} disabled>\n          <InputText defaultValue={type ? t(type).toUpperCase() : type} disabled />\n        </InputLabel>\n\n        {defaultState?.parent?._id && (\n          <InputLabel label={t('parentItem')} direction={'vertical'} error={errors.type} disabled>\n            <InputText defaultValue={defaultState?.parent?.label} disabled />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <InputLabel label={t('comment')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={t('insertComment')} {...register('description')} maxLength={250} />\n        </InputLabel>\n      </Inputs>\n    </ModalForm>\n  );\n};\n\nconst Inputs = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  padding: 16px;\n\n  background-color: inherit;\n`;\n\nexport default FormCreateCategory;\n"],"names":["validation","yup","shape","label","required","description","max","optional","Inputs","styled","_templateObject","_taggedTemplateLiteral","_ref","_id","_defaultState$parent","_defaultState$parent2","type","defaultState","edit","onSubmit","props","_objectWithoutProperties","_excluded","_useAppForm","useAppForm","defaultValues","resolver","yupResolver","reValidateMode","_useAppForm$formState","formState","errors","isValid","register","handleSubmit","closeAfterSave","clearAfterSave","toggleAfterSubmitOption","_jsx","ModalForm","_objectSpread","data","console","log","extraFooter","FormAfterSubmitOptions","toggleOption","children","_jsxs","InputLabel","t","direction","error","disabled","InputText","defaultValue","toUpperCase","parent","placeholder","autoFocus","TextareaPrimary","maxLength"],"sourceRoot":""}