{"version":3,"file":"static/js/930.b776f132.chunk.js","mappings":"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","sources":["redux/priceManagement/priceManagement.types.ts","hooks/usePriceManagementActionsCreator.hook.ts","components/AppPages/PagePriceManagement.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import { AppResponse, IBase, OnlyUUID } from '../global.types';\nimport { FilterOpt } from '../../components/ModalForm/ModalFilter';\nimport { IProduct } from '../products/products.types';\n\nexport enum PriceListTypeEnum {\n  PURCHASES = 'purchases',\n  SALES = 'sales',\n}\n\nexport type PriceListStatus = 'rejected' | 'approved' | 'pending' | 'error' | 'success' | 'warning' | 'info';\n\nexport type PriceListType = 'purchases' | 'sales';\n\nexport type PriceListFilterOption = FilterOpt<PriceListType>;\n\nexport interface PriceListDto {\n  label: string;\n  status?: PriceListStatus;\n  type?: PriceListType;\n  customerTags?: string[];\n  supplierTags?: string[];\n  timeFrom?: string;\n  timeTo?: string;\n  description?: string;\n  // prices?: OnlyUUID[];\n  // products?: OnlyUUID[];\n}\n\nexport interface IPriceList extends IBase {\n  label: string;\n  status?: PriceListStatus;\n  prices?: IPriceListItem[];\n  products?: Partial<IProduct>[];\n  timeFrom?: string;\n  timeTo?: string;\n  description?: string;\n  type?: PriceListType;\n}\n\nexport interface PriceListItemDto {\n  label?: string;\n  price?: number;\n  cost?: number;\n  discount?: number;\n  markupPercentage?: number;\n  markupAmount?: number;\n  commissionPercentage?: number;\n  commissionAmount?: number;\n  product?: OnlyUUID;\n}\n\nexport interface IPriceListItem extends IBase {\n  label: string;\n  product?: IProduct;\n  list?: IPriceList;\n  price?: number;\n  cost?: number;\n  discount?: number;\n  markupPercentage?: number;\n  markupAmount?: number;\n  commissionPercentage?: number;\n  commissionAmount?: number;\n  timeFrom?: string | number | Date;\n  timeTo?: string | number | Date;\n}\n\nexport interface IPriceListReqData {\n  _id?: string;\n  data: PriceListDto;\n}\n\nexport interface IPriceListItemReqData {\n  _id?: string;\n  data: PriceListItemDto;\n}\n\nexport interface ICreatePriceListItemReqData {\n  list: OnlyUUID;\n  data: PriceListItemDto;\n}\n\nexport interface IAllPriceListsRes extends AppResponse<IPriceList[]> {}\n\nexport interface IPriceListRes extends AppResponse<IPriceList> {}\n\nexport interface IAllPriceListItemsRes extends AppResponse<IPriceListItem[]> {}\n\nexport interface IPriceListItemRes extends AppResponse<IPriceListItem> {}\n","import { useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { PriceManagementService } from './usePriceManagementService.hook';\nimport { useCallback } from 'react';\nimport { TableActionCreator } from '../components/TableList/tableTypes.types';\nimport {\n  IPriceList,\n  IPriceListItem,\n  IPriceListItemReqData,\n  PriceListFilterOption,\n  PriceListTypeEnum,\n} from '../redux/priceManagement/priceManagement.types';\nimport FormCreatePriceList from '../components/Forms/FormCreatePriceList';\nimport { toast } from 'react-toastify';\nimport { omit } from 'lodash';\nimport { ExtractId } from '../utils/dataTransform';\nimport PriceListOverview from '../components/Modals/PriceListOverview';\n\nexport type PriceManagementActionsCreator = TableActionCreator<IPriceList>;\n\nexport const PriceManagementItemTypeFilterOptions: PriceListFilterOption[] = [\n  { label: PriceListTypeEnum.SALES, value: PriceListTypeEnum.SALES },\n  { label: PriceListTypeEnum.PURCHASES, value: PriceListTypeEnum.PURCHASES },\n];\n\nexport const createPriceDataForReq = (input: Required<IPriceListItem>): IPriceListItemReqData => {\n  return {\n    ...ExtractId(input),\n    data: {\n      ...omit(input, ['createdAt', 'updatedAt', 'deletedAt', '_id']),\n      product: ExtractId(input?.product),\n    },\n  };\n};\nconst usePriceManagementActionsCreator = (service: PriceManagementService): PriceManagementActionsCreator => {\n  const modals = useModalProvider();\n\n  // const onSubmitCreateWrapper = useCallback(\n  //   (onCloseModal: () => void) => {\n  //     return (data: ITransactionReqData, options: AfterFormSubmitOptions,) => {\n  //       service.create({\n  //         data,\n  //         onSuccess(d) {\n  //           toast.success(`Сторено транзакцію на суму: ${d.amount}`);\n  //           options?.close && onCloseModal();\n  //         },\n  //       });\n  //     };\n  //   },\n  //   [service]\n  // );\n\n  return useCallback(\n    ctx => [\n      // {\n      //   name: 'editTr',\n      //   title: 'Редагування транзакції',\n      //   icon: 'edit',\n      //   disabled: !ctx.selectedRow?._id,\n      //   type: 'onlyIcon',\n      //   onClick: async () => {\n      //     const tr = state.transactions.find(el => el._id === ctx.selectedRow?._id);\n      //\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Редагування транзакції',\n      //         filterOptions,\n      //         defaultOption: filterOptions.findIndex(el => el.value === tr?.type),\n      //         defaultState: tr,\n      //         fillHeight: true,\n      //         onSubmit: data => {\n      //           service.updateById({\n      //             data,\n      //             onSuccess(d) {},\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      // {\n      //   name: 'copyTr',\n      //   title: 'Копіювання транзакції',\n      //   icon: 'copy',\n      //   type: 'onlyIcon',\n      //   disabled: !ctx.selectedRow?._id,\n      //   onClick: async () => {\n      //     const tr = state.transactions.find(el => el._id === ctx.selectedRow?._id);\n      //\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Копіювання транзакції',\n      //         filterOptions,\n      //         defaultOption: filterOptions.findIndex(el => el.value === tr?.type),\n      //         defaultState: tr,\n      //         fillHeight: true,\n      //         onSubmit: (data, o) => {\n      //           service.create({\n      //             data,\n      //             onSuccess(d) {\n      //               toast.success(`Транзакцію створено`);\n      //               o?.close && modal?.onClose();\n      //             },\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      // {\n      //   name: 'deleteTr',\n      //   title: 'Видалення транзакції',\n      //   icon: 'delete',\n      //   iconSize: '90%',\n      //   type: 'onlyIcon',\n      //   disabled: !ctx.selectedRow?._id,\n      //   onClick: () => {\n      //     service.deleteById({\n      //       data: ctx.selectedRow?._id,\n      //     });\n      //   },\n      // },\n      // { separator: true },\n      // {\n      //   name: 'createIncomeTr',\n      //   title: 'Дохід',\n      //   icon: 'INCOME',\n      //   iconSize: '90%',\n      //   type: 'onlyIconFilled',\n      //   disabled: false,\n      //   onClick: () => {\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Створити',\n      //         filterOptions,\n      //         defaultOption: 0,\n      //         fillHeight: true,\n      //         defaultState: { type: 'INCOME' },\n      //         onSubmit: (data, o) => {\n      //           service.create({\n      //             data,\n      //             onSuccess(d) {\n      //               o?.close && modal?.onClose();\n      //             },\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      // {\n      //   name: 'createTransferTr',\n      //   title: 'Переказ між рахунками',\n      //   icon: 'TRANSFER',\n      //   iconSize: '90%',\n      //   type: 'onlyIconFilled',\n      //   disabled: false,\n      //   onClick: () => {\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Створити нову',\n      //         filterOptions,\n      //         defaultOption: 1,\n      //         fillHeight: true,\n      //         defaultState: { type: 'TRANSFER' },\n      //         onSubmit: (data, o) => {\n      //           service.create({\n      //             data,\n      //             onSuccess(d) {\n      //               o?.close && modal?.onClose();\n      //             },\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      {\n        name: 'openPriceList',\n        title: 'Відкрити',\n        icon: 'openInNew',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: !ctx.selectedRow?._id,\n        onClick: async () => {\n          modals.handleOpenModal({\n            ModalChildren: PriceListOverview,\n            modalChildrenProps: {\n              listId: ctx.selectedRow?._id,\n              getTableSetting: data => ({}),\n              // onSubmit: ({ data: itemOrArr, list }, o) => {\n              //   if (isArray(itemOrArr)) {\n              //     toast.warning('Array of prices passed. Dispatcher warn');\n              //     return;\n              //   }\n              //   service.addItemToList({\n              //     data: { data: createPriceDataForReq(itemOrArr).data, list },\n              //     onSuccess: data => {\n              //       console.log('IPriceListRes');\n              //       o?.closeAfterSave && modal?.onClose();\n              //       toast.success(`Price created`);\n              //     },\n              //   });\n              // },\n            },\n          });\n        },\n      },\n\n      {\n        name: 'editPriceList',\n        title: 'Редагувати',\n        icon: 'edit',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      {\n        name: 'copyPriceList',\n        title: 'Копіювати',\n        icon: 'copy',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      {\n        name: 'archivePriceList',\n        title: 'Архів',\n        icon: 'archive',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      { separator: true },\n      {\n        name: 'createPriceList',\n        title: 'Новий',\n        icon: 'plus',\n        iconSize: '90%',\n        type: 'onlyIconFilled',\n        disabled: false,\n        onClick: async () => {\n          const modal = modals.handleOpenModal({\n            ModalChildren: FormCreatePriceList,\n            modalChildrenProps: {\n              filterOptions: PriceManagementItemTypeFilterOptions,\n              defaultData: { type: 'purchases' },\n              onSubmit: (data, o) => {\n                service.createList({\n                  data,\n                  onSuccess: data => {\n                    o?.onSuccess && o?.onSuccess(data);\n                    o?.closeAfterSave && modal?.onClose();\n                    toast.success(`Created price list: ${data.label}`);\n                  },\n                });\n              },\n            },\n          });\n        },\n      },\n    ],\n\n    [modals, service]\n  );\n};\n\nexport default usePriceManagementActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport { priceListColumns } from 'data';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { usePriceListsSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\nimport usePriceManagementServiceHook from '../../hooks/usePriceManagementService.hook';\nimport usePriceManagementActionsCreatorHook from '../../hooks/usePriceManagementActionsCreator.hook';\nimport { IPriceList } from '../../redux/priceManagement/priceManagement.types';\n\ntype Props = {\n  path: PagePathType;\n};\nconst PagePriceManagement: React.FC<any> = (props: Props) => {\n  const service = usePriceManagementServiceHook();\n  const state = usePriceListsSelector();\n  const { getAll } = service;\n  const actionsCreator = usePriceManagementActionsCreatorHook(service);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IPriceList> => ({\n      tableData: state.lists,\n      tableTitles: priceListColumns,\n      isFilter: false,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, getAll, sortParams, state.lists]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.lists.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n          onSuccess(d) {\n            console.log('PagePriceManagement onSuccess getAll');\n          },\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.lists.length]);\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PagePriceManagement;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["PriceListTypeEnum","PriceManagementItemTypeFilterOptions","label","SALES","value","PURCHASES","service","modals","useModalProvider","useCallback","ctx","_ctx$selectedRow","name","title","icon","iconSize","type","disabled","selectedRow","_id","onClick","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ctx$selectedRow2","wrap","_context","prev","next","handleOpenModal","ModalChildren","PriceListOverview","modalChildrenProps","listId","getTableSetting","data","stop","apply","arguments","separator","_onClick2","_callee2","modal","_context2","FormCreatePriceList","filterOptions","defaultData","onSubmit","o","createList","onSuccess","closeAfterSave","onClose","toast","concat","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","usePriceManagementServiceHook","state","usePriceListsSelector","getAll","actionsCreator","usePriceManagementActionsCreatorHook","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","lists","tableTitles","priceListColumns","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","refresh","query","onLoading","then","handleTableSort","param","sortOrder","dataPath","useEffect","length","d","console","log","_jsx","AppGridPage","path","children","TableList","_objectSpread","css","takeFullPlace","_templateObject2","_templateObject3"],"sourceRoot":""}