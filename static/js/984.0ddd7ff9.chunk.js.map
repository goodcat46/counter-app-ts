{"version":3,"file":"static/js/984.0ddd7ff9.chunk.js","mappings":"kSAgDMA,EAAaC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,iHAW5B,EA9C+F,SAAHC,GAMrF,IALLC,EAAOD,EAAPC,QACAC,EAAKF,EAALE,MACAC,EAAIH,EAAJG,KACAC,EAAGJ,EAAHI,IACAC,EAAQL,EAARK,SAEAC,GAAkCC,EAAAA,EAAAA,UAA8BN,GAAQO,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAjEI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAY9B,OAJAI,EAAAA,EAAAA,YAAU,WACRD,EAAaV,EACf,GAAG,CAACA,KAGFY,EAAAA,EAAAA,MAACjB,EAAU,CAAAkB,SAAA,EACTC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,KAAK,OACLC,SAAS,OACTC,QAAQ,WACRC,OAAUV,EAAYU,EAAAA,GAAAA,WAAoBA,EAAAA,GAAAA,YAC1C,iBAAgBV,EAChBW,QAnBN,WACEV,GAAa,SAAAW,GAEX,OADAjB,EAAS,CAAED,IAAAA,EAAKH,QAASA,GAAWA,GAAWqB,EAAMpB,MAAAA,IAC9CD,IAAqBqB,CAC9B,GACF,KAiBIP,EAAAA,EAAAA,KAAA,QAAAD,SAAOZ,GAASC,MAGtB,EC1BMoB,EAAO1B,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,sSAkBtB,EA5BgD,SAAHC,GAAyC,IAAnCwB,EAAMxB,EAANwB,OAAQnB,EAAQL,EAARK,SAAUoB,EAASzB,EAATyB,UACnE,OACEV,EAAAA,EAAAA,KAACQ,EAAI,CAACC,OAAQA,EAAOV,SAClBW,EAAUC,KAAI,SAACC,EAAMC,GAAG,OACvBb,EAAAA,EAAAA,KAACc,GAAeC,EAAAA,EAAAA,GAAA,CAAuBzB,SAAUA,GAAcsB,GAAzCA,EAAKvB,KAAOwB,EAAqC,KAI/E,E,UCiBA,EA9B6B,WA4B3B,MArBwC,CACtC,CACE1B,MAAO,qBACP6B,KAToB,CACtB,CAAE3B,IAAK,oBAAqBD,KAAM,SAAUD,MAAO,kCACnD,CAAEE,IAAK,oBAAqBD,KAAM,WAAYD,MAAO,8CACrD,CAAEE,IAAK,oBAAqBD,KAAM,UAAWD,MAAO,+CAOlD8B,aAAc,OACdC,SAAUC,GAEZ,CACEhC,MAAO,6CACP6B,MAAMI,EAAAA,EAAAA,MAAoBC,OAC1BJ,aAAc,aACdC,SAAUC,GAEZ,CACEhC,MAAO,yDACP6B,MAAMM,EAAAA,EAAAA,KAAwBC,WAC9BN,aAAc,SACdC,SAAUC,GAKhB,ECvBA,EAP+B,WAC7B,IAAMK,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,MAEd,OAAAZ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAASS,SAAAA,GAAaE,GAAK,IAAEE,mBAAoBC,GACnD,ECoBMC,EAAOhD,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gBACnB+C,EAAAA,IAGJ,EA1ByB,WACvB,IAAAC,EAA6CC,IAArCC,EAAYF,EAAZE,aAAcN,EAAkBI,EAAlBJ,mBAItB,OACE5B,EAAAA,EAAAA,KAAC8B,EAAI,CAAA/B,UACHC,EAAAA,EAAAA,KAACmC,EAAAA,GAAS,CAENC,UAAWC,EAAAA,IAAwBH,EACnCI,YAAaC,EAAAA,GACbC,kBAAmBC,EAAAA,GACnBC,aAAcC,EAAAA,GACdC,QAAQ,EACRC,QAAQ,EACRjB,mBAAAA,KAKV,C","sources":["components/Filter/SelectorContent/SelectsListItem.tsx","components/Filter/SelectorContent/SelectsList.tsx","redux/transactions/useTrFilterSelectors.hook.ts","redux/transactions/useTransactionsServise.hook.ts","components/AppPages/PageTransactions.tsx"],"sourcesContent":["import ButtonIcon from 'components/atoms/ButtonIcon/ButtonIcon';\nimport { iconId } from 'data';\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nexport interface SelectsListItemProps {\n  checked?: boolean;\n  _id: string;\n  label: string;\n  name?: string;\n  onSelect: <T = any | undefined>(item: T) => void;\n}\n\nconst SelectsListItem: React.FC<SelectsListItemProps & React.HTMLAttributes<HTMLDivElement>> = ({\n  checked,\n  label,\n  name,\n  _id,\n  onSelect,\n}) => {\n  const [isChecked, setIsChecked] = useState<boolean | undefined>(checked);\n  function handleSelect() {\n    setIsChecked(prev => {\n      onSelect({ _id, checked: checked ? !checked : !prev, label });\n      return checked ? checked : !prev;\n    });\n  }\n\n  useEffect(() => {\n    setIsChecked(checked);\n  }, [checked]);\n\n  return (\n    <StyledItem>\n      <ButtonIcon\n        size=\"26px\"\n        iconSize=\"100%\"\n        variant=\"onlyIcon\"\n        iconId={!!isChecked ? iconId.checkBoxOn : iconId.checkBoxOff}\n        aria-checked={!!isChecked}\n        onClick={handleSelect}\n      ></ButtonIcon>\n\n      <span>{label || name}</span>\n    </StyledItem>\n  );\n};\n\nconst StyledItem = styled.li`\n  display: flex;\n  align-items: center;\n\n  gap: 8px;\n\n  padding: 0 8px;\n\n  border-radius: 2px;\n`;\n\nexport default SelectsListItem;\n","import React from 'react';\nimport styled from 'styled-components';\nimport SelectsListItem from './SelectsListItem';\n\nexport interface SelectsListProps<T = any> {\n  isOpen: boolean;\n  onSelect: () => void;\n  mapedData: T[];\n}\n\nconst SelectsList: React.FC<SelectsListProps> = ({ isOpen, onSelect, mapedData }) => {\n  return (\n    <List isOpen={isOpen}>\n      {mapedData.map((item, idx) => (\n        <SelectsListItem key={item._id || idx} onSelect={onSelect} {...item} />\n      ))}\n    </List>\n  );\n};\n\nconst List = styled.ul<{ isOpen?: boolean }>`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-auto-rows: min-content;\n\n  padding: 8px 0;\n  gap: 2px;\n\n  width: 100%;\n  /* height: 100%; */\n\n  overflow: auto;\n  @media screen and (max-width: 768px) {\n    max-height: 200px;\n  }\n  /* background-color: #323234; */\n`;\n\nexport default SelectsList;\n","import { FilterSelectorType } from 'components/Filter/Filter';\nimport SelectsList from 'components/Filter/SelectorContent/SelectsList';\nimport { useCategoriesSelector } from 'redux/categories/useCategoriesService.hook';\nimport { useCountsSelector } from 'redux/selectors.store';\n\nconst useTrFilterSelectors = (): FilterSelectorType[] => {\n  const transationTypes = [\n    { _id: 'ds6d5vf6sd5f1v6sd', name: 'INCOME', label: 'ДОХІД' },\n    { _id: 'ds6d5vf6sd6f1v61d', name: 'TRANSFER', label: 'ПЕРЕКАЗ' },\n    { _id: 'ds6d5vf6dd6f1v68d', name: 'EXPENSE', label: 'ВИТРАТИ' },\n  ];\n\n  const selectors: FilterSelectorType[] = [\n    {\n      label: 'Тип',\n      data: transationTypes,\n      selectorName: 'type',\n      ListComp: SelectsList,\n    },\n    {\n      label: 'Рахунки',\n      data: useCountsSelector().counts,\n      selectorName: 'categories',\n      ListComp: SelectsList,\n    },\n    {\n      label: 'Категорії',\n      data: useCategoriesSelector().categories,\n      selectorName: 'counts',\n      ListComp: SelectsList,\n    },\n  ];\n\n  return selectors;\n};\nexport default useTrFilterSelectors;\n","import { useTransactionsSelector } from 'redux/selectors.store';\nimport { useAppDispatch } from 'redux/store.store';\nimport useTrFilterSelectors from './useTrFilterSelectors.hook';\n\nconst useTransactionsServise = () => {\n  const dispatch = useAppDispatch();\n  const state = useTransactionsSelector();\n\n  return { dispatch, ...state, useFilterSelectors: useTrFilterSelectors };\n};\nexport type TransactionsService = typeof useTransactionsServise;\nexport default useTransactionsServise as TransactionsService;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport { transactionsColumns, transactionsMockData, transactionsSearchParams, trTableActions } from 'data';\n\nimport styled from 'styled-components';\nimport useTransactionsServise from 'redux/transactions/useTransactionsServise.hook';\n\nconst PageTransactions = () => {\n  const { transactions, useFilterSelectors } = useTransactionsServise();\n  // const { transactions, isLoading, error } = useTransactionsSelector();\n  // const [selectedTr, setSelectedTr] = useState<any>(null);\n\n  return (\n    <Page>\n      <TableList\n        {...{\n          tableData: transactionsMockData || transactions,\n          tableTitles: transactionsColumns,\n          tableSearchParams: transactionsSearchParams,\n          tableActions: trTableActions,\n          filter: true,\n          search: true,\n          useFilterSelectors,\n        }}\n      />\n    </Page>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageTransactions;\n"],"names":["StyledItem","styled","_templateObject","_taggedTemplateLiteral","_ref","checked","label","name","_id","onSelect","_useState","useState","_useState2","_slicedToArray","isChecked","setIsChecked","useEffect","_jsxs","children","_jsx","ButtonIcon","size","iconSize","variant","iconId","onClick","prev","List","isOpen","mapedData","map","item","idx","SelectsListItem","_objectSpread","data","selectorName","ListComp","SelectsList","useCountsSelector","counts","useCategoriesSelector","categories","dispatch","useAppDispatch","state","useTransactionsSelector","useFilterSelectors","useTrFilterSelectors","Page","takeFullGridArea","_useTransactionsServi","useTransactionsServise","transactions","TableList","tableData","transactionsMockData","tableTitles","transactionsColumns","tableSearchParams","transactionsSearchParams","tableActions","trTableActions","filter","search"],"sourceRoot":""}