{"version":3,"file":"static/js/681.7d101105.chunk.js","mappings":"mUAiDA,EA9CkC,WAOhC,MAAO,EAsCT,E,0OCsJA,EAjJkC,SAAHA,GAAUA,EAAJC,KAA+D,IAADC,EAAxDC,EAAQH,EAARG,SAAgBC,GAAFJ,EAAJK,KAAkBL,EAAZI,cAA4BE,GAALN,EAATO,WAAmBC,EAAAA,EAAAA,GAAAR,EAAAS,IAEzEC,GACbC,EAAAA,EAAAA,MADFD,YAAeA,YAGjBE,GAUIC,EAAAA,EAAAA,IAAyB,CAC3BC,eAAaC,EAAAA,EAAAA,GAAA,CAAIC,SAAU,OAAUZ,GACrCa,eAAgB,aAXHC,EAAMN,EAAnBO,UAAaD,OACbE,EAAUR,EAAVQ,WACAC,EAAQT,EAARS,SACAC,EAAQV,EAARU,SACAC,EAAcX,EAAdW,eACAC,EAAYZ,EAAZY,aACAC,EAAuBb,EAAvBa,wBACAC,EAAcd,EAAdc,eACAC,EAAcf,EAAde,eAsBF,IAAMC,GAA0BC,EAAAA,EAAAA,UAAQ,WAAO,IAADC,EACtCC,EAAgBrB,EAAYsB,EAAAA,GAAAA,iBAE5BC,EAA4E,QAAhEH,EAAGC,EAAcG,MAAK,SAAAC,GAAE,IAAAC,EAAA,OAAID,EAAGE,OAA2B,QAAxBD,EAAKhB,EAAWkB,gBAAQ,IAAAF,OAAA,EAAnBA,EAAqBC,IAAG,WAAC,IAAAP,OAAA,EAA7DA,EAA+DS,aAEpF,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAY7B,EAAAA,EAAAA,GAAA,GACPQ,EACF,WACA,CACEsB,OAAOC,EAAAA,EAAAA,GAAU,YACjBC,aAAaD,EAAAA,EAAAA,GAAU,YACvBE,UAAU,EACVC,QAASlB,GAEX,CAAEmB,UAAW,kBAGhBjB,GAAgBA,EAAakB,OAAS,IACrCR,EAAAA,EAAAA,KAACC,EAAAA,GAAY7B,EAAAA,EAAAA,GAAA,CACX8B,OAAOC,EAAAA,EAAAA,GAAU,eACjBC,aAAaD,EAAAA,EAAAA,GAAU,gBACnBvB,EAAe,cAAe,CAAE0B,QAAShB,QAKvD,GAAG,CAACvB,EAAgC,QAArBR,EAAEkB,EAAWkB,gBAAQ,IAAApC,OAAA,EAAnBA,EAAqBmC,IAAKd,IAErC6B,GAAuBvB,EAAAA,EAAAA,UAC3B,kBACEc,EAAAA,EAAAA,KAACC,EAAAA,GAAY7B,EAAAA,EAAAA,GAAA,GACPQ,EAAe,WAAY,CAC7B0B,QAASvC,EAAYsB,EAAAA,GAAAA,aAAwBqB,QAAO,SAAAlB,GAAE,OAAIA,EAAGmB,OAASC,EAAAA,EAAAA,QAA6B,IACnGR,aAAaD,EAAAA,EAAAA,GAAUS,EAAAA,EAAAA,UACvBV,OAAOC,EAAAA,EAAAA,GAAUS,EAAAA,EAAAA,aAEnB,GAEJ,CAAC7C,EAAaa,IAGViC,GAAqB3B,EAAAA,EAAAA,UACzB,kBACEc,EAAAA,EAAAA,KAACC,EAAAA,GAAY7B,EAAAA,EAAAA,GAAA,GACPQ,EAAe,QAAS,CAE1B0B,QAASvC,EAAYsB,EAAAA,GAAAA,QACrBe,aAAaD,EAAAA,EAAAA,GAAU,eACvBD,OAAOC,EAAAA,EAAAA,GAAU,YAEnB,GAEJ,CAACpC,EAAaa,IAGhB,OACEoB,EAAAA,EAAAA,KAACc,EAAAA,GAAS1C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRZ,SAAUqB,GA1Ed,SAAuBkC,GACrB,IAEMC,GAAmBC,EAAAA,EAAAA,IAAiBF,EAFE,IAI5CvD,GACEA,EACE,CAAEkC,IAAK,GAAIwB,KAAMF,GACjB,CACEjC,eAAAA,EACAC,eAAAA,GAGR,IA6D0C,SAAAkC,GAAI,OAAIC,QAAQC,IAAIF,EAAK,IAC/DG,YAAa,SAAAC,GAAA,IAAGC,EAAKD,EAALC,MAAK,OAAOA,GAAS5C,EAAS,OAAQ4C,EAAM,GACxD5D,GAAK,IACT6D,aACExB,EAAAA,EAAAA,KAACyB,EAAAA,EAAsB,CACrBC,aAAc5C,EACdC,eAAgBA,EAChBC,eAAgBA,IAEnBe,UAEDF,EAAAA,EAAAA,MAAC8B,EAAAA,GAAO,CAACC,UAAW,SAAUC,KAAM,IAAKC,WAAS,EAACC,UAAW,OAAQC,QAAS,OAAQC,SAAU,OAAOlC,SAAA,EACtGC,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAChC,OAAOC,EAAAA,EAAAA,GAAU,SAAUgC,UAAW,WAAYC,MAAO7D,EAAO2B,MAAOG,UAAQ,EAAAN,UACzFC,EAAAA,EAAAA,KAACqC,EAAAA,IAASjE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACgC,aAAaD,EAAAA,EAAAA,GAAU,UAAczB,EAAS,UAAQ,IAAE2B,UAAQ,EAACiC,WAAS,QAGvFtC,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAChC,OAAOC,EAAAA,EAAAA,GAAU,OAAQgC,UAAW,WAAYC,MAAO7D,EAAOgE,IAAIxC,UAC5EC,EAAAA,EAAAA,KAACqC,EAAAA,IAASjE,EAAAA,EAAAA,GAAA,CAACgC,aAAaD,EAAAA,EAAAA,GAAU,QAAYzB,EAAS,MAAO,CAAE8D,IAAK,UAGtEvD,EACAwB,EACAI,GAEDb,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAChC,OAAOC,EAAAA,EAAAA,GAAU,UAAWgC,UAAW,WAAYC,MAAO7D,EAAOkE,OAAQC,UAAQ,EAAA3C,UAC3FC,EAAAA,EAAAA,KAACqC,EAAAA,IAASjE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACgC,aAAaD,EAAAA,EAAAA,GAAU,WAAezB,EAAS,WAAS,IAAEgE,UAAQ,QAG/E1C,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAChC,MAAO,oDAAaiC,UAAW,WAAYC,MAAO7D,EAAOoE,QAAQ5C,UAC3EC,EAAAA,EAAAA,KAACqC,EAAAA,IAASjE,EAAAA,EAAAA,GAAA,CAACgC,YAAa,qDAAiB1B,EAAS,gBAGpDsB,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAChC,MAAO,kFAAkBiC,UAAW,WAAYC,MAAO7D,EAAOqE,mBAAoBF,UAAQ,EAAA3C,UACpGC,EAAAA,EAAAA,KAACqC,EAAAA,IAASjE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACgC,YAAa,mFAAsB1B,EAAS,uBAAqB,IAAEgE,UAAQ,QAGxF1C,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAAChC,OAAOC,EAAAA,EAAAA,GAAU,eAAgBgC,UAAW,WAAYC,MAAO7D,EAAOsE,YAAY9C,UAC5FC,EAAAA,EAAAA,KAAC8C,EAAAA,GAAe1E,EAAAA,EAAAA,GAAA,CAACgC,aAAaD,EAAAA,EAAAA,GAAU,gBAAoBzB,EAAS,wBAK/E,E,mBClLaqE,EAA0D,CACrE,CAAE7C,MAAO,QAASqB,MAAO,SACzB,CAAErB,MAAO,UAAWqB,MAAO,YAsJ7B,EAnJiC,WAC/B,IAAMyB,GAAUC,EAAAA,EAAAA,KACVC,GAAQC,EAAAA,EAAAA,MACRC,GAASC,EAAAA,EAAAA,MAgBf,OAAOC,EAAAA,EAAAA,cACL,SAAAC,GAAG,IAAAC,EAAAC,EAAAC,EAAA,MAAI,CACL,CACEC,KAAM,gBACNC,MAAO,oGACPC,KAAM,YACNnB,WAA0B,QAAhBc,EAACD,EAAIO,mBAAW,IAAAN,GAAfA,EAAiB9D,KAC5BiB,KAAM,WACNoD,QAAS,WACPX,EAAOY,gBAAgB,CACrBC,cAAeC,EAAAA,EACfC,mBAAoB,CAClBP,MAAO,oGACPQ,QAASlB,EAAMmB,SAAS9E,MAAK,SAAAC,GAAE,IAAA8E,EAAA,OAAI9E,EAAGE,OAAuB,QAApB4E,EAAKf,EAAIO,mBAAW,IAAAQ,OAAA,EAAfA,EAAiB5E,IAAG,MAWxE,GAEF,CACEiE,KAAM,cACNC,MAAO,6CACPC,KAAM,OACNU,SAAU,MACV5D,KAAM,WACN+B,WAAc,OAAHa,QAAG,IAAHA,GAAgB,QAAbE,EAAHF,EAAKO,mBAAW,IAAAL,GAAhBA,EAAkB/D,KAC7BqE,QAAQ,WAAD,IAAAS,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACDJ,EAAQzB,EAAOY,gBAAgB,CACnCC,cAAeiB,EACff,mBAAoB,CAClBP,MAAO,yDACPuB,cAAepC,EACftF,cAAc2H,EAAAA,EAAAA,MACZlC,EAAMmB,SAAS9E,MAAK,SAAA8F,GAAC,IAAAC,EAAA,OAAID,EAAE3F,OAAW,OAAH6D,QAAG,IAAHA,GAAgB,QAAb+B,EAAH/B,EAAKO,mBAAW,IAAAwB,OAAb,EAAHA,EAAkB5F,IAAG,IACxD,CAAC,MAAO,YAAa,cAEvBlC,SAAU,SAAC0D,EAAMqE,GACfvC,EAAQwC,OAAO,CACbtE,KAAAA,EACAuE,UAAS,SAACC,IACP,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGxG,kBAAuB,OAAL8F,QAAK,IAALA,GAAAA,EAAOc,UAC9B,GAEJ,EACAC,YAAY,KAEb,KAAD,mBAAAb,EAAAc,OAAA,GAAAjB,EAAA,KACH,yBAAAJ,EAAAsB,MAAA,KAAAC,UAAA,EArBO,IAuBV,CACEpC,KAAM,cACNC,MAAO,yDACPC,KAAM,OACNU,SAAU,MACV5D,KAAM,WACN+B,WAAc,OAAHa,QAAG,IAAHA,GAAgB,QAAbG,EAAHH,EAAKO,mBAAW,IAAAJ,GAAhBA,EAAkBhE,KAC7BqE,QAAQ,WAAD,IAAAiC,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAsB,IAAA,IAAApB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACDJ,EAAQzB,EAAOY,gBAAgB,CACnCC,cAAeiB,EACff,mBAAoB,CAClBP,MAAO,6CACPuB,cAAepC,EACftF,cAAc2H,EAAAA,EAAAA,MACZlC,EAAMmB,SAAS9E,MAAK,SAAA8F,GAAC,IAAAc,EAAA,OAAId,EAAE3F,OAAW,OAAH6D,QAAG,IAAHA,GAAgB,QAAb4C,EAAH5C,EAAKO,mBAAW,IAAAqC,OAAb,EAAHA,EAAkBzG,IAAG,IACxD,CAAC,YAAa,cAEhBlC,SAAU,SAAC0D,EAAMqE,GACfvC,EAAQwC,OAAO,CACbtE,KAAAA,EACAuE,UAAS,SAACC,IACP,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGxG,kBAAuB,OAAL8F,QAAK,IAALA,GAAAA,EAAOc,UAC9B,GAEJ,EACAC,YAAY,KAEb,KAAD,mBAAAM,EAAAL,OAAA,GAAAI,EAAA,KACH,yBAAAD,EAAAF,MAAA,KAAAC,UAAA,EArBO,IAuBV,CACEpC,KAAM,iBACNC,MAAO,iCACPC,KAAM,UACNU,SAAU,MACV5D,KAAM,WACN+B,UAAU,GAEZ,CAAE0D,WAAW,GACb,CACEzC,KAAM,gBACNC,MAAO,iCACPC,KAAM,OACNU,SAAU,MACV5D,KAAM,iBACN+B,UAAU,EACVqB,QAAQ,WAAD,IAAAsC,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAA2B,IAAA,IAAAzB,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACDJ,EAAQzB,EAAOY,gBAAgB,CACnCC,cAAeiB,EACff,mBAAoB,CAClBP,MAAO,mDACPuB,cAAepC,EACftF,aAAc,CAAEkD,KAAM,SACtBnD,SAAU,SAAC0D,EAAMqE,GACfvC,EAAQwC,OAAO,CACbtE,KAAAA,EACAuE,UAAS,SAACC,IACP,OAADH,QAAC,IAADA,OAAC,EAADA,EAAGxG,kBAAuB,OAAL8F,QAAK,IAALA,GAAAA,EAAOc,UAC9B,GAEJ,EACAC,YAAY,KAEb,KAAD,mBAAAW,EAAAV,OAAA,GAAAS,EAAA,KACH,yBAAAD,EAAAP,MAAA,KAAAC,UAAA,EAlBO,IAoBX,GAED,CAAC3C,EAAQJ,EAASE,EAAMmB,UAE5B,EC9IamC,EAA2B,WACtC,IAAMxD,GAAUC,EAAAA,EAAAA,KACVC,GAAQC,EAAAA,EAAAA,MACNsD,EAAWzD,EAAXyD,OACFC,EAAkBC,IAClBC,EAAiBC,IACvBC,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAoCL,EAAAA,EAAAA,YAAuBM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAwCT,EAAAA,EAAAA,YAAgCU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjEE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,GAAc1I,EAAAA,EAAAA,UAClB,iBAAsC,CACpC2I,UAAW3E,EAAMmB,SACjByD,YAAaC,EAAAA,GACbC,gBAAiBC,EAAAA,GAAAA,QAAgC,SAAAzI,GAAE,OAAIA,EAAG0I,IAAI,IAC9DxB,gBAAAA,EACAyB,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,YAAY,EACZ1B,eAAAA,EACA2B,eAAgB,SAAAb,GACdC,EAAgBD,GAChBjB,EAAO,CAAEvF,KAAM,CAAEsH,SAAS,EAAMC,MAAO,CAAEf,aAAAA,EAAcJ,WAAAA,IAAgBoB,UAAWvB,IAAgBwB,MACpG,EACAC,gBAAiB,SAACC,EAAOC,GACvBvB,EAAc,CAAEwB,SAAUF,EAAME,SAAUD,UAAAA,IAC1CrC,EAAO,CACLvF,KAAM,CAAEsH,SAAS,EAAMC,MAAO,CAAEnB,WAAY,CAAEyB,SAAUF,EAAME,SAAUD,UAAAA,GAAapB,aAAAA,IACrFgB,UAAWvB,IACVwB,MACL,EACD,GACD,CAAC/B,EAAgBc,EAAchB,EAAiBD,EAAQa,EAAYpE,EAAMmB,WAkB5E,OAfA2E,EAAAA,EAAAA,YAAU,WACJ1B,GAAcI,GAIbJ,GAAeI,GACY,IAA1BxE,EAAMmB,SAAS7D,QACjBiG,EAAO,CACLvF,KAAM,CAAEsH,SAAS,GACjBE,UAAWvB,GAInB,GAAG,CAACO,EAAcjB,EAAQS,EAAWI,EAAYpE,EAAMmB,SAAS7D,OAAQoH,IAEjE,CACLA,YAAAA,EACAV,UAAAA,EACAI,WAAAA,EACAI,aAAAA,EAEJ,EA2DMuB,EAAOC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gBACnBC,EAAAA,IAGJ,EA9DoC,SAAC1L,GACnC,IAAQ8I,GAAWxD,EAAAA,EAAAA,KAAXwD,OACFvD,GAAQC,EAAAA,EAAAA,MACRuD,EAAkBC,IAClBC,EAAiBC,IACvByC,GAAkCvC,EAAAA,EAAAA,WAAS,GAAMwC,GAAAtC,EAAAA,EAAAA,GAAAqC,EAAA,GAA1CpC,EAASqC,EAAA,GAAEpC,EAAYoC,EAAA,GAC9BC,GAAoCzC,EAAAA,EAAAA,YAAuB0C,GAAAxC,EAAAA,EAAAA,GAAAuC,EAAA,GAApDlC,EAAUmC,EAAA,GAAElC,EAAakC,EAAA,GAChCC,GAAwC3C,EAAAA,EAAAA,YAAgC4C,GAAA1C,EAAAA,EAAAA,GAAAyC,EAAA,GAAjEhC,EAAYiC,EAAA,GAAEhC,EAAegC,EAAA,GAE9B/B,GAAc1I,EAAAA,EAAAA,UAClB,iBAAsC,CACpC2I,UAAW3E,EAAMmB,SACjByD,YAAaC,EAAAA,GACbC,gBAAiBC,EAAAA,GAAAA,QAAgC,SAAAzI,GAAE,OAAIA,EAAG0I,IAAI,IAC9DxB,gBAAAA,EACAyB,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,YAAY,EACZ1B,eAAAA,EACA2B,eAAgB,SAAAb,GACdC,EAAgBD,GAChBjB,EAAO,CAAEvF,KAAM,CAAEsH,SAAS,EAAMC,MAAO,CAAEf,aAAAA,EAAcJ,WAAAA,IAAgBoB,UAAWvB,IAAgBwB,MACpG,EACAC,gBAAiB,SAACC,EAAOC,GACvBvB,EAAc,CAAEwB,SAAUF,EAAME,SAAUD,UAAAA,IAC1CrC,EAAO,CACLvF,KAAM,CAAEsH,SAAS,EAAMC,MAAO,CAAEnB,WAAY,CAAEyB,SAAUF,EAAME,SAAUD,UAAAA,GAAapB,aAAAA,IACrFgB,UAAWvB,IACVwB,MACL,EACD,GACD,CAAC/B,EAAgBc,EAAchB,EAAiBD,EAAQa,EAAYpE,EAAMmB,WAiB5E,OAdA2E,EAAAA,EAAAA,YAAU,WACJ1B,GAAcI,GAIbJ,GAAeI,GACY,IAA1BxE,EAAMmB,SAAS7D,QACjBiG,EAAO,CACLvF,KAAM,CAAEsH,SAAS,GACjBE,UAAWvB,GAInB,GAAG,CAACO,EAAcjB,EAAQa,EAAYpE,EAAMmB,SAAS7D,UAEnDR,EAAAA,EAAAA,KAAC4J,EAAAA,QAAW,CAACC,KAAMlM,EAAMkM,KAAK9J,UAC5BC,EAAAA,EAAAA,KAACiJ,EAAI,CAAAlJ,UACHC,EAAAA,EAAAA,KAAC8J,EAAAA,IAAS1L,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKwJ,GAAW,IAAEV,UAAWA,QAI/C,C,6GCpIamC,GAAmBU,EAAAA,EAAAA,IAAGZ,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mDAItBY,GAAgBD,EAAAA,EAAAA,IAAGE,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,4CAIVW,EAAAA,EAAAA,IAAGG,IAAAA,GAAAd,EAAAA,EAAAA,GAAA,uC","sources":["redux/products/useStorageFilterSelectors.hook.ts","components/Forms/FormCreateProduct.tsx","hooks/useStorageActionsCreator.hook.ts","components/AppPages/PageProducts.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { IProduct } from './products.types';\n\nconst useStorageFilterSelectors = (): FilterSelectorType<keyof IProduct>[] => {\n  // const transactionTypes = [\n  //   { _id: 'ds6d5vf6sd5f1v6sd', name: 'INCOME', label: 'ДОХІД' },\n  //   { _id: 'ds6d5vf6sd6f1v61d', name: 'TRANSFER', label: 'ПЕРЕКАЗ' },\n  //   { _id: 'ds6d5vf6dd6f1v68d', name: 'EXPENSE', label: 'ВИТРАТИ' },\n  // ];\n\n  return [\n    // {\n    //   label: 'Рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'category',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useStorageFilterSelectors;\n","import * as React from 'react';\nimport { useMemo } from 'react';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\nimport CustomSelect from '../atoms/Inputs/CustomSelect';\nimport { useAppSelector } from '../../redux/store.store';\nimport FlexBox from '../atoms/FlexBox';\nimport translate from '../../lang';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\nimport { useAppForm } from '../../hooks';\nimport { IStorageItem, IStorageItemReqData, StorageItemFilterOption } from '../../redux/products/products.types';\nimport { createDataForReq } from '../../utils/dataTransform';\nimport { ContractorsTypesEnum } from '../../redux/contractors/contractors.types';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { UseAppFormAfterSubmitOptions } from '../../hooks/useAppForm.hook';\n\nexport interface AfterSubmitFormOptions {\n  close?: boolean;\n  clear?: boolean;\n}\n\nexport interface FormProps extends Omit<ModalFormProps, 'onSubmit'> {\n  edit?: boolean;\n  copy?: boolean;\n  id?: string;\n  onSubmit?: (data: IStorageItemReqData, options?: UseAppFormAfterSubmitOptions) => void;\n  filterOptions?: StorageItemFilterOption[];\n  defaultState?: Partial<IStorageItem>;\n  addInputs?: boolean;\n}\n\n// const optionalSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .nullable()\n//   .optional();\n// const requiredSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .required();\n//\n// const getValidation = (type: TransactionType) =>\n//   yup.object().shape({\n//     category: requiredSelectItem,\n//   });\nconst Form: React.FC<FormProps> = ({ edit, onSubmit, copy, defaultState, addInputs, ...props }) => {\n  const {\n    directories: { directories },\n  } = useAppSelector();\n\n  const {\n    formState: { errors },\n    formValues,\n    register,\n    setValue,\n    registerSelect,\n    handleSubmit,\n    toggleAfterSubmitOption,\n    closeAfterSave,\n    clearAfterSave,\n  } = useAppForm<IStorageItem>({\n    defaultValues: { currency: 'UAH', ...defaultState },\n    reValidateMode: 'onSubmit',\n  });\n\n  // TODO eventDate: formatDateForInputValue(defaultState?.eventDate)\n  function onValidSubmit(submitData: IStorageItem) {\n    const omitPathArr: (keyof IStorageItem)[] = [];\n\n    const productForSubmit = createDataForReq(submitData, omitPathArr);\n\n    onSubmit &&\n      onSubmit(\n        { _id: '', data: productForSubmit },\n        {\n          closeAfterSave,\n          clearAfterSave,\n        }\n      );\n  }\n\n  const renderCategoriesSelects = useMemo(() => {\n    const parentOptions = directories[ApiDirType.CATEGORIES_PROD];\n\n    const childOptions = parentOptions.find(el => el._id === formValues.category?._id)?.childrenList;\n\n    return (\n      <>\n        <CustomSelect\n          {...registerSelect(\n            'category',\n            {\n              label: translate('category'),\n              placeholder: translate('category'),\n              required: true,\n              options: parentOptions,\n            },\n            { childName: 'subCategory' }\n          )}\n        />\n        {childOptions && childOptions.length > 0 && (\n          <CustomSelect\n            label={translate('subCategory')}\n            placeholder={translate('subCategory')}\n            {...registerSelect('subCategory', { options: childOptions })}\n          />\n        )}\n      </>\n    );\n  }, [directories, formValues.category?._id, registerSelect]);\n\n  const renderSupplierSelect = useMemo(\n    () => (\n      <CustomSelect\n        {...registerSelect('supplier', {\n          options: directories[ApiDirType.CONTRACTORS].filter(el => el.type === ContractorsTypesEnum.SUPPLIER),\n          placeholder: translate(ContractorsTypesEnum.SUPPLIER),\n          label: translate(ContractorsTypesEnum.SUPPLIER),\n        })}\n      />\n    ),\n    [directories, registerSelect]\n  );\n\n  const renderBrandsSelect = useMemo(\n    () => (\n      <CustomSelect\n        {...registerSelect('brand', {\n          // options: directories[ApiDirType.BRANDS].filter(el => el?.parent?._id === formValues?.contractor?._id),\n          options: directories[ApiDirType.BRANDS],\n          placeholder: translate('selectBrand'),\n          label: translate('brand'),\n        })}\n      />\n    ),\n    [directories, registerSelect]\n  );\n\n  return (\n    <ModalForm\n      onSubmit={handleSubmit(onValidSubmit, data => console.log(data))}\n      onOptSelect={({ value }) => value && setValue('type', value)}\n      {...props}\n      extraFooter={\n        <FormAfterSubmitOptions\n          toggleOption={toggleAfterSubmitOption}\n          closeAfterSave={closeAfterSave}\n          clearAfterSave={clearAfterSave}\n        />\n      }\n    >\n      <FlexBox className={'inputs'} flex={'1'} fillWidth maxHeight={'100%'} padding={'12px'} overflow={'auto'}>\n        <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <InputLabel label={translate('sku')} direction={'vertical'} error={errors.sku}>\n          <InputText placeholder={translate('sku')} {...register('sku', { max: 120 })} />\n        </InputLabel>\n\n        {renderCategoriesSelects}\n        {renderSupplierSelect}\n        {renderBrandsSelect}\n\n        <InputLabel label={translate('status')} direction={'vertical'} error={errors.status} disabled>\n          <InputText placeholder={translate('status')} {...register('status')} disabled />\n        </InputLabel>\n\n        <InputLabel label={'Штрих-код'} direction={'vertical'} error={errors.barCode}>\n          <InputText placeholder={'Штрих-код'} {...register('barCode')} />\n        </InputLabel>\n\n        <InputLabel label={'Одиниці виміру'} direction={'vertical'} error={errors.unitsOfMeasurement} disabled>\n          <InputText placeholder={'Одиниці виміру'} {...register('unitsOfMeasurement')} disabled />\n        </InputLabel>\n\n        <InputLabel label={translate('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={translate('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\n// const GridWrapper = styled.div<{ gridTemplateColumns?: string }>`\n//   display: grid;\n//   grid-template-columns: ${({ gridTemplateColumns }) => gridTemplateColumns || '1fr 120px'};\n//   gap: 12px;\n// `;\n\nexport default Form;\n","import { useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport useStorageServiceHook from './useStorageService.hook';\nimport { useCallback } from 'react';\nimport { TableActionCreator } from '../components/TableList/tableTypes.types';\nimport { IStorageItem, StorageItemFilterOption } from '../redux/products/products.types';\nimport { useProductsSelector } from '../redux/selectors.store';\nimport ProductForm from '../components/Forms/FormCreateProduct';\nimport ProductOverview from '../components/Modals/ProductOverview';\nimport { omit } from 'lodash';\n\nexport type StorageActionsCreator = TableActionCreator<IStorageItem>;\n\nexport const StorageItemTypeFilterOptions: StorageItemFilterOption[] = [\n  { label: 'GOODS', value: 'GOODS' },\n  { label: 'SERVICE', value: 'SERVICE' },\n];\n\nconst useStorageActionsCreator = (): StorageActionsCreator => {\n  const service = useStorageServiceHook();\n  const state = useProductsSelector();\n  const modals = useModalProvider();\n  // const onSubmitCreateWrapper = useCallback(\n  //   (onCloseModal: () => void) => {\n  //     return (data: ITransactionReqData, options: AfterFormSubmitOptions,) => {\n  //       service.create({\n  //         data,\n  //         onSuccess(d) {\n  //           toast.success(`Сторено транзакцію на суму: ${d.amount}`);\n  //           options?.close && onCloseModal();\n  //         },\n  //       });\n  //     };\n  //   },\n  //   [service]\n  // );\n\n  return useCallback(\n    ctx => [\n      {\n        name: 'reviewProduct',\n        title: 'Перегляд продукту',\n        icon: 'openInNew',\n        disabled: !ctx.selectedRow?._id,\n        type: 'onlyIcon',\n        onClick: () => {\n          modals.handleOpenModal({\n            ModalChildren: ProductOverview,\n            modalChildrenProps: {\n              title: 'Перегляд продукту',\n              product: state.products.find(el => el._id === ctx.selectedRow?._id),\n              // filterOptions: StorageItemTypeFilterOptions,\n              // defaultOption: StorageItemTypeFilterOptions.findIndex(el => el.value === product?.type),\n              // onSubmit: data => {\n              //   service.updateById({\n              //     data,\n              //     onSuccess(d) {},\n              //   });\n              // },\n            },\n          });\n        },\n      },\n      {\n        name: 'editProduct',\n        title: 'Змінити',\n        icon: 'edit',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: async () => {\n          const modal = modals.handleOpenModal({\n            ModalChildren: ProductForm,\n            modalChildrenProps: {\n              title: 'Копіювати',\n              filterOptions: StorageItemTypeFilterOptions,\n              defaultState: omit(\n                state.products.find(p => p._id === ctx?.selectedRow?._id),\n                ['_id', 'createdAt', 'updatedAt']\n              ),\n              onSubmit: (data, o) => {\n                service.create({\n                  data,\n                  onSuccess(d) {\n                    o?.closeAfterSave && modal?.onClose();\n                  },\n                });\n              },\n              fillHeight: true,\n            },\n          });\n        },\n      },\n      {\n        name: 'copyProduct',\n        title: 'Копіювати',\n        icon: 'copy',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: async () => {\n          const modal = modals.handleOpenModal({\n            ModalChildren: ProductForm,\n            modalChildrenProps: {\n              title: 'Змінити',\n              filterOptions: StorageItemTypeFilterOptions,\n              defaultState: omit(\n                state.products.find(p => p._id === ctx?.selectedRow?._id),\n                ['createdAt', 'updatedAt']\n              ),\n              onSubmit: (data, o) => {\n                service.create({\n                  data,\n                  onSuccess(d) {\n                    o?.closeAfterSave && modal?.onClose();\n                  },\n                });\n              },\n              fillHeight: true,\n            },\n          });\n        },\n      },\n      {\n        name: 'archiveProduct',\n        title: 'Архів',\n        icon: 'archive',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      { separator: true },\n      {\n        name: 'createProduct',\n        title: 'Новий',\n        icon: 'plus',\n        iconSize: '90%',\n        type: 'onlyIconFilled',\n        disabled: false,\n        onClick: async () => {\n          const modal = modals.handleOpenModal({\n            ModalChildren: ProductForm,\n            modalChildrenProps: {\n              title: 'Створити',\n              filterOptions: StorageItemTypeFilterOptions,\n              defaultState: { type: 'GOODS' },\n              onSubmit: (data, o) => {\n                service.create({\n                  data,\n                  onSuccess(d) {\n                    o?.closeAfterSave && modal?.onClose();\n                  },\n                });\n              },\n              fillHeight: true,\n            },\n          });\n        },\n      },\n    ],\n\n    [modals, service, state.products]\n  );\n};\n\nexport default useStorageActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport { productsColumns, transactionsSearchParams } from 'data';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useProductsSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { IStorageItem } from '../../redux/products/products.types';\nimport useStorageServiceHook from '../../hooks/useStorageService.hook';\nimport { PagePathType } from '../../data/pages.data';\nimport useProductsFilterSelectorsHook from '../../redux/products/useStorageFilterSelectors.hook';\nimport useStorageActionsCreator from '../../hooks/useStorageActionsCreator.hook';\n\ntype Props = {\n  path: PagePathType;\n};\n\nexport const useProductsTableSettings = () => {\n  const service = useStorageServiceHook();\n  const state = useProductsSelector();\n  const { getAll } = service;\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useStorageActionsCreator();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IStorageItem> => ({\n      tableData: state.products,\n      tableTitles: productsColumns,\n      tableSortParams: transactionsSearchParams.filter(el => el.sort),\n      filterSelectors,\n      isFilter: true,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, filterSelectors, getAll, sortParams, state.products]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.products.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, getAll, isLoading, sortParams, state.products.length, tableConfig]);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    filterParams,\n  };\n};\nconst PageProducts: React.FC<any> = (props: Props) => {\n  const { getAll } = useStorageServiceHook();\n  const state = useProductsSelector();\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useStorageActionsCreator();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IStorageItem> => ({\n      tableData: state.products,\n      tableTitles: productsColumns,\n      tableSortParams: transactionsSearchParams.filter(el => el.sort),\n      filterSelectors,\n      isFilter: true,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, filterSelectors, getAll, sortParams, state.products]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.products.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.products.length]);\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageProducts;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["_ref","edit","_formValues$category2","onSubmit","defaultState","copy","props","addInputs","_objectWithoutProperties","_excluded","directories","useAppSelector","_useAppForm","useAppForm","defaultValues","_objectSpread","currency","reValidateMode","errors","formState","formValues","register","setValue","registerSelect","handleSubmit","toggleAfterSubmitOption","closeAfterSave","clearAfterSave","renderCategoriesSelects","useMemo","_parentOptions$find","parentOptions","ApiDirType","childOptions","find","el","_formValues$category","_id","category","childrenList","_jsxs","_Fragment","children","_jsx","CustomSelect","label","translate","placeholder","required","options","childName","length","renderSupplierSelect","filter","type","ContractorsTypesEnum","renderBrandsSelect","ModalForm","submitData","productForSubmit","createDataForReq","data","console","log","onOptSelect","_ref2","value","extraFooter","FormAfterSubmitOptions","toggleOption","FlexBox","className","flex","fillWidth","maxHeight","padding","overflow","InputLabel","direction","error","InputText","autoFocus","sku","max","status","disabled","barCode","unitsOfMeasurement","description","TextareaPrimary","StorageItemTypeFilterOptions","service","useStorageServiceHook","state","useProductsSelector","modals","useModalProvider","useCallback","ctx","_ctx$selectedRow","_ctx$selectedRow3","_ctx$selectedRow5","name","title","icon","selectedRow","onClick","handleOpenModal","ModalChildren","ProductOverview","modalChildrenProps","product","products","_ctx$selectedRow2","iconSize","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","modal","wrap","_context","prev","next","ProductForm","filterOptions","omit","p","_ctx$selectedRow4","o","create","onSuccess","d","onClose","fillHeight","stop","apply","arguments","_onClick2","_callee2","_context2","_ctx$selectedRow6","separator","_onClick3","_callee3","_context3","useProductsTableSettings","getAll","filterSelectors","useProductsFilterSelectorsHook","actionsCreator","useStorageActionsCreator","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","tableData","tableTitles","productsColumns","tableSortParams","transactionsSearchParams","sort","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","refresh","query","onLoading","then","handleTableSort","param","sortOrder","dataPath","useEffect","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","AppGridPage","path","TableList","css","takeFullPlace","_templateObject2","_templateObject3"],"sourceRoot":""}