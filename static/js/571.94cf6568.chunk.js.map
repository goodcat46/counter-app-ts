{"version":3,"file":"static/js/571.94cf6568.chunk.js","mappings":"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","sources":["hooks/usePriceManagementActionsCreator.hook.ts","components/AppPages/PagePriceManagement.tsx","components/AppPages/pagesStyles.tsx","components/Forms/FormCreatePriceList.tsx"],"sourcesContent":["import { useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { PriceManagementService } from './usePriceManagementService.hook';\nimport { useCallback } from 'react';\nimport { TableActionCreator } from '../components/TableList/tableTypes.types';\nimport {\n  IPriceList,\n  IPriceListItem,\n  IPriceListItemReqData,\n  PriceListFilterOption,\n  PriceListTypeEnum,\n} from '../redux/priceManagement/priceManagement.types';\nimport FormCreatePriceList from '../components/Forms/FormCreatePriceList';\nimport { toast } from 'react-toastify';\nimport { omit } from 'lodash';\nimport { ExtractId } from '../utils/dataTransform';\nimport PriceListOverview from '../components/Modals/Overviews/PriceListOverview';\n\nexport type PriceManagementActionsCreator = TableActionCreator<IPriceList>;\n\nexport const PriceManagementItemTypeFilterOptions: PriceListFilterOption[] = [\n  { label: PriceListTypeEnum.SALES, value: PriceListTypeEnum.SALES },\n  { label: PriceListTypeEnum.PURCHASES, value: PriceListTypeEnum.PURCHASES },\n];\n\nexport const createPriceDataForReq = (input: Required<IPriceListItem>): IPriceListItemReqData => {\n  return {\n    ...ExtractId(input),\n    data: {\n      ...omit(input, ['createdAt', 'updatedAt', 'deletedAt', '_id']),\n      product: ExtractId(input?.product),\n    },\n  };\n};\nconst usePriceManagementActionsCreator = (service: PriceManagementService): PriceManagementActionsCreator => {\n  const modals = useModalProvider();\n\n  // const onSubmitCreateWrapper = useCallback(\n  //   (onCloseModal: () => void) => {\n  //     return (data: ITransactionReqData, options: AfterFormSubmitOptions,) => {\n  //       service.create({\n  //         data,\n  //         onSuccess(d) {\n  //           toast.success(`Сторено транзакцію на суму: ${d.amount}`);\n  //           options?.close && onCloseModal();\n  //         },\n  //       });\n  //     };\n  //   },\n  //   [service]\n  // );\n\n  return useCallback(\n    ctx => [\n      // {\n      //   name: 'editTr',\n      //   title: 'Редагування транзакції',\n      //   icon: 'edit',\n      //   disabled: !ctx.selectedRow?._id,\n      //   type: 'onlyIcon',\n      //   onClick: async () => {\n      //     const tr = state.transactions.find(el => el._id === ctx.selectedRow?._id);\n      //\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Редагування транзакції',\n      //         filterOptions,\n      //         defaultOption: filterOptions.findIndex(el => el.value === tr?.type),\n      //         defaultState: tr,\n      //         fillHeight: true,\n      //         onSubmit: data => {\n      //           service.updateById({\n      //             data,\n      //             onSuccess(d) {},\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      // {\n      //   name: 'copyTr',\n      //   title: 'Копіювання транзакції',\n      //   icon: 'copy',\n      //   type: 'onlyIcon',\n      //   disabled: !ctx.selectedRow?._id,\n      //   onClick: async () => {\n      //     const tr = state.transactions.find(el => el._id === ctx.selectedRow?._id);\n      //\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Копіювання транзакції',\n      //         filterOptions,\n      //         defaultOption: filterOptions.findIndex(el => el.value === tr?.type),\n      //         defaultState: tr,\n      //         fillHeight: true,\n      //         onSubmit: (data, o) => {\n      //           service.create({\n      //             data,\n      //             onSuccess(d) {\n      //               toast.success(`Транзакцію створено`);\n      //               o?.close && modal?.onClose();\n      //             },\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      // {\n      //   name: 'deleteTr',\n      //   title: 'Видалення транзакції',\n      //   icon: 'delete',\n      //   iconSize: '90%',\n      //   type: 'onlyIcon',\n      //   disabled: !ctx.selectedRow?._id,\n      //   onClick: () => {\n      //     service.deleteById({\n      //       data: ctx.selectedRow?._id,\n      //     });\n      //   },\n      // },\n      // { separator: true },\n      // {\n      //   name: 'createIncomeTr',\n      //   title: 'Дохід',\n      //   icon: 'INCOME',\n      //   iconSize: '90%',\n      //   type: 'onlyIconFilled',\n      //   disabled: false,\n      //   onClick: () => {\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Створити',\n      //         filterOptions,\n      //         defaultOption: 0,\n      //         fillHeight: true,\n      //         defaultState: { type: 'INCOME' },\n      //         onSubmit: (data, o) => {\n      //           service.create({\n      //             data,\n      //             onSuccess(d) {\n      //               o?.close && modal?.onClose();\n      //             },\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      // {\n      //   name: 'createTransferTr',\n      //   title: 'Переказ між рахунками',\n      //   icon: 'TRANSFER',\n      //   iconSize: '90%',\n      //   type: 'onlyIconFilled',\n      //   disabled: false,\n      //   onClick: () => {\n      //     const modal = modals.handleOpenModal({\n      //       ModalChildren: TransactionForm,\n      //       modalChildrenProps: {\n      //         title: 'Створити нову',\n      //         filterOptions,\n      //         defaultOption: 1,\n      //         fillHeight: true,\n      //         defaultState: { type: 'TRANSFER' },\n      //         onSubmit: (data, o) => {\n      //           service.create({\n      //             data,\n      //             onSuccess(d) {\n      //               o?.close && modal?.onClose();\n      //             },\n      //           });\n      //         },\n      //       },\n      //     });\n      //   },\n      // },\n      {\n        name: 'openPriceList',\n        title: 'Відкрити',\n        icon: 'openInNew',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: !ctx.selectedRow?._id,\n        onClick: async () => {\n          modals.handleOpenModal({\n            ModalChildren: PriceListOverview,\n            modalChildrenProps: {\n              listId: ctx.selectedRow?._id,\n              getTableSetting: data => ({}),\n              // onSubmit: ({ data: itemOrArr, list }, o) => {\n              //   if (isArray(itemOrArr)) {\n              //     toast.warning('Array of prices passed. Dispatcher warn');\n              //     return;\n              //   }\n              //   service.addItemToList({\n              //     data: { data: createPriceDataForReq(itemOrArr).data, list },\n              //     onSuccess: data => {\n              //       console.log('IPriceListRes');\n              //       o?.closeAfterSave && modal?.onClose();\n              //       toast.success(`Price created`);\n              //     },\n              //   });\n              // },\n            },\n          });\n        },\n      },\n\n      {\n        name: 'editPriceList',\n        title: 'Редагувати',\n        icon: 'edit',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      {\n        name: 'copyPriceList',\n        title: 'Копіювати',\n        icon: 'copy',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      {\n        name: 'archivePriceList',\n        title: 'Архів',\n        icon: 'archive',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      { separator: true },\n      {\n        name: 'createPriceList',\n        title: 'Новий',\n        icon: 'plus',\n        iconSize: '90%',\n        type: 'onlyIconFilled',\n        disabled: false,\n        onClick: async () => {\n          const modal = modals.handleOpenModal({\n            ModalChildren: FormCreatePriceList,\n            modalChildrenProps: {\n              filterOptions: PriceManagementItemTypeFilterOptions,\n              defaultData: { type: 'purchases' },\n              onSubmit: (data, o) => {\n                service.createList({\n                  data,\n                  onSuccess: data => {\n                    o?.onSuccess && o?.onSuccess(data);\n                    o?.closeAfterSave && modal?.onClose();\n                    toast.success(`Created price list: ${data.label}`);\n                  },\n                });\n              },\n            },\n          });\n        },\n      },\n    ],\n\n    [modals, service]\n  );\n};\n\nexport default usePriceManagementActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport { priceListColumns } from 'data';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { usePriceListsSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\nimport usePriceManagementServiceHook from '../../hooks/usePriceManagementService.hook';\nimport usePriceManagementActionsCreatorHook from '../../hooks/usePriceManagementActionsCreator.hook';\nimport { IPriceList } from '../../redux/priceManagement/priceManagement.types';\nimport { useNavigate } from 'react-router-dom';\n\ntype Props = {\n  path: PagePathType;\n};\nconst PagePriceManagement: React.FC<any> = (props: Props) => {\n  const service = usePriceManagementServiceHook();\n  const state = usePriceListsSelector();\n  const navigate = useNavigate();\n  const { getAll } = service;\n  const actionsCreator = usePriceManagementActionsCreatorHook(service);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IPriceList> => ({\n      tableData: state.lists,\n      tableTitles: priceListColumns,\n      isFilter: false,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onRowClick: ev => {\n        ev?._id && navigate(`${ev?._id}`);\n      },\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, getAll, navigate, sortParams, state.lists]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.lists.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n          onSuccess(d) {\n            console.log('PagePriceManagement onSuccess getAll');\n          },\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.lists.length]);\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PagePriceManagement;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import {\n  IPriceList,\n  IPriceListReqData,\n  PriceListDto,\n  PriceListType,\n} from '../../redux/priceManagement/priceManagement.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport { useAppForm } from '../../hooks';\nimport { omit } from 'lodash';\nimport FlexBox from '../atoms/FlexBox';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport translate from '../../lang';\nimport FormCreateInner from './components/FormCreateInner';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\n\nexport interface FormCreatePriceListProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n  defaultData?: Partial<IPriceList>;\n  edit?: boolean;\n  onSubmit?: AppSubmitHandler<\n    IPriceListReqData,\n    {\n      onSuccess: (data: IPriceList) => void;\n      onError: () => void;\n    }\n  >;\n}\n\nconst FormCreatePriceList: React.FC<FormCreatePriceListProps> = ({\n  filterOptions,\n  onSubmit,\n  defaultData,\n  edit,\n  ...props\n}) => {\n  // const modalService = useModalProvider();\n  const [isSuccess] = useState(false);\n  // const [currentList, setCurrentList] = useState<IPriceList | undefined>();\n  // const currentList = usePriceListById();\n  const {\n    formState: { errors, isValid },\n    register,\n    // registerSelect,\n    clearAfterSave,\n    closeAfterSave,\n    toggleAfterSubmitOption,\n    setValue,\n    handleSubmit,\n  } = useAppForm<PriceListDto>({\n    defaultValues: omit(defaultData, ['createdAt', 'updatedAt', '_id']),\n  });\n\n  const onValidSubmit = (data: PriceListDto) =>\n    onSubmit &&\n    onSubmit(\n      {\n        data,\n        _id: defaultData?._id,\n      },\n      {\n        closeAfterSave,\n        clearAfterSave,\n        onSuccess: data => {},\n        onError: () => {},\n      }\n    );\n\n  const onAddPricesClick = () => {\n    // const newPrice = { _id: nanoid(8).toString() };\n    // toast.info(newPrice._id);\n    // setValue('prices', Array.isArray(formValues.prices) ? [...formValues.prices, newPrice] : [newPrice]);\n    // const modal = modalService.handleOpenModal({\n    //   ModalChildren: FormCreatePrice,\n    //   modalChildrenProps: {\n    //     title: 'Add prices',\n    //     type: formValues.type,\n    //   },\n    // });\n  };\n  return (\n    <ModalForm\n      isValid={isValid}\n      onSubmit={handleSubmit(onValidSubmit)}\n      title={'Create price list'}\n      {...props}\n      fitContentV\n      filterOptions={filterOptions}\n      defaultFilterValue={defaultData?.type}\n      onOptSelect={(option, value) => {\n        setValue('type', value);\n      }}\n      extraFooter={\n        <FlexBox fxDirection={'column'} fillWidth>\n          {isSuccess && <FormCreateInner buttonText={'Add prices'} onClick={onAddPricesClick} />}\n          <FormAfterSubmitOptions\n            {...{\n              clearAfterSave,\n              closeAfterSave,\n              toggleOption: toggleAfterSubmitOption,\n            }}\n          />\n        </FlexBox>\n      }\n    >\n      <FlexBox fxDirection={'column'} gap={4} padding={'8px 16px 16px'}>\n        <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={16}>\n          <InputLabel label={translate('timeFrom')} direction={'vertical'} error={errors.timeFrom} required>\n            <InputText placeholder={translate('timeFrom')} type={'datetime-local'} {...register('timeFrom')} />\n          </InputLabel>\n\n          <InputLabel label={translate('timeTo')} direction={'vertical'} error={errors.timeTo} required>\n            <InputText placeholder={translate('timeTo')} type={'datetime-local'} {...register('timeTo')} />\n          </InputLabel>\n        </FlexBox>\n\n        <InputLabel label={translate('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={translate('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\nexport default FormCreatePriceList;\n//\n// const FormCreatePrice: React.FC<FormCreatePriceProps> = ({ defaultState, type, onSubmit, ...props }) => {\n//   const {\n//     formState: { errors, isValid },\n//     formValues,\n//     register,\n//     registerSelect,\n//     clearAfterSave,\n//     closeAfterSave,\n//     toggleAfterSubmitOption,\n//     setValue,\n//     handleSubmit,\n//   } = useAppForm<PriceListItemDto>();\n//   const onValidSubmit = (data: PriceListItemDto) =>\n//     onSubmit &&\n//     onSubmit(\n//       {\n//         _id: defaultState?._id,\n//         data,\n//       },\n//       {\n//         clearAfterSave,\n//         closeAfterSave,\n//       }\n//     );\n//\n//   return (\n//     <ModalForm fitContentV isValid {...props} onSubmit={handleSubmit(onValidSubmit)}>\n//       <FlexBox gap={4} padding={'0 16px 16px'}>\n//         <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n//           <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n//         </InputLabel>\n//         {type === 'sales' && (\n//           <InputLabel label={translate('price')} direction={'vertical'} error={errors.price} required>\n//             <InputText placeholder={translate('price')} {...register('price')} required autoFocus />\n//           </InputLabel>\n//         )}\n//         {type === 'purchases' && (\n//           <InputLabel label={translate('cost')} direction={'vertical'} error={errors.cost} required>\n//             <InputText placeholder={translate('cost')} {...register('cost')} required autoFocus />\n//           </InputLabel>\n//         )}\n//       </FlexBox>\n//     </ModalForm>\n//   );\n// };\n// export interface FormCreatePriceProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n//   defaultState?: Partial<IPriceListItem>;\n//   onSubmit?: AppSubmitHandler<IPriceListItemReqData>;\n//   type?: PriceListType;\n// }\n"],"names":["PriceManagementItemTypeFilterOptions","label","PriceListTypeEnum","value","service","modals","useModalProvider","useCallback","ctx","_ctx$selectedRow","name","title","icon","iconSize","type","disabled","selectedRow","_id","onClick","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ctx$selectedRow2","wrap","_context","prev","next","handleOpenModal","ModalChildren","PriceListOverview","modalChildrenProps","listId","getTableSetting","data","stop","apply","arguments","separator","_onClick2","_callee2","modal","_context2","FormCreatePriceList","filterOptions","defaultData","onSubmit","o","createList","onSuccess","closeAfterSave","onClose","toast","concat","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","usePriceManagementServiceHook","state","usePriceListsSelector","navigate","useNavigate","getAll","actionsCreator","usePriceManagementActionsCreatorHook","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","lists","tableTitles","priceListColumns","isFilter","isSearch","footer","checkBoxes","onRowClick","ev","onFilterSubmit","refresh","query","onLoading","then","handleTableSort","param","sortOrder","dataPath","useEffect","length","d","console","log","_jsx","AppGridPage","path","children","TableList","_objectSpread","css","takeFullPlace","_templateObject2","_templateObject3","_ref","edit","_objectWithoutProperties","_excluded","isSuccess","_useAppForm","useAppForm","defaultValues","omit","_useAppForm$formState","formState","errors","isValid","register","clearAfterSave","toggleAfterSubmitOption","setValue","handleSubmit","ModalForm","onError","fitContentV","defaultFilterValue","onOptSelect","option","extraFooter","_jsxs","FlexBox","fxDirection","fillWidth","FormCreateInner","buttonText","FormAfterSubmitOptions","toggleOption","gap","padding","InputLabel","translate","direction","error","required","InputText","placeholder","autoFocus","timeFrom","timeTo","description","TextareaPrimary"],"sourceRoot":""}