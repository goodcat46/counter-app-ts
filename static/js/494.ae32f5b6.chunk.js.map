{"version":3,"file":"static/js/494.ae32f5b6.chunk.js","mappings":"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","sources":["components/Forms/offers/OfferBaseInfoFormArea.tsx","components/Forms/offers/categories/OfferFormCategoriesArea.tsx","components/Forms/offers/dimensions/DimensionsInputs.tsx","components/Forms/offers/dimensions/OfferDimensionsFormArea.tsx","components/Forms/offers/images/OfferFormImagesArea.tsx","components/Forms/offers/measurement/MeasuremenInputs.tsx","components/Forms/offers/measurement/OfferMeasurementFormArea.tsx","components/Forms/offers/properties/OfferFormPropertiesArea.tsx","components/Modals/CreateOfferModal.tsx"],"sourcesContent":["import { AccordionForm } from '../../atoms/FormArea/AccordionForm';\nimport { OfferFormAreaProps } from './types';\nimport {\n  IOfferFullFormData,\n  IProductFormData,\n  OfferEntity,\n  OfferStatusEnum,\n  OfferTypeEnum,\n} from '../../../types/offers/offers.types';\nimport { useAppForm } from '../../../hooks';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport { t } from '../../../lang';\nimport InputText from '../../atoms/Inputs/InputText';\nimport FlexBox from '../../atoms/FlexBox';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect';\nimport { ApiDirType } from '../../../redux/APP_CONFIGS';\nimport TextareaPrimary from '../../atoms/Inputs/TextareaPrimary';\nimport { toReqData } from '../../../utils';\nimport useOffersService from '../../../hooks/useOffersService.hook';\nimport { MaybeNull } from '../../../types/utils.types';\nimport { useOfferLoadersProvider } from '../../Modals/CreateOfferModal';\nimport { OfferStatusFilterOptions } from '../../../data';\nimport { useDirectorySelector, useWarehousesSelector } from '../../../redux/selectors.store';\nimport { offerTypeFilterOptions } from '../../../data/modalFilterOptions.data';\nimport ButtonSwitch from '../../atoms/ButtonSwitch';\nimport ButtonsGroup from '../../atoms/ButtonsGroup';\n\nexport interface OfferBaseInfoFormAreaProps extends OfferFormAreaProps<IOfferFullFormData> {\n  type?: MaybeNull<OfferTypeEnum>;\n  onSuccess?: (data: { data: OfferEntity }) => void;\n  edit?: boolean;\n}\n\nexport const OfferBaseInfoFormArea = ({ defaultValues, edit, type, onSuccess, _id }: OfferBaseInfoFormAreaProps) => {\n  const { isLoading, onLoading } = useOfferLoadersProvider();\n  const service = useOffersService();\n\n  const warehousesState = useWarehousesSelector();\n  const counterparties = useDirectorySelector(ApiDirType.COUNTERPARTIES).directory;\n  const brandsList = useDirectorySelector(ApiDirType.BRANDS).directory;\n\n  const {\n    formState: { errors },\n    register,\n    registerSelect,\n    formValues,\n    setValue,\n    handleSubmit,\n    ...appForm\n  } = useAppForm<IOfferFullFormData>({\n    defaultValues: { visible: false, approved: OfferStatusEnum.pending, ...defaultValues, type },\n  });\n\n  function onValid(sData: IProductFormData) {\n    const productForSubmit = toReqData(sData, { ignorePaths: ['measurement'] });\n\n    !edit\n      ? service.create({\n          data: {\n            data: {\n              data: productForSubmit,\n            },\n          },\n          onSuccess: onSuccess,\n          onLoading: onLoading('offer_create'),\n        })\n      : service.updateById({\n          data: { data: { data: productForSubmit, _id } },\n          onSuccess: onSuccess,\n          onLoading: onLoading('offer_update'),\n        });\n  }\n\n  return (\n    <>\n      <AccordionForm\n        label={t('Base info')}\n        isLoading={!edit ? isLoading?.offer_create : isLoading?.offer_update}\n        onSubmit={handleSubmit(onValid)}\n        onReset={appForm.reset}\n        canSubmit={true}\n        expandable={false}\n      >\n        <ButtonsGroup\n          value={formValues?.type ?? OfferTypeEnum.GOODS}\n          options={offerTypeFilterOptions}\n          onSelect={o => setValue('type', o.value)}\n        />\n\n        <InputLabel label={t('label')} error={errors.label} required>\n          <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={6} fillWidth>\n          <InputLabel label={t('sku')} error={errors.sku}>\n            <InputText placeholder={t('sku')} {...register('sku')} />\n          </InputLabel>\n\n          <InputLabel label={t('Bar-code')} error={errors.barCode}>\n            <InputText placeholder={t('Bar-code')} {...register('barCode')} />\n          </InputLabel>\n        </FlexBox>\n\n        <CustomSelect\n          {...registerSelect('brand', {\n            options: brandsList,\n            label: t('brand'),\n            placeholder: t('selectBrand'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('warehouse', {\n            options: warehousesState.warehouses,\n            label: t('Select warehouse'),\n            placeholder: t('Select warehouse'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('supplier', {\n            options: counterparties,\n            label: t('Select supplier'),\n            placeholder: t('Select supplier'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('approved', {\n            options: OfferStatusFilterOptions,\n            label: t('status'),\n            placeholder: t('status'),\n            value: formValues.approved,\n            selectedValue: formValues.approved,\n          })}\n        />\n\n        <InputLabel label={t('description')} error={errors.description}>\n          <TextareaPrimary placeholder={t('description')} {...register('description')} />\n        </InputLabel>\n\n        <InputLabel label={t('Visibility')} error={errors.description}>\n          <ButtonSwitch\n            value={formValues.visible}\n            onChange={val => {\n              setValue('visible', val, { shouldTouch: true, shouldDirty: true });\n            }}\n          />\n        </InputLabel>\n      </AccordionForm>\n    </>\n  );\n};\n","import { FormEventHandler, useEffect, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport styled from 'styled-components';\nimport { FlexUl } from '../../../atoms/FlexBox';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { OfferFormAreaProps } from '../types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { t } from '../../../../lang';\nimport { IOfferFullFormData, OfferEntity } from '../../../../types/offers/offers.types';\nimport { idsFromRefs, sortIds } from '../../../../utils';\nimport OfferCategoriesSelector from './OfferCategoriesSelector';\nimport { useCurrentOffer } from '../../../../hooks';\n\nexport interface OfferFormCategoriesAreaProps extends OfferFormAreaProps<IOfferFullFormData['categories']> {\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n  onSuccess?: (data: OfferEntity) => void;\n}\n\nexport const OfferFormCategoriesArea = ({ offer, disabled }: OfferFormCategoriesAreaProps) => {\n  const Offer = useCurrentOffer(offer);\n  const loaders = useOfferLoadersProvider();\n  const initIds = sortIds(Offer?.categories?.map(p => p._id));\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const [categoriesIds, setCategoriesIds] = useState<string[]>(initIds);\n\n  const canSubmit = useMemo(() => {\n    return !!categoriesIds?.length && initIds?.join(',') !== sortIds(categoriesIds).join(',');\n  }, [initIds, categoriesIds]);\n\n  const handleFormSubmit: FormEventHandler = ev => {\n    ev.preventDefault();\n\n    Offer &&\n      service.updateById({\n        onLoading: loaders.onLoading('categories'),\n        data: {\n          data: {\n            _id: Offer._id,\n            data: { categories: categoriesIds },\n          },\n        },\n        onSuccess: (data, meta) => {},\n      });\n  };\n\n  useEffect(() => {\n    if (Offer?.categories) {\n      setCategoriesIds(idsFromRefs(Offer?.categories));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AccordionForm\n      label={t('Categories')}\n      onSubmit={handleFormSubmit}\n      disabled={disabled}\n      isLoading={loaders.isLoading?.categories}\n      canSubmit={canSubmit}\n      maxHeight={'300px'}\n      isOpen={false}\n    >\n      <ListBox flex={1} overflow={'auto'}>\n        <OfferCategoriesSelector onChangeIds={setCategoriesIds} offer={Offer} />\n      </ListBox>\n    </AccordionForm>\n  );\n};\nconst ListBox = styled(FlexUl)`\n  padding-bottom: 8px;\n`;\n","import { t } from 'lang';\nimport * as React from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport styled from 'styled-components';\nimport { UseFormReturn } from 'react-hook-form/dist/types';\nimport { DimensionsKeyType, IDimensions } from 'types/utils.types';\n\nexport interface DimensionsFormData {\n  dimensions?: IDimensions;\n}\n\nexport const dimensionsInputsProps: {\n  label?: string;\n  placeholder?: string;\n  name: DimensionsKeyType;\n}[] = [\n  { name: 'height', label: t('Height'), placeholder: t('Sm') },\n  { name: 'width', label: t('Width'), placeholder: t('Sm') },\n  { name: 'length', label: t('Length'), placeholder: t('Sm') },\n  { name: 'weight', label: t('Weight'), placeholder: t('Kg') },\n];\n\nconst DimensionsInputs = <TContext = any,>({\n  form,\n  disabled,\n}: {\n  disabled?: boolean;\n  form: UseFormReturn<DimensionsFormData, TContext>;\n}) => {\n  const errors = form?.formState?.errors?.dimensions;\n\n  return (\n    <Box fillWidth>\n      {dimensionsInputsProps.map(input => {\n        return (\n          <InputLabel key={input.name} label={input.label} error={errors && errors[input.name]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={1}\n              type={'number'}\n              {...form.register(`dimensions.${input.name}`, {\n                valueAsNumber: true,\n                min: 1,\n              })}\n              disabled={disabled}\n            />\n          </InputLabel>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 8px;\n\n  @media screen and (min-width: 480px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nexport default DimensionsInputs;\n","import DimensionsInputs, { DimensionsFormData } from './DimensionsInputs';\nimport { useAppForm } from '../../../../hooks';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport useOffersService from '../../../../hooks/useOffersService.hook';\nimport { ToastService } from '../../../../services';\nimport { IDimensions } from '../../../../types/utils.types';\nimport { useState } from 'react';\nimport { OfferFormAreaProps } from '../types';\nimport { t } from '../../../../lang';\n\nexport interface OfferDimensionsFormSectionProps extends OfferFormAreaProps<IDimensions> {}\n\nexport const OfferDimensionsFormArea = ({\n  defaultValues,\n  _id,\n  disabled,\n  ...props\n}: OfferDimensionsFormSectionProps) => {\n  const service = useOffersService();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useAppForm<DimensionsFormData>({\n    defaultValues: { dimensions: defaultValues ?? {} },\n  });\n\n  const onValid = (sData: DimensionsFormData) => {\n    service.updateById({\n      data: { data: { data: sData, _id } },\n      onSuccess(d) {\n        ToastService.success(`Product updated`);\n      },\n      onError: e => {\n        console.error('Product update action', e);\n      },\n      onLoading: setIsLoading,\n    });\n  };\n\n  const canSubmit = form.formState.dirtyFields?.dimensions\n    ? Object.values(form.formState.dirtyFields?.dimensions)?.some(fd => fd)\n    : false;\n\n  return (\n    <AccordionForm\n      onSubmit={form.handleSubmit(onValid)}\n      label={t('Package size')}\n      isLoading={isLoading}\n      isOpen={false}\n      {...props}\n      disabled={!canSubmit || disabled}\n    >\n      <DimensionsInputs form={form} disabled={disabled} />\n    </AccordionForm>\n  );\n};\n","import { OfferFormAreaProps } from '../types';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { OfferEntity, OfferImageSlotEntity } from '../../../../types/offers/offers.types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useMemo, useState } from 'react';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport FormOfferImagesComponent from './FormOfferImagesComponent';\nimport { getIdRef } from '../../../../utils';\nimport { t } from '../../../../lang';\n\nexport interface OfferFormImagesAreaProps extends OfferFormAreaProps<OfferImageSlotEntity[]> {\n  onSubmit?: AppSubmitHandler<Partial<OfferImageSlotEntity>[]>;\n  onSuccess?: (data: { data: OfferEntity }) => void;\n  update?: string;\n}\n\nexport const OfferFormImagesArea = ({\n  offer,\n  onSubmit,\n  onSuccess,\n  disabled,\n  defaultValues,\n}: OfferFormImagesAreaProps) => {\n  const loaders = useOfferLoadersProvider();\n  const [state, setState] = useState<Partial<OfferImageSlotEntity>[]>(defaultValues || loaders?.state?.images || []);\n\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n\n    if (onSubmit) {\n      onSubmit(state);\n    } else if (offer) {\n      service.updateById({\n        data: { refresh: true, data: { ...getIdRef(offer), data: { images: state as OfferImageSlotEntity[] } } },\n        onSuccess: onSuccess,\n        onLoading: loaders.onLoading('images'),\n      });\n    } else {\n      console.warn('Offer not passed');\n    }\n  };\n  const canSubmit = useMemo(() => {\n    return !!state?.length;\n  }, [state?.length]);\n\n  return (\n    <AccordionForm\n      label={t('Images')}\n      onSubmit={handleSubmit}\n      canSubmit={canSubmit}\n      disabled={disabled}\n      isLoading={loaders.isLoading?.images}\n      isOpen={false}\n      maxHeight={'400px'}\n    >\n      <FormOfferImagesComponent\n        hideLabel\n        initialData={state}\n        onChangeState={setState}\n        contentContainerStyle={{\n          flex: 1,\n          // borderTop: `1px solid ${theme.sideBarBorderColor}`,\n          // borderBottom: `1px solid ${theme.sideBarBorderColor}`,\n        }}\n      />\n    </AccordionForm>\n  );\n};\n","import { Path } from 'react-hook-form';\nimport { MeasurementUnit } from 'types/offers/offers.types';\nimport { FilterOption } from '../../../atoms/TabSelector';\nimport { enumToFilterOptions } from 'utils/fabrics';\nimport CustomSelect from '../../../atoms/Inputs/CustomSelect';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport FlexBox from '../../../atoms/FlexBox';\nimport * as React from 'react';\nimport { UseAppFormReturn } from 'hooks/useAppForm.hook';\nimport { t } from 'lang';\nimport { HasMeasurement } from 'types/utils.types';\n\nexport interface MeasurementInputsFormData extends HasMeasurement {}\n\nconst productsMeasurementUnitOptions = enumToFilterOptions(MeasurementUnit);\n\nconst measurementInputs: {\n  label?: string;\n  placeholder?: string;\n  name: Path<MeasurementInputsFormData>;\n  type?: HTMLInputElement['type'];\n  options?: FilterOption[];\n}[] = [\n  { name: 'measurement.unit', label: t('unit'), placeholder: t('unit'), options: productsMeasurementUnitOptions },\n  { name: 'measurement.min', label: t('min'), placeholder: t('min'), type: 'number' },\n  { name: 'measurement.max', label: t('max'), placeholder: t('max'), type: 'number' },\n  // { name: 'measurement.step', label: t('step'), placeholder: t('step'), type: 'number' },\n];\n\nconst MeasurementInputs = ({\n  appForm,\n  disabled,\n}: {\n  disabled?: boolean;\n  appForm: UseAppFormReturn<MeasurementInputsFormData>;\n}) => {\n  return (\n    <FlexBox fillWidth style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', columnGap: 8 }}>\n      {measurementInputs.map(input => {\n        return input.options ? (\n          <CustomSelect\n            key={input.name}\n            {...appForm.registerSelect(input?.name, {\n              options: input?.options,\n              label: input?.label,\n              placeholder: input?.label,\n              dropDownIsAbsolute: true,\n              onlyValue: true,\n            })}\n            disabled={disabled}\n          />\n        ) : (\n          <InputLabel key={input.name} label={input.label} error={appForm?.formState?.errors[input.name as never]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={input?.type === 'number' ? 1 : undefined}\n              type={input?.type}\n              {...appForm.register(input.name, {\n                valueAsNumber: input?.type === 'number',\n                min: input?.type === 'number' ? 1 : undefined,\n              })}\n              disabled={disabled}\n            />\n          </InputLabel>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default MeasurementInputs;\n","import MeasurementInputs, { MeasurementInputsFormData } from './MeasuremenInputs';\nimport { useAppForm } from '../../../../hooks';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport useOffersService from '../../../../hooks/useOffersService.hook';\nimport { ToastService } from '../../../../services';\nimport { IMeasurement } from '../../../../types/utils.types';\nimport { useState } from 'react';\nimport { OfferFormAreaProps } from '../types';\nimport { t } from '../../../../lang';\n\nexport interface OfferMeasurementFormProps extends OfferFormAreaProps<IMeasurement> {}\n\nexport const OfferMeasurementFormArea = ({ defaultValues, _id, disabled, ...props }: OfferMeasurementFormProps) => {\n  const service = useOffersService();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useAppForm<MeasurementInputsFormData>({ defaultValues: { measurement: defaultValues } });\n\n  const onValid = (sData: MeasurementInputsFormData) => {\n    service.updateById({\n      data: { data: { data: sData, _id } },\n      update: true,\n      onSuccess(d) {\n        ToastService.success(`Product updated`);\n      },\n      onError: e => {\n        console.error('Product update action', e);\n      },\n      onLoading: setIsLoading,\n    });\n  };\n  const canSubmit = form.formState.dirtyFields?.measurement\n    ? Object.values(form.formState.dirtyFields?.measurement)?.some(fd => fd)\n    : false;\n  return (\n    <AccordionForm\n      onSubmit={form.handleSubmit(onValid)}\n      label={t('Measurement info')}\n      isLoading={isLoading}\n      disabled={!canSubmit || disabled}\n      isOpen={false}\n      {...props}\n    >\n      <MeasurementInputs appForm={form} disabled={disabled} />\n    </AccordionForm>\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../../atoms/FormArea/AccordionForm';\nimport styled from 'styled-components';\nimport FlexBox from '../../../atoms/FlexBox';\nimport { useOffersSelector } from '../../../../redux/selectors.store';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { OfferFormAreaProps } from '../types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { ArrayOfUUID } from '../../../../redux/app-redux.types';\nimport { t } from '../../../../lang';\nimport { OfferEntity } from '../../../../types/offers/offers.types';\nimport { PropertiesGroupSelect } from '../../../atoms/PropertiesGroupSelect';\nimport { PropertyBaseEntity, PropertyEntity } from '../../../../types/offers/properties.types';\nimport OfferVariationPropertySelector from '../variations/OfferVariationPropertySelector';\nimport { Text } from '../../../atoms/Text';\nimport { useCurrentOffer } from '../../../../hooks';\nimport { sortIds, updateIdsArray } from '../../../../utils';\n\nexport interface OfferFormPropertiesAreaProps extends OfferFormAreaProps<ArrayOfUUID> {\n  onSubmit?: AppSubmitHandler<string[]>;\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n  onSuccess?: (data: { data: OfferEntity }) => void;\n}\n\nexport const OfferFormPropertiesArea = ({ onSuccess, disabled, offer }: OfferFormPropertiesAreaProps) => {\n  const loaders = useOfferLoadersProvider();\n  const state = useOffersSelector();\n  const Offer = useCurrentOffer(offer);\n  const service = useAppServiceProvider().get(ServiceName.offers);\n  const initIds = sortIds(Offer?.properties?.map(p => p._id));\n  const [selectedIds, setSelectedIds] = useState<string[]>(initIds);\n  const [template, setTemplate] = useState<PropertyBaseEntity>();\n\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n    if (Offer) {\n      service.updateById({\n        data: {\n          data: {\n            _id: Offer?._id,\n            data: { properties: selectedIds },\n          },\n        },\n        update: true,\n        onLoading: loaders.onLoading('properties'),\n        onSuccess: onSuccess,\n      });\n    }\n  };\n\n  const canSubmit = useMemo(() => {\n    return !!selectedIds?.length && initIds?.join(',') !== sortIds(selectedIds)?.join(',');\n  }, [selectedIds, initIds]);\n\n  const propertiesList = useMemo(() => {\n    const _rootId = template?._id;\n    const _propertiesList: PropertyEntity[] = [];\n    const _propertiesIds = state.propertiesKeysMap?.[_rootId ?? 'def'] ?? [];\n\n    for (const propId of _propertiesIds) {\n      const prop = state.propertiesDataMap?.[propId];\n      if (prop && !prop?.isSelectable) {\n        const childrenIds = state.propertiesKeysMap[prop?._id];\n        if (childrenIds?.length) {\n          _propertiesList.push(prop);\n        }\n      }\n    }\n\n    return _propertiesList;\n  }, [template, state.propertiesDataMap, state.propertiesKeysMap]);\n\n  const handleSelect = useCallback((_parentId?: string, valueId: string = '') => {\n    setSelectedIds(prev => {\n      // prev.includes(valueId) ? prev.filter(el => el !== valueId) : [...prev, valueId]\n      return updateIdsArray({\n        arr: prev,\n        id: valueId,\n        toggle: true,\n      });\n    });\n  }, []);\n\n  const renderPropertiesList = useMemo(() => {\n    return propertiesList?.map(prop => {\n      return (\n        <OfferVariationPropertySelector\n          key={`prop_${prop._id}`}\n          item={prop}\n          selectedIds={selectedIds}\n          onSelect={handleSelect}\n        />\n      );\n    });\n  }, [propertiesList, selectedIds, handleSelect]);\n\n  return (\n    <AccordionForm\n      label={t('Properties')}\n      canSubmit={canSubmit}\n      onSubmit={handleSubmit}\n      isLoading={loaders.isLoading?.properties}\n      isOpen={false}\n      disabled={!Offer || disabled}\n    >\n      <PropertiesGroupSelect selected={template} onSelect={setTemplate} />\n\n      <TemplateBox flex={1} overflow={'auto'}>\n        {renderPropertiesList?.length ? (\n          renderPropertiesList\n        ) : (\n          <FlexBox padding={'24px'} alignItems={'center'} justifyContent={'center'}>\n            <Text $size={16}>{t('Data not found')}</Text>\n          </FlexBox>\n        )}\n      </TemplateBox>\n    </AccordionForm>\n  );\n};\nconst TemplateBox = styled(FlexBox)`\n  padding-bottom: 8px;\n`;\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/dimensions/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../lang';\nimport { toOfferFormData } from '../../utils';\nimport { useEffect } from 'react';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/measurement/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport { OfferFormPropertiesArea } from '../Forms/offers/properties/OfferFormPropertiesArea';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider, useLoadersProvider } from '../../Providers/Loaders/LoaderProvider';\nimport { OfferFormImagesArea } from '../Forms/offers/images/OfferFormImagesArea';\nimport { useAppRouter, useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/categories/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\nimport { OfferPriceFormArea } from '../Forms/pricing/OfferPriceFormArea';\n\nexport interface CreateOfferModalProps extends ModalFormProps {\n  _id: string;\n}\n\nexport const useOfferLoadersProvider = () => useLoadersProvider<OfferLoadersKey, OfferLoadersData>();\n\nconst CreateOfferModal: React.FC<CreateOfferModalProps> = ({ onClose, _id }) => {\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>();\n  const {\n    state: { formData },\n    setData,\n  } = loaders;\n  const router = useAppRouter();\n  const Offer = useCurrentOffer({ _id: router.query?.offerId });\n\n  useEffect(() => {\n    // router.push({ query: omit(router.query, ['offerId']) });\n    // return () => {\n    //   router.push({ query: {} });\n    // };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ModalBase title={t('Create offer')} onClose={onClose}>\n      <LoadersProvider value={loaders}>\n        <FlexBox padding={'0 8px 16px'}>\n          <OfferBaseInfoFormArea\n            defaultValues={formData}\n            onSuccess={({ data }) => {\n              setData('formData', toOfferFormData(data));\n\n              router.push({ query: { offerId: data?._id } });\n            }}\n            type={formData?.type}\n          />\n\n          {Offer && (\n            <>\n              <OfferFormCategoriesArea offer={Offer} defaultValues={formData?.categories} disabled={!formData} />\n\n              <OfferFormPropertiesArea offer={Offer} defaultValues={formData?.properties} disabled={!formData} />\n\n              <OfferPriceFormArea\n                expandable={true}\n                isOpen={false}\n                offer={Offer}\n                defaultState={Offer?.price}\n                price={Offer?.price}\n                title={t('Price')}\n              />\n\n              <OfferFormImagesArea offer={Offer} defaultValues={formData?.images} disabled={!formData} />\n\n              <OfferDimensionsFormArea offer={Offer} defaultValues={formData?.dimensions} disabled={!formData} />\n\n              <OfferMeasurementFormArea offer={Offer} defaultValues={formData?.measurement} disabled={!formData} />\n            </>\n          )}\n        </FlexBox>\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default CreateOfferModal;\n"],"names":["OfferBaseInfoFormArea","_ref","_formValues$type","defaultValues","edit","type","onSuccess","_id","_useOfferLoadersProvi","useOfferLoadersProvider","isLoading","onLoading","service","useOffersService","warehousesState","useWarehousesSelector","counterparties","useDirectorySelector","ApiDirType","directory","brandsList","_useAppForm","useAppForm","_objectSpread","visible","approved","OfferStatusEnum","errors","formState","register","registerSelect","formValues","setValue","handleSubmit","appForm","_objectWithoutProperties","_excluded","_jsx","_Fragment","children","_jsxs","AccordionForm","label","t","offer_update","offer_create","onSubmit","sData","productForSubmit","toReqData","ignorePaths","updateById","data","create","onReset","reset","canSubmit","expandable","ButtonsGroup","value","OfferTypeEnum","options","offerTypeFilterOptions","onSelect","o","InputLabel","error","required","InputText","placeholder","autoFocus","FlexBox","fxDirection","gap","fillWidth","sku","barCode","CustomSelect","warehouses","OfferStatusFilterOptions","selectedValue","description","TextareaPrimary","ButtonSwitch","onChange","val","shouldTouch","shouldDirty","OfferFormCategoriesArea","_Offer$categories","_loaders$isLoading","offer","disabled","Offer","useCurrentOffer","loaders","initIds","sortIds","categories","map","p","useAppServiceProvider","ServiceName","_useState","useState","_useState2","_slicedToArray","categoriesIds","setCategoriesIds","useMemo","length","join","useEffect","idsFromRefs","ev","preventDefault","meta","maxHeight","isOpen","ListBox","flex","overflow","OfferCategoriesSelector","onChangeIds","styled","FlexUl","_templateObject","_taggedTemplateLiteral","dimensionsInputsProps","name","Box","_form$formState","_form$formState$error","form","dimensions","input","min","concat","valueAsNumber","OfferDimensionsFormArea","_form$formState$dirty","_Object$values","_form$formState$dirty2","props","setIsLoading","dirtyFields","Object","values","some","fd","d","ToastService","onError","e","console","DimensionsInputs","OfferFormImagesArea","_loaders$state","state","images","setState","refresh","getIdRef","warn","FormOfferImagesComponent","hideLabel","initialData","onChangeState","contentContainerStyle","productsMeasurementUnitOptions","enumToFilterOptions","MeasurementUnit","measurementInputs","style","display","gridTemplateColumns","columnGap","_appForm$formState","dropDownIsAbsolute","onlyValue","undefined","OfferMeasurementFormArea","measurement","update","MeasurementInputs","OfferFormPropertiesArea","_Offer$properties","useOffersSelector","get","properties","selectedIds","setSelectedIds","_useState3","_useState4","template","setTemplate","_sortIds","propertiesList","_state$propertiesKeys","_state$propertiesKeys2","_step","_rootId","_propertiesList","_propertiesIds","propertiesKeysMap","_iterator","_createForOfIteratorHelper","s","n","done","_state$propertiesData","propId","prop","propertiesDataMap","isSelectable","childrenIds","push","err","f","handleSelect","useCallback","_parentId","valueId","arguments","prev","updateIdsArray","arr","id","toggle","renderPropertiesList","OfferVariationPropertySelector","item","PropertiesGroupSelect","selected","TemplateBox","padding","alignItems","justifyContent","Text","$size","useLoadersProvider","_router$query","onClose","useLoaders","formData","setData","router","useAppRouter","query","offerId","ModalBase","title","LoadersProvider","_ref2","toOfferFormData","OfferPriceFormArea","defaultState","price"],"sourceRoot":""}