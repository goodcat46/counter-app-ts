{"version":3,"file":"static/js/984.23c76fd9.chunk.js","mappings":"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","sources":["hooks/useTrFilterSelectors.hook.ts","hooks/useTrActionsCreator.hook.ts","components/AppPages/PageTransactions.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { ApiDirType } from '../redux/APP_CONFIGS';\nimport { ITransaction } from '../redux/transactions/transactions.types';\nimport { useDirectoriesSelector } from '../redux/selectors.store';\n\nconst useTrFilterSelectors = (): FilterSelectorType<keyof ITransaction>[] => {\n  const dirCategories = useDirectoriesSelector(ApiDirType.CATEGORIES_TR);\n  const dirCounts = useDirectoriesSelector(ApiDirType.CATEGORIES_TR);\n\n  // const transactionTypes = [\n  //   { _id: 'ds6d5vf6sd5f1v6sd', name: 'INCOME', label: 'ДОХІД' },\n  //   { _id: 'ds6d5vf6sd6f1v61d', name: 'TRANSFER', label: 'ПЕРЕКАЗ' },\n  //   { _id: 'ds6d5vf6dd6f1v68d', name: 'EXPENSE', label: 'ВИТРАТИ' },\n  // ];\n\n  return [\n    {\n      label: 'Рахунок OUT',\n      data: dirCounts.directory,\n      selectorName: 'countOut',\n      dirType: ApiDirType.COUNTS,\n    },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    {\n      label: 'Рахунок IN',\n      data: dirCounts.directory,\n      selectorName: 'countIn',\n      dirType: ApiDirType.COUNTS,\n    },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    {\n      label: 'Категорії',\n      data: dirCategories.directory,\n      selectorName: 'category',\n      dirType: ApiDirType.CATEGORIES_TR,\n    },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useTrFilterSelectors;\n","import { IModalProviderContext, useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { TransactionsService } from './useTransactionsService.hook';\n\nimport { filterOptions } from '../data/transactions.data';\nimport { ITableAction, ITableListContext, TableActionCreator } from '../components/TableList/tableTypes.types';\nimport { ITransaction } from '../redux/transactions/transactions.types';\n\nimport { useTransactionsSelector } from '../redux/selectors.store';\nimport { toast } from 'react-toastify';\nimport { Modals } from '../components/ModalProvider/Modals';\nimport { ITransactionsState } from '../redux/transactions/transactions.slice';\n\nexport interface TransactionsTablesActionProps {\n  ctx: ITableListContext<ITransaction>;\n  service: TransactionsService;\n  state: ITransactionsState;\n  modalService: IModalProviderContext;\n}\nexport type ITransactionsTableAction = ITableAction<string>;\nexport type TransactionsActionCreator = (options: TransactionsTablesActionProps) => ITransactionsTableAction;\nexport type TrActionsCreator = TableActionCreator<ITransaction>;\n\nconst createEditTransactionAction = ({\n  ctx,\n  service,\n  modalService,\n  state,\n}: TransactionsTablesActionProps): ITransactionsTableAction => ({\n  name: 'editTr',\n  title: 'Редагування транзакції',\n  icon: 'edit',\n  disabled: !ctx.selectedRow?._id,\n  type: 'onlyIcon',\n  onClick: async () => {\n    const tr = state.transactions.find(el => el._id === ctx.selectedRow?._id);\n\n    const modal = modalService.handleOpenModal({\n      Modal: Modals.FormCreateTransaction,\n      props: {\n        title: 'Редагування транзакції',\n        filterOptions,\n        defaultOption: filterOptions.findIndex(el => el.value === tr?.type),\n        defaultState: tr,\n        fillHeight: true,\n        onSubmit: (data, o) => {\n          service.updateById({\n            data,\n            onSuccess(d) {\n              o?.closeAfterSave && modal?.onClose();\n            },\n          });\n        },\n      },\n    });\n  },\n});\nconst createCopyTransactionAction = ({\n  ctx,\n  service,\n  modalService,\n  state,\n}: TransactionsTablesActionProps): ITransactionsTableAction => ({\n  name: 'copyTr',\n  title: 'Копіювання транзакції',\n  icon: 'copy',\n  type: 'onlyIcon',\n  disabled: !ctx.selectedRow?._id,\n  onClick: async () => {\n    const tr = state.transactions.find(el => el._id === ctx.selectedRow?._id);\n\n    const modal = modalService.handleOpenModal({\n      Modal: Modals.FormCreateTransaction,\n      props: {\n        title: 'Копіювання транзакції',\n        filterOptions,\n        defaultOption: filterOptions.findIndex(el => el.value === tr?.type),\n        defaultState: tr,\n        fillHeight: true,\n        onSubmit: (data, o) => {\n          service.create({\n            data,\n            onSuccess(d) {\n              toast.success(`Транзакцію створено`);\n              o?.closeAfterSave && modal?.onClose();\n            },\n          });\n        },\n      },\n    });\n  },\n});\nconst createDeleteTransactionAction = ({\n  ctx,\n  service,\n  modalService,\n  state,\n}: TransactionsTablesActionProps): ITransactionsTableAction => ({\n  name: 'deleteTr',\n  title: 'Видалення транзакції',\n  icon: 'delete',\n  iconSize: '90%',\n  type: 'onlyIcon',\n  disabled: !ctx.selectedRow?._id,\n  onClick: () => {\n    service.deleteById({\n      data: ctx.selectedRow?._id,\n    });\n  },\n});\nconst createAddIncomeTransactionAction = ({\n  ctx,\n  service,\n  modalService,\n  state,\n}: TransactionsTablesActionProps): ITransactionsTableAction => ({\n  name: 'createIncomeTr',\n  title: 'Дохід',\n  icon: 'INCOME',\n  iconSize: '90%',\n  type: 'onlyIconFilled',\n  disabled: false,\n  onClick: () => {\n    const modal = modalService.handleOpenModal({\n      Modal: Modals.FormCreateTransaction,\n      props: {\n        title: 'Створити',\n        filterOptions,\n        defaultOption: 0,\n        fillHeight: true,\n        defaultState: { type: 'INCOME' },\n        onSubmit: (data, o) => {\n          service.create({\n            data,\n            onSuccess(d) {\n              o?.closeAfterSave && modal?.onClose();\n            },\n          });\n        },\n      },\n    });\n  },\n});\nconst createAddTransferTransactionAction = ({\n  ctx,\n  service,\n  modalService,\n  state,\n}: TransactionsTablesActionProps): ITransactionsTableAction => ({\n  name: 'createTransferTr',\n  title: 'Переказ між рахунками',\n  icon: 'TRANSFER',\n  iconSize: '90%',\n  type: 'onlyIconFilled',\n  disabled: false,\n  onClick: () => {\n    const modal = modalService.handleOpenModal({\n      Modal: Modals.FormCreateTransaction,\n      props: {\n        title: 'Створити нову',\n        filterOptions,\n        defaultOption: 1,\n        fillHeight: true,\n        defaultState: { type: 'TRANSFER' },\n        onSubmit: (data, o) => {\n          service.create({\n            data,\n            onSuccess(d) {\n              o?.closeAfterSave && modal?.onClose();\n            },\n          });\n        },\n      },\n    });\n  },\n});\nconst createAddExpenseTransactionAction = ({\n  ctx,\n  service,\n  modalService,\n  state,\n}: TransactionsTablesActionProps): ITransactionsTableAction => ({\n  name: 'createExpenseTr',\n  title: 'Витрата',\n  icon: 'EXPENSE',\n  iconSize: '90%',\n  type: 'onlyIconFilled',\n  disabled: false,\n  onClick: () => {\n    const modal = modalService.handleOpenModal({\n      Modal: Modals.FormCreateTransaction,\n      props: {\n        title: 'Створити',\n        filterOptions,\n        defaultOption: 2,\n        defaultState: { type: 'EXPENSE' },\n        onSubmit: (data, o) => {\n          service.create({\n            data,\n            onSuccess(d) {\n              o?.closeAfterSave && modal?.onClose();\n            },\n          });\n        },\n        fillHeight: true,\n      },\n    });\n  },\n});\nconst useTrActionsCreator = (service: TransactionsService): TrActionsCreator => {\n  const state = useTransactionsSelector();\n  const modalService = useModalProvider();\n\n  return ctx => {\n    const actionParams: TransactionsTablesActionProps = {\n      state,\n      service,\n      modalService,\n      ctx,\n    };\n    return [\n      createEditTransactionAction(actionParams),\n      createCopyTransactionAction(actionParams),\n      createDeleteTransactionAction(actionParams),\n      { separator: true },\n      createAddIncomeTransactionAction(actionParams),\n      createAddTransferTransactionAction(actionParams),\n      createAddExpenseTransactionAction(actionParams),\n    ];\n  };\n};\n\nexport { useTrActionsCreator };\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport { transactionsColumns, transactionsSearchParams } from 'data';\nimport styled from 'styled-components';\nimport useTransactionsService from 'hooks/useTransactionsService.hook';\nimport { useEffect, useMemo, useState } from 'react';\nimport useTrFilterSelectors from 'hooks/useTrFilterSelectors.hook';\nimport { ITransaction } from '../../redux/transactions/transactions.types';\nimport { useTrActionsCreator } from '../../hooks/useTrActionsCreator.hook';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useTransactionsSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\n\ntype Props = {\n  path: PagePathType;\n};\nconst PageTransactions: React.FC<any> = (props: Props) => {\n  const service = useTransactionsService();\n  const state = useTransactionsSelector();\n  const { getAll } = service;\n  const filterSelectors = useTrFilterSelectors();\n  const actionsCreator = useTrActionsCreator(service);\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<ITransaction> => ({\n      tableData: state.transactions,\n      tableTitles: transactionsColumns,\n      tableSortParams: transactionsSearchParams.filter(el => el.sort),\n      filterSelectors,\n      isFilter: true,\n      isSearch: true,\n      footer: true,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading });\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        });\n      },\n    }),\n    [actionsCreator, filterParams, filterSelectors, getAll, sortParams, state.transactions]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.transactions.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.transactions.length]);\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageTransactions;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["dirCategories","useDirectoriesSelector","ApiDirType","dirCounts","label","data","directory","selectorName","dirType","createEditTransactionAction","_ref","_ctx$selectedRow","ctx","service","modalService","state","name","title","icon","disabled","selectedRow","_id","type","onClick","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tr","modal","wrap","_context","prev","next","transactions","find","el","_ctx$selectedRow2","handleOpenModal","Modal","Modals","props","filterOptions","defaultOption","value","defaultState","fillHeight","onSubmit","o","updateById","onSuccess","d","closeAfterSave","onClose","stop","apply","arguments","createCopyTransactionAction","_ref2","_ctx$selectedRow3","_onClick2","_callee2","_context2","_ctx$selectedRow4","create","toast","createDeleteTransactionAction","_ref3","_ctx$selectedRow5","iconSize","_ctx$selectedRow6","deleteById","createAddIncomeTransactionAction","_ref4","createAddTransferTransactionAction","_ref5","createAddExpenseTransactionAction","_ref6","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","useTransactionsService","useTransactionsSelector","getAll","filterSelectors","useTrFilterSelectors","actionsCreator","useModalProvider","actionParams","separator","useTrActionsCreator","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","tableTitles","transactionsColumns","tableSortParams","transactionsSearchParams","sort","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","refresh","query","onLoading","handleTableSort","param","sortOrder","dataPath","useEffect","length","_jsx","AppGridPage","path","children","TableList","_objectSpread","css","takeFullPlace","_templateObject2","_templateObject3"],"sourceRoot":""}