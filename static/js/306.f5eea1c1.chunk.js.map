{"version":3,"file":"static/js/306.f5eea1c1.chunk.js","mappings":"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","sources":["components/Forms/FormCreateDirTreeComp.tsx"],"sourcesContent":["import ModalForm from 'components/ModalForm';\nimport React from 'react';\nimport styled from 'styled-components';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\nimport t from '../../lang';\nimport { DirectoriesFormProps, IBaseDirItem, IDirItemBase } from '../Directories/dir.types';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { useAppForm } from '../../hooks';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\n\nexport interface FormCreateDirTreeCompProps<DirType extends ApiDirType = any, FD = any>\n  extends DirectoriesFormProps<DirType, IDirItemBase<DirType>, FD> {}\n\nconst validation = yup.object().shape({\n  label: yup.string().required(),\n  description: yup.string().max(250).optional(),\n});\n\nconst FormCreateDirTreeComp: React.FC<FormCreateDirTreeCompProps> = ({\n  _id,\n  type,\n  edit,\n  defaultState,\n  onSubmit,\n  dirType,\n  ...props\n}) => {\n  const {\n    formState: { errors, isValid },\n    register,\n    handleSubmit,\n    closeAfterSave,\n    clearAfterSave,\n    toggleAfterSubmitOption: toggleOption,\n  } = useAppForm<IBaseDirItem>({\n    defaultValues: defaultState?.parent?._id\n      ? {\n          ...defaultState,\n          type,\n          parent: { _id: defaultState?.parent?._id },\n        }\n      : {\n          ...defaultState,\n          type,\n        },\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n\n  function formEventWrapper(evHandler?: AppSubmitHandler<IBaseDirItem>) {\n    if (evHandler) {\n      return handleSubmit(data =>\n        evHandler(data, {\n          closeAfterSave,\n          clearAfterSave,\n        })\n      );\n    } else {\n      console.log('FormCreateDirTreeComp onSubmit not passed.', dirType);\n    }\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={formEventWrapper(onSubmit)}\n      isValid={isValid}\n      extraFooter={<FormAfterSubmitOptions {...{ closeAfterSave, clearAfterSave, toggleOption }} />}\n    >\n      <Inputs>\n        {props.filterOptions && (\n          <InputLabel label={t('type')} error={errors.type} disabled>\n            <InputText defaultValue={type ? t(`${type}s` as any).toUpperCase() : type} disabled />\n          </InputLabel>\n        )}\n\n        {defaultState?.parent?._id && (\n          <InputLabel label={t('parentItem')} error={errors.type} disabled>\n            <InputText defaultValue={defaultState?.parent?.label} disabled />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('label')} error={errors.label} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        {dirType === ApiDirType.BRANDS && (\n          <InputLabel label={t('manufacturer')} error={errors.manufacturer}>\n            <InputText placeholder={t('manufacturer')} {...register('manufacturer')} />\n          </InputLabel>\n        )}\n\n        {dirType === ApiDirType.WAREHOUSES && (\n          <InputLabel label={t('code')} error={errors.code}>\n            <InputText placeholder={t('insertCode')} {...register('code')} />\n          </InputLabel>\n        )}\n\n        {/*<InputLabel label={t('')} error={errors.label}>*/}\n        {/*  <InputText placeholder={t('insertLabel')} {...register('label')} autoFocus />*/}\n        {/*</InputLabel>*/}\n\n        <InputLabel label={t('comment')} error={errors.description}>\n          <TextareaPrimary placeholder={t('insertComment')} {...register('description')} maxLength={250} />\n        </InputLabel>\n      </Inputs>\n    </ModalForm>\n  );\n};\n\nconst Inputs = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  padding: 16px;\n\n  background-color: inherit;\n`;\n\nexport default FormCreateDirTreeComp;\n"],"names":["validation","yup","shape","label","required","description","max","optional","Inputs","styled","_templateObject","_taggedTemplateLiteral","_ref","_id","_defaultState$parent","_defaultState$parent2","_defaultState$parent3","_defaultState$parent4","type","defaultState","edit","onSubmit","dirType","props","_objectWithoutProperties","_excluded","_useAppForm","useAppForm","defaultValues","parent","_objectSpread","resolver","yupResolver","reValidateMode","_useAppForm$formState","formState","errors","isValid","register","handleSubmit","closeAfterSave","clearAfterSave","toggleOption","toggleAfterSubmitOption","_jsx","ModalForm","evHandler","data","console","log","formEventWrapper","extraFooter","FormAfterSubmitOptions","children","_jsxs","filterOptions","InputLabel","t","error","disabled","InputText","defaultValue","concat","toUpperCase","placeholder","autoFocus","ApiDirType","manufacturer","code","TextareaPrimary","maxLength"],"sourceRoot":""}