{"version":3,"file":"static/js/882.e9e9845f.chunk.js","mappings":"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","sources":["hooks/useProductsFilterSelectors.hook.ts","hooks/useOffersActionsCreator.hook.ts","components/AppPages/offers/PageOffers.tsx","components/AppPages/pagesStyles.tsx","components/Modals/EditOfferModal.tsx"],"sourcesContent":["import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { OfferEntity } from '../types/offers/offers.types';\n\nconst useStorageFilterSelectors = (): FilterSelectorType<keyof OfferEntity>[] => {\n  return [\n    // {\n    //   label: 'Рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'category',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useStorageFilterSelectors;\n","import { useModalProvider } from '../Providers/ModalProvider/ModalProvider';\nimport { useCallback } from 'react';\nimport { TableActionsCreator } from '../components/TableList/tableTypes.types';\nimport { OfferEntity } from '../types/offers/offers.types';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { t } from '../lang';\nimport EditOfferModal from '../components/Modals/EditOfferModal';\nimport CreateOfferModal from '../components/Modals/CreateOfferModal';\nimport { useAppRouter } from './useRouter.hook';\nimport { useOffersSelector } from '../redux/selectors.store';\nimport { UseLoadersReturn } from '../Providers/Loaders/useLoaders.hook';\n\nexport type OffersActionsCreator = TableActionsCreator<OfferEntity>;\n\nexport const useOffersActionsCreator = ({\n  loaders,\n}: { loaders?: UseLoadersReturn<'refresh' | 'offer'> } = {}): OffersActionsCreator => {\n  const service = useAppServiceProvider().get(ServiceName.offers);\n  const router = useAppRouter();\n  const modals = useModalProvider();\n  const stateMap = useOffersSelector().dataMap;\n\n  return useCallback(\n    ctx => {\n      const currentId = ctx.selectedRow?._id;\n      const Offer = currentId ? stateMap?.[currentId] : undefined;\n\n      return [\n        {\n          name: 'refreshData',\n          title: t('Refresh data'),\n          icon: 'refresh',\n          type: 'onlyIcon',\n          onClick: () => {\n            service.getAll({\n              data: { refresh: true },\n              onLoading: loaders ? loaders.onLoading('refresh') : ctx.onRefresh,\n            });\n          },\n        },\n        { separator: true },\n\n        {\n          name: 'review',\n          title: 'Перегляд продукту',\n          icon: 'openInNew',\n          disabled: !currentId,\n          type: 'onlyIcon',\n          navTo: `/app/${router.params.permissionId}/offers/` + currentId,\n        },\n\n        {\n          name: 'edit',\n          title: 'Змінити',\n          icon: 'edit',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !currentId,\n          onClick: () => {\n            if (Offer) {\n              modals.create(EditOfferModal, {\n                offer: Offer,\n              });\n            } else if (currentId) {\n              service.getOne({\n                data: { data: { params: { _id: currentId } } },\n                onLoading: loaders ? loaders.onLoading('offer') : ctx.onRefresh,\n                onSuccess: ({ data }) => {\n                  // router.push({ query: { offerId: data._id } });\n\n                  modals.create(EditOfferModal, {\n                    offer: data,\n                  });\n                },\n              });\n            }\n          },\n        },\n        {\n          name: 'copy',\n          title: 'Копіювати',\n          icon: 'copy',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !Offer,\n          onClick: () => {\n            Offer &&\n              modals.create(EditOfferModal, {\n                offer: Offer,\n                copy: true,\n              });\n          },\n        },\n        {\n          name: 'archiveProduct',\n          title: 'Архів',\n          icon: 'archive',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        { separator: true },\n        {\n          name: 'createProduct',\n          title: 'Новий',\n          icon: 'plus',\n          iconSize: '90%',\n          type: 'onlyIconFilled',\n          disabled: false,\n          onClick: () => {\n            modals.create(CreateOfferModal);\n          },\n        },\n      ];\n    },\n\n    [loaders, modals, router, service, stateMap]\n  );\n};\n\nexport default useOffersActionsCreator;\n\n// const currentProduct=useProductsSelector().currentProduct\n\n// const onSubmitCreateWrapper = useCallback(\n//   (onCloseModal: () => void) => {\n//     return (data: ITransactionReqData, options: AfterFormSubmitOptions,) => {\n//       service.create({\n//         data,\n//         onSuccess(d) {\n//           toast.success(`Сторено транзакцію на суму: ${d.amount}`);\n//           options?.close && onCloseModal();\n//         },\n//       });\n//     };\n//   },\n//   [service]\n// );\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps, TableSortOrderEnum } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { useOffersSelector } from '../../../redux/selectors.store';\nimport { GetAllOffersQuery } from '../../../api';\nimport { OfferEntity } from '../../../types/offers/offers.types';\nimport useProductsFilterSelectorsHook from '../../../hooks/useProductsFilterSelectors.hook';\nimport useOffersActionsCreator from '../../../hooks/useOffersActionsCreator.hook';\nimport { BaseAppPageProps } from '../index';\nimport {\n  OfferSearchParam,\n  OfferSortParam,\n  offersSearchParams,\n  offersSortParams,\n  offersTableColumns,\n} from '../../../data';\nimport { useLoaders } from '../../../Providers/Loaders/useLoaders.hook';\nimport { TableSearchFormState } from '../../TableList/TableOverHead/TableSearchForm/TableSearchForm';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { setValueByPath } from '../../../utils';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageOffers: React.FC<any> = (props: Props) => {\n  const { tableConfig, isLoading } = useOffersTableSettings({});\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading?.offers} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageOffers;\n\nexport const useOffersTableSettings = ({\n  searchState,\n  sortState,\n}: {\n  searchState?: TableSearchFormState<OfferSearchParam>;\n  sortState?: { param: OfferSortParam; order: TableSortOrderEnum };\n}) => {\n  const loaders = useLoaders<'offers' | 'refresh' | 'offer'>({\n    offers: { content: 'Refreshing...' },\n    refresh: { content: 'Refreshing...' },\n    offer: { content: 'Refreshing...' },\n  });\n  const { onLoading, isLoading } = loaders;\n  const service = useAppServiceProvider().get(AppModuleName.offers);\n  const { getAll } = service;\n  const state = useOffersSelector();\n\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useOffersActionsCreator({ loaders });\n\n  const [sortParams, setSortParams] = useState(sortState);\n  const [searchParams, setSearchParams] = useState<TableSearchFormState | undefined>(searchState);\n  // const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<OfferEntity, OfferSearchParam, OfferSortParam> => ({\n      onSubmitSearch: data => {\n        if (data.search) {\n          const params: GetAllOffersQuery | undefined = data.param?.dataPath\n            ? setValueByPath(data.param?.dataPath, data.search)\n            : undefined;\n\n          setSearchParams(data);\n\n          getAll({\n            data: { refresh: true, params },\n            onLoading: onLoading('offers'),\n          }).then();\n        } else {\n          getAll({\n            data: { refresh: true },\n            onLoading: onLoading('offers'),\n          }).then();\n        }\n      },\n      tableData: state.list,\n      tableTitles: offersTableColumns,\n      searchParams: offersSearchParams,\n      sortParams: offersSortParams,\n      filterSelectors,\n      hasFilter: true,\n      hasSearch: true,\n      showFooter: false,\n      checkBoxes: true,\n      actionsCreator,\n      // onFilterSubmit: filterParams => {\n      //   setFilterParams(filterParams);\n      //   getAll({\n      //     data: {\n      //       refresh: true,\n      //       params: {\n      //         filterParams,\n      //         sortOrder: sortParams?.order,\n      //         dataKey: sortParams?.param.dataKey,\n      //         dataPath: sortParams?.param.dataPath,\n      //       },\n      //     },\n      //     onLoading: setIsLoading,\n      //   }).then();\n      // },\n      onTableSortChange: (param, order) => {\n        setSortParams({ param, order });\n        getAll({\n          data: {\n            refresh: true,\n            params: {\n              sortOrder: order,\n              dataKey: param?.dataKey,\n              dataPath: param?.dataPath,\n            },\n          },\n          onLoading: onLoading('offers'),\n        }).then();\n      },\n    }),\n    [actionsCreator, filterSelectors, getAll, onLoading, state.list]\n  );\n\n  useEffect(() => {\n    if (state.list.length === 0) {\n      getAll({\n        data: { refresh: true },\n        onLoading: onLoading('offers'),\n      });\n    }\n\n    // eslint-disable-next-line\n  }, []);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    // filterParams,\n    searchParams,\n  };\n};\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/dimensions/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../lang';\nimport { toOfferFormData } from '../../utils';\nimport { OfferEntity, OfferTypeEnum } from '../../types/offers/offers.types';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/measurement/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport { AppLoaderSpiner } from '../atoms/AppLoaderSpiner';\nimport { Text } from '../atoms/Text';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider } from 'Providers/Loaders/LoaderProvider';\nimport { OfferFormPropertiesArea } from '../Forms/offers/properties/OfferFormPropertiesArea';\nimport { OfferFormImagesArea } from '../Forms/offers/images/OfferFormImagesArea';\nimport { useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/categories/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\nimport { OfferPriceFormArea } from '../Forms/pricing/OfferPriceFormArea';\n\nexport interface EditOfferModalProps extends ModalFormProps {\n  copy?: boolean;\n  offer: OfferEntity;\n}\n\nconst EditOfferModal: React.FC<EditOfferModalProps> = ({ onClose, offer, copy }) => {\n  const Offer = useCurrentOffer(offer);\n  // const service = useOffersService();\n  // const router = useAppRouter();\n\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>(\n    { offer_refresh: { content: 'Refreshing...' }, offer_update: { content: 'Updating...' } },\n    {\n      formData: Offer ? toOfferFormData(Offer) : { type: OfferTypeEnum.GOODS },\n    }\n  );\n\n  const { setData, state } = loaders;\n\n  const offerId = copy ? state.formData?._id : Offer?._id;\n\n  if (!Offer) {\n    return (\n      <ModalBase title={!copy ? t('Update offer') : t('Copy offer')} fillHeight>\n        <FlexBox fillWidth fillHeight padding={'26px'} alignItems={'center'} justifyContent={'center'}>\n          <Text $size={16} $weight={600}>\n            {t('Offer not found')}\n          </Text>\n        </FlexBox>\n      </ModalBase>\n    );\n  }\n\n  return (\n    <ModalBase fillHeight title={!copy ? t('Update offer') : t('Copy offer')} onClose={onClose}>\n      <LoadersProvider value={loaders}>\n        {loaders.isLoading?.offer ? (\n          <FlexBox fillWidth padding={'24px'} alignItems={'center'} gap={16}>\n            <AppLoaderSpiner size={52} />\n\n            <Text>{t('Loading info about offer...')}</Text>\n          </FlexBox>\n        ) : (\n          <FlexBox padding={'0 8px 16px'}>\n            <OfferBaseInfoFormArea\n              _id={offerId}\n              edit={!copy}\n              type={state.formData?.type}\n              defaultValues={state?.formData}\n              onSuccess={({ data }) => {\n                setData('formData', copy ? { ...toOfferFormData(data), _id: data._id } : toOfferFormData(data));\n              }}\n            />\n\n            <OfferFormCategoriesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.categories}\n              disabled={!state.formData}\n            />\n\n            <OfferFormPropertiesArea\n              _id={offerId}\n              offer={Offer}\n              defaultValues={state.formData?.properties}\n              disabled={!state.formData}\n            />\n\n            <OfferPriceFormArea\n              expandable={true}\n              isOpen={false}\n              offer={Offer}\n              defaultState={Offer?.price}\n              price={Offer?.price}\n              title={t('Price')}\n            />\n\n            <OfferFormImagesArea\n              offer={Offer}\n              defaultValues={state?.formData?.images}\n              disabled={!state?.formData}\n              _id={offerId}\n            />\n\n            <OfferDimensionsFormArea\n              offer={Offer}\n              defaultValues={state.formData?.dimensions}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n            <OfferMeasurementFormArea\n              offer={Offer}\n              defaultValues={state.formData?.measurement}\n              disabled={copy ? !(state.formData?._id && state.formData) : !offerId}\n              _id={offerId}\n            />\n          </FlexBox>\n        )}\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default EditOfferModal;\n"],"names":["loaders","arguments","length","undefined","service","useAppServiceProvider","get","ServiceName","router","useAppRouter","modals","useModalProvider","stateMap","useOffersSelector","dataMap","useCallback","ctx","_ctx$selectedRow","currentId","selectedRow","_id","Offer","name","title","t","icon","type","onClick","getAll","data","refresh","onLoading","onRefresh","separator","disabled","navTo","concat","params","permissionId","iconSize","create","EditOfferModal","offer","getOne","onSuccess","_ref2","copy","CreateOfferModal","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","_useOffersTableSettin","useOffersTableSettings","tableConfig","isLoading","_jsx","AppGridPage","path","children","TableList","_objectSpread","offers","_ref","searchState","sortState","useLoaders","content","AppModuleName","state","filterSelectors","useProductsFilterSelectorsHook","actionsCreator","useOffersActionsCreator","_useState","useState","_useState2","_slicedToArray","sortParams","setSortParams","_useState3","_useState4","searchParams","setSearchParams","useMemo","onSubmitSearch","search","_data$param","_data$param2","param","dataPath","setValueByPath","then","tableData","list","tableTitles","offersTableColumns","offersSearchParams","offersSortParams","hasFilter","hasSearch","showFooter","checkBoxes","onTableSortChange","order","sortOrder","dataKey","useEffect","css","takeFullPlace","_templateObject2","_templateObject3","_state$formData","_loaders$isLoading","_state$formData2","_state$formData3","_state$formData4","_state$formData5","_state$formData6","_state$formData7","_state$formData8","_state$formData9","onClose","useCurrentOffer","offer_refresh","offer_update","formData","toOfferFormData","OfferTypeEnum","setData","offerId","ModalBase","fillHeight","LoadersProvider","value","_jsxs","FlexBox","fillWidth","padding","alignItems","gap","AppLoaderSpiner","size","Text","OfferBaseInfoFormArea","edit","defaultValues","OfferFormCategoriesArea","categories","OfferFormPropertiesArea","properties","OfferPriceFormArea","expandable","isOpen","defaultState","price","OfferFormImagesArea","images","OfferDimensionsFormArea","dimensions","OfferMeasurementFormArea","measurement","justifyContent","$size","$weight"],"sourceRoot":""}