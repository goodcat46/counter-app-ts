{"version":3,"file":"static/js/449.6adf513d.chunk.js","mappings":"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","sources":["hooks/useProductsFilterSelectors.hook.ts","hooks/useProductsActionsCreator.hook.ts","components/AppPages/PageProducts.tsx","components/AppPages/pagesStyles.tsx","components/Forms/FormCreateProduct.tsx"],"sourcesContent":["import { FilterSelectorType } from 'components/Filter/AppFilter';\nimport { IProduct } from '../redux/products/products.types';\n\nconst useStorageFilterSelectors = (): FilterSelectorType<keyof IProduct>[] => {\n  return [\n    // {\n    //   label: 'Рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок OUT',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountOut',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'countIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Суб-рахунок IN',\n    //   data: dirCounts.directory,\n    //   selectorName: 'subCountIn',\n    //   dirType: ApiDirType.COUNTS,\n    // },\n    // {\n    //   label: 'Категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'category',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n    // {\n    //   label: 'Під-категорії',\n    //   data: dirCategories.directory,\n    //   selectorName: 'subCategory',\n    //   dirType: ApiDirType.CATEGORIES_TR,\n    // },\n  ];\n};\nexport default useStorageFilterSelectors;\n","import { useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { useCallback } from 'react';\nimport { TableActionCreator } from '../components/TableList/tableTypes.types';\nimport { IProduct, ProductTypeEnum } from '../redux/products/products.types';\nimport { useProductsSelector } from '../redux/selectors.store';\nimport FormCreateProduct from '../components/Forms/FormCreateProduct';\nimport { omit } from 'lodash';\nimport { productsFilterOptions } from '../data/directories.data';\nimport { useNavigate } from 'react-router-dom';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { ToastService } from '../services';\n\nexport type ProductsActionsCreator = TableActionCreator<IProduct>;\n\nconst useProductsActionsCreator = (): ProductsActionsCreator => {\n  const service = useAppServiceProvider()[ServiceName.products];\n  const navigate = useNavigate();\n  const state = useProductsSelector();\n  const modals = useModalProvider();\n  // const onSubmitCreateWrapper = useCallback(\n  //   (onCloseModal: () => void) => {\n  //     return (data: ITransactionReqData, options: AfterFormSubmitOptions,) => {\n  //       service.create({\n  //         data,\n  //         onSuccess(d) {\n  //           toast.success(`Сторено транзакцію на суму: ${d.amount}`);\n  //           options?.close && onCloseModal();\n  //         },\n  //       });\n  //     };\n  //   },\n  //   [service]\n  // );\n\n  return useCallback(\n    ctx => [\n      {\n        name: 'reviewProduct',\n        title: 'Перегляд продукту',\n        icon: 'openInNew',\n        disabled: !ctx.selectedRow?._id,\n        type: 'onlyIcon',\n        onClick: () => {\n          ctx.selectedRow?._id && navigate(ctx.selectedRow?._id);\n          // modals.handleOpenModal({\n          //   ModalChildren: ProductOverview,\n          //   modalChildrenProps: {\n          //     title: 'Перегляд продукту',\n          //     product: state.products.find(el => el._id === ctx.selectedRow?._id),\n          //     // filterOptions: productsFilterOptions,\n          //     // defaultOption: StorageItemTypeFilterOptions.findIndex(el => el.value === product?.type),\n          //     // onSubmit: data => {\n          //     //   service.updateById({\n          //     //     data,\n          //     //     onSuccess(d) {},\n          //     //   });\n          //     // },\n          //   },\n          // });\n        },\n      },\n      {\n        name: 'editProduct',\n        title: 'Змінити',\n        icon: 'edit',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: () => {\n          const product = state.products.find(p => p._id === ctx?.selectedRow?._id);\n\n          const modal = modals.handleOpenModal({\n            ModalChildren: FormCreateProduct,\n            modalChildrenProps: {\n              title: 'Копіювати',\n              _id: ctx?.selectedRow?._id,\n              filterOptions: productsFilterOptions,\n              defaultState: omit(product, ['_id', 'createdAt', 'updatedAt']),\n              onSubmit: (data, o) => {\n                service.updateById({\n                  data,\n                  onSuccess(d) {\n                    o?.closeAfterSave && modal?.onClose();\n                    ToastService.success(`Product updated`);\n                  },\n                  onError: e => {\n                    console.error('Product apdate action', e);\n                  },\n                });\n              },\n              fillHeight: true,\n            },\n          });\n        },\n      },\n      {\n        name: 'copyProduct',\n        title: 'Копіювати',\n        icon: 'copy',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: !ctx?.selectedRow?._id,\n        onClick: () => {\n          const product = state.products.find(p => p._id === ctx?.selectedRow?._id);\n\n          const modal = modals.handleOpenModal({\n            ModalChildren: FormCreateProduct,\n            modalChildrenProps: {\n              title: 'Змінити',\n              filterOptions: productsFilterOptions,\n              defaultState: omit(product, ['createdAt', 'updatedAt']),\n              onSubmit: (data, o) => {\n                service.updateById({\n                  data,\n                  onSuccess(d) {\n                    o?.closeAfterSave && modal?.onClose();\n                  },\n                });\n              },\n              fillHeight: true,\n            },\n          });\n        },\n      },\n      {\n        name: 'archiveProduct',\n        title: 'Архів',\n        icon: 'archive',\n        iconSize: '90%',\n        type: 'onlyIcon',\n        disabled: true,\n      },\n      { separator: true },\n      {\n        name: 'createProduct',\n        title: 'Новий',\n        icon: 'plus',\n        iconSize: '90%',\n        type: 'onlyIconFilled',\n        disabled: false,\n        onClick: () => {\n          const modal = modals.handleOpenModal({\n            ModalChildren: FormCreateProduct,\n            modalChildrenProps: {\n              title: 'Створити',\n              filterOptions: productsFilterOptions,\n              defaultState: { type: ProductTypeEnum.GOODS },\n              onSubmit: (data, o) => {\n                service.create({\n                  data,\n                  onSuccess(d) {\n                    o?.closeAfterSave && modal?.onClose();\n                  },\n                });\n              },\n              fillHeight: true,\n            },\n          });\n        },\n      },\n    ],\n\n    [modals, navigate, service, state.products]\n  );\n};\n\nexport default useProductsActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport { productsColumns, transactionsSearchParams } from 'data';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useProductsSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { IProduct } from '../../redux/products/products.types';\nimport useStorageServiceHook from '../../hooks/useProductsService.hook';\nimport { PagePathType } from '../../data/pages.data';\nimport useProductsFilterSelectorsHook from '../../hooks/useProductsFilterSelectors.hook';\nimport useProductsActionsCreator from '../../hooks/useProductsActionsCreator.hook';\n\ntype Props = {\n  path: PagePathType;\n};\n\nexport const useProductsTableSettings = () => {\n  const service = useStorageServiceHook();\n  const state = useProductsSelector();\n  const { getAll } = service;\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useProductsActionsCreator();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IProduct> => ({\n      tableData: state.products,\n      tableTitles: productsColumns,\n      tableSortParams: transactionsSearchParams.filter(el => el.sort),\n      filterSelectors,\n      isFilter: true,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, filterSelectors, getAll, sortParams, state.products]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.products.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, getAll, isLoading, sortParams, state.products.length, tableConfig]);\n\n  return {\n    tableConfig,\n    isLoading,\n    sortParams,\n    filterParams,\n  };\n};\nconst PageProducts: React.FC<any> = (props: Props) => {\n  const { getAll } = useStorageServiceHook();\n  const state = useProductsSelector();\n  const filterSelectors = useProductsFilterSelectorsHook();\n  const actionsCreator = useProductsActionsCreator();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IProduct> => ({\n      tableData: state.products,\n      tableTitles: productsColumns,\n      tableSortParams: transactionsSearchParams.filter(el => el.sort),\n      filterSelectors,\n      isFilter: true,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, filterSelectors, getAll, sortParams, state.products]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.products.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.products.length]);\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageProducts;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import * as React from 'react';\nimport { useMemo } from 'react';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\nimport CustomSelect from '../atoms/Inputs/CustomSelect/CustomSelect';\nimport { useAppSelector } from '../../redux/store.store';\nimport FlexBox from '../atoms/FlexBox';\nimport t from '../../lang';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\nimport { useAppForm } from '../../hooks';\nimport { IProductFormData, IProductReqData, ProductFilterOpt } from '../../redux/products/products.types';\nimport { createDataForReq } from '../../utils/dataTransform';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\n\nexport interface FormCreateProductProps extends Omit<ModalFormProps<any, any, IProductFormData>, 'onSubmit'> {\n  copy?: boolean;\n  id?: string;\n  edit?: boolean;\n  _id?: string;\n  onSubmit?: AppSubmitHandler<IProductReqData>;\n  filterOptions?: ProductFilterOpt[];\n  defaultState?: IProductFormData;\n  addInputs?: boolean;\n}\n\nconst FormCreateProduct: React.FC<FormCreateProductProps> = ({\n  edit,\n  _id,\n  onSubmit,\n  copy,\n  defaultState,\n  addInputs,\n  ...props\n}) => {\n  const {\n    directories: { directories },\n    products: { properties },\n  } = useAppSelector();\n  const {\n    formState: { errors },\n    formValues,\n    register,\n    setValue,\n    registerSelect,\n    handleSubmit,\n    toggleAfterSubmitOption,\n    closeAfterSave,\n    clearAfterSave,\n  } = useAppForm<IProductFormData>({\n    defaultValues: defaultState,\n  });\n  const categories = useMemo(() => {\n    return directories[ApiDirType.CATEGORIES_PROD].filter(el => el.type === formValues.type);\n  }, [directories, formValues.type]);\n  // TODO eventDate: formatDateForInputValue(defaultState?.eventDate)\n  function onValidSubmit(submitData: IProductFormData) {\n    const omitPathArr: (keyof IProductFormData)[] = [];\n\n    const productForSubmit = createDataForReq(submitData, omitPathArr);\n\n    onSubmit &&\n      onSubmit(\n        { _id, data: productForSubmit },\n        {\n          closeAfterSave,\n          clearAfterSave,\n        }\n      );\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={handleSubmit(onValidSubmit, data => console.log(data))}\n      onOptSelect={({ value }) => value && setValue('type', value)}\n      extraFooter={\n        <FormAfterSubmitOptions\n          toggleOption={toggleAfterSubmitOption}\n          closeAfterSave={closeAfterSave}\n          clearAfterSave={clearAfterSave}\n        />\n      }\n    >\n      <FlexBox className={'inputs'} flex={'1'} fillWidth maxHeight={'100%'} padding={'12px'} overflow={'auto'}>\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <InputLabel label={t('sku')} direction={'vertical'} error={errors.sku}>\n          <InputText placeholder={t('sku')} {...register('sku', { max: 120 })} />\n        </InputLabel>\n\n        <CustomSelect\n          treeMode\n          {...registerSelect('category', {\n            label: t('category'),\n            placeholder: t('category'),\n            required: true,\n            options: categories,\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('brand', {\n            options: directories[ApiDirType.BRANDS],\n            label: t('brand'),\n            placeholder: t('selectBrand'),\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('template', {\n            options: properties,\n            label: t('variationsTemplate'),\n            placeholder: t('selectVariationsTemplate'),\n          })}\n        />\n\n        <InputLabel label={t('status')} direction={'vertical'} error={errors.status} disabled>\n          <InputText placeholder={t('status')} {...register('status')} disabled />\n        </InputLabel>\n\n        <InputLabel label={'Штрих-код'} direction={'vertical'} error={errors.barCode}>\n          <InputText placeholder={'Штрих-код'} {...register('barCode')} />\n        </InputLabel>\n\n        <InputLabel label={'Одиниці виміру'} direction={'vertical'} error={errors.unitsOfMeasurement} disabled>\n          <InputText placeholder={'Одиниці виміру'} {...register('unitsOfMeasurement')} disabled />\n        </InputLabel>\n\n        <InputLabel label={t('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={t('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\n// const GridWrapper = styled.div<{ gridTemplateColumns?: string }>`\n//   display: grid;\n//   grid-template-columns: ${({ gridTemplateColumns }) => gridTemplateColumns || '1fr 120px'};\n//   gap: 12px;\n// `;\n\nexport default FormCreateProduct;\n// const optionalSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .nullable()\n//   .optional();\n// const requiredSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .required();\n//\n// const getValidation = (type: TransactionType) =>\n//   yup.object().shape({\n//     category: requiredSelectItem,\n//   });\n"],"names":["service","useAppServiceProvider","ServiceName","navigate","useNavigate","state","useProductsSelector","modals","useModalProvider","useCallback","ctx","_ctx$selectedRow","_ctx$selectedRow4","_ctx$selectedRow7","name","title","icon","disabled","selectedRow","_id","type","onClick","_ctx$selectedRow2","_ctx$selectedRow3","iconSize","_ctx$selectedRow6","product","products","find","p","_ctx$selectedRow5","modal","handleOpenModal","ModalChildren","FormCreateProduct","modalChildrenProps","filterOptions","productsFilterOptions","defaultState","omit","onSubmit","data","o","updateById","onSuccess","d","closeAfterSave","onClose","ToastService","onError","e","console","error","fillHeight","_ctx$selectedRow8","separator","ProductTypeEnum","create","useProductsTableSettings","useStorageServiceHook","getAll","filterSelectors","useProductsFilterSelectorsHook","actionsCreator","useProductsActionsCreator","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","tableTitles","productsColumns","tableSortParams","transactionsSearchParams","el","sort","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","refresh","query","onLoading","then","handleTableSort","param","sortOrder","dataPath","useEffect","length","Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_jsx","AppGridPage","path","children","TableList","_objectSpread","css","takeFullPlace","_templateObject2","_templateObject3","_ref","edit","copy","addInputs","_objectWithoutProperties","_excluded","_useAppSelector","useAppSelector","directories","properties","_useAppForm","useAppForm","defaultValues","errors","formState","formValues","register","setValue","registerSelect","handleSubmit","toggleAfterSubmitOption","clearAfterSave","categories","ApiDirType","filter","ModalForm","submitData","productForSubmit","createDataForReq","log","onOptSelect","_ref2","value","extraFooter","FormAfterSubmitOptions","toggleOption","_jsxs","FlexBox","className","flex","fillWidth","maxHeight","padding","overflow","InputLabel","label","t","direction","required","InputText","placeholder","autoFocus","sku","max","CustomSelect","treeMode","options","status","barCode","unitsOfMeasurement","description","TextareaPrimary"],"sourceRoot":""}