{"version":3,"file":"static/js/800.fd568b03.chunk.js","mappings":"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","sources":["components/AppPages/customers/PageCustomers.tsx","components/AppPages/pagesStyles.tsx","redux/customers/customers.types.ts","components/Forms/FormCreateCustomer.tsx","components/atoms/CheckboxesListSelector.tsx","data/customers.data.ts"],"sourcesContent":["import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { ISortParams } from '../../../api';\nimport { FilterReturnDataType } from '../../Filter/AppFilter';\nimport { Path } from 'react-hook-form';\nimport { ICustomer, ICustomerBase } from '../../../redux/customers/customers.types';\nimport { customersColumns } from '../../../data/customers.data';\nimport { BaseAppPageProps } from '../index';\nimport { ServiceName, useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { useCustomersSelector } from '../../../redux/selectors.store';\nimport { useModalService } from '../../ModalProvider/ModalProvider';\nimport FormCreateCustomer from '../../Forms/FormCreateCustomer';\nimport _ from 'lodash';\nimport { createDataForReq } from '../../../utils/dataTransform';\nimport { ToastService } from '../../../services';\n\ninterface Props extends BaseAppPageProps {}\n\nexport type UseTableForm<TData = any> = FilterReturnDataType & {\n  sortKey?: Path<TData>;\n  sortOrder?: 'DESC' | 'ACS';\n  search?: string;\n  searchKey?: Path<TData>;\n};\n\nconst PageCustomers: React.FC<Props> = (props: Props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const modalS = useModalService();\n  const state = useCustomersSelector();\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n  const service = useAppServiceProvider()[ServiceName.customers];\n\n  const tableConfig = useMemo(\n    (): ITableListProps<ICustomer> => ({\n      tableData: state.customers,\n      tableTitles: customersColumns,\n      isFilter: true,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator: ctx => {\n        const selected = ctx?.selectedRow;\n        return [\n          {\n            icon: 'refresh',\n            onClick: () => {\n              service.getAll({ data: { refresh: true, params: {} } });\n            },\n          },\n          { separator: true },\n          {\n            icon: 'edit',\n            type: 'onlyIcon',\n            onClick: () => {\n              const m = modalS.open({\n                ModalChildren: FormCreateCustomer,\n                modalChildrenProps: {\n                  defaultState: state.customers.find(c => c._id === selected?._id),\n\n                  onSubmit: d => {\n                    service.update({\n                      data: { data: { data: createDataForReq(d), _id: selected?._id }, refresh: true },\n                      onSuccess: (data, meta) => {\n                        console.log('edit customer P', data);\n                        m?.onClose && m?.onClose();\n                      },\n                    });\n                  },\n                },\n              });\n            },\n          },\n          { separator: true },\n          {\n            icon: 'plus',\n            type: 'onlyIconFilled',\n            onClick: () => {\n              const m = modalS.open({\n                ModalChildren: FormCreateCustomer,\n                modalChildrenProps: {\n                  withReferer: true,\n                  onSubmit: d => {\n                    service.create({\n                      data: {\n                        data: d?.referrer?._id ? createDataForReq(d) : createDataForReq(_.omit(d, ['referrer'])),\n                      },\n                      onSuccess: data => {\n                        ToastService.success(`New user created: ${data?.email}`);\n                        m?.onClose && m?.onClose();\n                      },\n                    });\n                  },\n                },\n              });\n            },\n          },\n        ];\n      },\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        // getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        // getAll({\n        //   data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n        //   onLoading: setIsLoading,\n        // }).then();\n      },\n    }),\n    [modalS, service, state.customers]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.customers.length === 0) {\n        service.getAll({\n          data: { refresh: true, params: {} },\n          onLoading: setIsLoading,\n        });\n      }\n    }\n  }, [filterParams, service, sortParams, state.customers.length]);\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PageCustomers;\n\nexport const useCustomersTableSettings = () => {\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<ICustomerBase> => ({\n      isFilter: true,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        // getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        // getAll({\n        //   data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n        //   onLoading: setIsLoading,\n        // }).then();\n      },\n    }),\n    []\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      // if (state.products.length === 0) {\n      //   getAll({\n      //     data: { refresh: true },\n      //     onLoading: setIsLoading,\n      //   });\n      // }\n    }\n  }, [filterParams, sortParams, tableConfig]);\n\n  return {\n    tableConfig,\n    sortParams,\n    filterParams,\n  };\n};\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { AppQueryParams } from '../../api';\nimport {\n  AddressDto,\n  ContactsDto,\n  IAddressSlot,\n  IBase,\n  IContactsSlot,\n  IFormDataValueWithUUID,\n  OnlyUUID,\n} from '../global.types';\nimport { IOrder } from '../orders/orders.types';\nimport { BusinessSubjectTypeEnum } from '../companies/companies.types';\n\nexport enum CustomerTypeEnum {\n  active = 'active',\n}\n\nexport enum EngagementSource {\n  facebook = 'facebook',\n  instagram = 'instagram',\n  referralSystem = 'referralSystem',\n  another = 'another',\n}\nexport interface ICustomerBase extends IBase {\n  label?: string;\n  name?: string;\n  secondName?: string;\n  email?: string;\n  phone?: string;\n  age?: string;\n  taxCode?: string;\n  personalTaxCode?: string;\n  type?: CustomerTypeEnum;\n  businessType?: BusinessSubjectTypeEnum;\n\n  birthDate?: string | number | Date;\n  avatarURL?: string;\n  tags?: string[];\n\n  engagementSource?: EngagementSource;\n}\nexport interface ICustomer extends ICustomerBase {\n  orders?: IOrder[];\n\n  referer?: ICustomer;\n  referrals?: ICustomer[];\n\n  addresses?: IContactsSlot[];\n  contacts?: IAddressSlot[];\n}\n\nexport interface ICustomerDto extends Omit<ICustomerBase, '_id' | 'createdAt' | 'updatedAt' | 'deletedAt'> {\n  referrer?: OnlyUUID;\n}\n\nexport interface ICustomerFormData extends ICustomerDto {\n  referrer?: IFormDataValueWithUUID;\n\n  addresses?: ContactsDto[];\n  contacts?: AddressDto[];\n}\n\nexport interface ICustomerReqDta {\n  _id?: string;\n  data?: ICustomerDto;\n  params?: AppQueryParams;\n}\n","import { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport { EngagementSource, ICustomerFormData } from '../../redux/customers/customers.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport { t } from '../../lang';\nimport styled from 'styled-components';\nimport FlexBox from '../atoms/FlexBox';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport ButtonsGroup from '../atoms/ButtonsGroup';\nimport { businessSubjectTypeFilterOptions } from '../../data/companies.data';\nimport { useForm } from 'react-hook-form';\nimport ButtonIcon from '../atoms/ButtonIcon/ButtonIcon';\nimport CheckboxesListSelector from '../atoms/CheckboxesListSelector';\nimport { enumToFilterOptions } from '../../utils/fabrics';\nimport { useMemo } from 'react';\nimport { ConfigService } from '../../services';\nimport { BusinessSubjectTypeEnum } from '../../redux/companies/companies.types';\nimport _ from 'lodash';\n\nconst isDevMode = ConfigService.isDevMode();\n\nexport interface FormCreateCustomerProps extends Omit<ModalFormProps<any, any, ICustomerFormData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<ICustomerFormData>;\n  withReferer?: boolean;\n}\n\nconst engagementSourceOptions = enumToFilterOptions(EngagementSource);\nconst FormCreateCustomer: React.FC<FormCreateCustomerProps> = ({\n  defaultState,\n  withReferer,\n  onSubmit,\n  onClose,\n  ...p\n}) => {\n  const { register, setValue, handleSubmit, watch } = useForm<ICustomerFormData>({\n    defaultValues: { ...defaultState, businessType: BusinessSubjectTypeEnum.company },\n  });\n  const formValues = watch();\n\n  const isEditMode = useMemo(() => !!defaultState?.email, [defaultState?.email]);\n\n  const onValid = (fData: ICustomerFormData) => {\n    onSubmit && onSubmit(_.omit(fData, isEditMode ? ['engagementSource', 'email'] : ['engagementSource']));\n  };\n\n  return (\n    <ModalForm {...p} title={p.title ? p.title : t('Create customer')} onSubmit={handleSubmit(onValid)}>\n      <Inputs padding={'0 8px 8px'}>\n        <InputLabel label={t('type')} required>\n          <ButtonsGroup\n            options={businessSubjectTypeFilterOptions}\n            onSelect={info => {\n              setValue('businessType', info?.value);\n            }}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('name')} required>\n          <InputText placeholder={t('name')} {...register('name')} required />\n        </InputLabel>\n\n        <InputLabel label={t('secondName')}>\n          <InputText placeholder={t('secondName')} {...register('secondName')} />\n        </InputLabel>\n\n        <InputLabel label={t('email')} disabled={isEditMode} required>\n          <InputText\n            placeholder={t('email')}\n            type={'email'}\n            {...register('email', { required: true })}\n            disabled={isEditMode}\n            required\n          />\n        </InputLabel>\n\n        <InputLabel label={t('phone')}>\n          <InputText placeholder={t('phone')} {...register('phone')} />\n        </InputLabel>\n\n        <InputLabel label={t('Birth date')}>\n          <InputText placeholder={t('Birth date')} {...register('birthDate')} type={'datetime-local'} />\n        </InputLabel>\n\n        {withReferer && isDevMode && (\n          <InputLabel label={t('Referrer id')}>\n            <InputText placeholder={t('Referrer id')} {...register('referrer._id')} />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('Source')}>\n          <CheckboxesListSelector\n            disabled\n            options={engagementSourceOptions}\n            currentOption={{ value: formValues?.engagementSource }}\n            onChangeIndex={i => {\n              setValue('engagementSource', engagementSourceOptions[i].value);\n            }}\n          />\n        </InputLabel>\n\n        {formValues?.engagementSource === EngagementSource.referralSystem && (\n          <FlexBox gap={8} fillWidth>\n            <InputLabel label={t('Referrer')} required>\n              <InputText placeholder={t('Referrer')} type={'email'} required />\n            </InputLabel>\n\n            <FlexBox fxDirection={'row'} fillWidth gap={8} padding={'8px 0'}>\n              <ButtonIcon variant={'defOutlinedSmall'}>{t('Clear referrer')}</ButtonIcon>\n              <ButtonIcon variant={'outlinedSmall'} flex={1}>\n                {t('Select referrer')}\n              </ButtonIcon>\n            </FlexBox>\n          </FlexBox>\n        )}\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled(FlexBox)``;\nexport default FormCreateCustomer;\n","import { FilterOption } from '../ModalForm/ModalFilter';\nimport { useEffect, useState } from 'react';\nimport { checks } from '../../utils';\nimport FlexBox from './FlexBox';\nimport CheckBox from '../TableList/TebleCells/CellComponents/CheckBox';\nimport { Text } from './Text';\n\nexport interface CheckboxesListOption<V = any> extends Partial<FilterOption<V>> {\n  description?: string;\n}\n\nexport type CheckboxesListOnChangeHandler = (ids: string[]) => void;\n\nconst CheckboxesListSelector = <V = any,>({\n  options,\n  onChangeIndex,\n  currentIndex,\n  currentOption,\n  multiple,\n  onChange,\n  value,\n  disabled,\n  disabledCheck,\n}: {\n  onChangeIndex?: (index: number) => void;\n  onChange?: CheckboxesListOnChangeHandler;\n  options?: CheckboxesListOption<V>[];\n  currentIndex?: number;\n  currentOption?: CheckboxesListOption<V>;\n  value?: string[];\n  multiple?: boolean;\n  disabled?: boolean;\n  disabledCheck?: (option: CheckboxesListOption<V>, index: number) => boolean;\n}) => {\n  const [current, setCurrent] = useState(0);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  const handleSelect = (id: string) => {\n    if (multiple) {\n      setSelectedIds(p => {\n        const newValue = selectedIds.includes(id) ? p.filter(el => el !== id) : [...p, id];\n        onChange && onChange(newValue);\n        return newValue;\n      });\n    } else {\n      setSelectedIds([id]);\n      onChange && onChange([id]);\n    }\n  };\n  const handleSetCurrent = (idx: number) => {\n    setCurrent(idx);\n    onChangeIndex && onChangeIndex(idx);\n  };\n\n  useEffect(() => {\n    if (!checks.isUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    if (multiple) return;\n    if (!checks.isUnd(currentOption) && !checks.isUnd(options)) {\n      setCurrent(options.findIndex(o => o?.value === currentOption?.value || o?._id === currentOption?._id));\n    }\n  }, [currentOption, multiple, options]);\n\n  useEffect(() => {\n    if (!multiple) return;\n    if (!checks.isUnd(value) && checks.isArray(value)) {\n      setSelectedIds(value);\n    }\n  }, [multiple, value]);\n  return (\n    <FlexBox fillWidth gap={8}>\n      {options?.map((o, idx) => {\n        const isDisabled = disabledCheck ? disabledCheck(o, idx) : disabled;\n\n        return (\n          <FlexBox\n            key={`m-opt_${o.value}`}\n            fxDirection={'row'}\n            gap={8}\n            padding={'2px 4px'}\n            alignItems={'center'}\n            style={{ opacity: isDisabled ? 0.7 : 1, pointerEvents: isDisabled ? 'none' : 'all' }}\n            onClick={() => {\n              if (isDisabled) return;\n              handleSetCurrent(idx);\n              o?._id && handleSelect(o?._id);\n            }}\n          >\n            <CheckBox\n              checked={(o?._id && selectedIds.includes(o?._id)) || idx === current}\n              size={'22px'}\n              disabled={isDisabled}\n            />\n\n            <Text>{o?.label}</Text>\n          </FlexBox>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default CheckboxesListSelector;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { ICustomer } from '../redux/customers/customers.types';\nimport { t } from '../lang';\n\nexport const customersColumns: CellTittleProps<ICustomer>[] = [\n  {\n    top: {\n      name: `${t('label')}/${t('name')}`,\n      getData: d => d?.label || `${d?.name || '---'} ${d?.secondName || '---'}`,\n    },\n    bottom: { name: 'ІПН/ЄДРПОУ', getData: d => (d.personalTaxCode || '---') + '/' + (d.taxCode || '---') },\n    width: '240px',\n    action: 'doubleDataWithAvatar',\n  },\n  {\n    top: { name: 'Тип', path: 'type', getData: d => d?.type },\n    bottom: { name: 'Статус', path: 'status' },\n    width: '120px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Емейл', path: 'email', uppercase: false },\n    bottom: { name: 'Телефон', path: 'phone' },\n    width: '170px',\n    action: 'contacts',\n  },\n  {\n    top: { name: 'Локація' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Теги', path: 'tags' },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: 'Коментар', path: 'description' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Створено', align: 'center', path: 'createdAt' },\n    bottom: { name: 'Оновлено', align: 'center', path: 'updatedAt' },\n    width: '150px',\n    action: 'dateSimple',\n  },\n];\n"],"names":["Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","props","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","modalS","useModalService","state","useCustomersSelector","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","service","useAppServiceProvider","ServiceName","tableConfig","useMemo","tableData","customers","tableTitles","customersColumns","isFilter","isSearch","footer","checkBoxes","actionsCreator","ctx","selected","selectedRow","icon","onClick","getAll","data","refresh","params","separator","type","m","open","ModalChildren","FormCreateCustomer","modalChildrenProps","defaultState","find","c","_id","onSubmit","d","update","createDataForReq","onSuccess","meta","console","log","onClose","withReferer","_d$referrer","create","referrer","_","ToastService","concat","email","onFilterSubmit","handleTableSort","param","sortOrder","dataPath","useEffect","length","onLoading","_jsx","AppGridPage","path","children","TableList","_objectSpread","useCustomersTableSettings","_useState7","_useState8","_useState9","_useState10","css","takeFullPlace","_templateObject2","_templateObject3","EngagementSource","isDevMode","ConfigService","engagementSourceOptions","enumToFilterOptions","Inputs","FlexBox","_ref","p","_objectWithoutProperties","_excluded","_useForm","useForm","defaultValues","businessType","BusinessSubjectTypeEnum","register","setValue","handleSubmit","formValues","watch","isEditMode","ModalForm","title","t","fData","_jsxs","padding","InputLabel","label","required","ButtonsGroup","options","businessSubjectTypeFilterOptions","onSelect","info","value","InputText","placeholder","disabled","CheckboxesListSelector","currentOption","engagementSource","onChangeIndex","i","referralSystem","gap","fillWidth","fxDirection","ButtonIcon","variant","flex","currentIndex","multiple","onChange","disabledCheck","current","setCurrent","selectedIds","setSelectedIds","checks","findIndex","o","map","idx","isDisabled","alignItems","style","opacity","pointerEvents","id","handleSetCurrent","newValue","includes","filter","el","_toConsumableArray","CheckBox","checked","size","Text","top","name","getData","secondName","bottom","personalTaxCode","taxCode","width","action","uppercase","align"],"sourceRoot":""}