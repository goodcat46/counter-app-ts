{"version":3,"file":"static/js/450.80cc7408.chunk.js","mappings":"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","sources":["components/Forms/FormProduct/FormProductStaticProperties.tsx","components/Forms/FormProduct/components/DimensionsInputs.tsx","components/Forms/FormProduct/components/MeasuremenInputs.tsx","components/Forms/FormProduct/FormCreateProduct.tsx"],"sourcesContent":["import { IPropertyValue, IVariationTemplate } from '../../../redux/products/properties.types';\nimport { IFormDataValueWithUUID } from '../../../redux/global.types';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport FlexBox from '../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { Text } from '../../atoms/Text';\n\nexport interface FormProductStaticPropertiesProps {\n  template?: IVariationTemplate;\n  formData?: IFormDataValueWithUUID[];\n  onSelect?: (id: string, option?: IPropertyValue) => void;\n  onChange?: (ids: string[]) => void;\n  children?: React.ReactNode;\n  defaultData?: string[];\n}\nconst FormProductStaticProperties: React.FC<FormProductStaticPropertiesProps> = ({\n  children,\n  onSelect,\n  onChange,\n  template,\n  defaultData,\n}) => {\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (defaultData) {\n      setSelectedIds(defaultData);\n    }\n  }, [defaultData]);\n\n  const handleSelect = useCallback(\n    (id: string, option?: IPropertyValue) => {\n      setSelectedIds(p => {\n        const newData = p.includes(id) ? p.filter(el => el !== id) : [...p, id];\n        onSelect && onSelect(id);\n        onChange && onChange(newData);\n        return newData;\n      });\n    },\n    [onChange, onSelect]\n  );\n\n  const currentTemplateData = useMemo(() => {\n    return template?.childrenList?.filter(props => !props.isSelectable);\n  }, [template?.childrenList]);\n\n  const renderProperties = useMemo(() => {\n    return currentTemplateData?.map(item => {\n      return (\n        <PropertyBox key={`prop-${item?._id}`} gap={8} fillWidth padding={'8px 0'}>\n          <Text $weight={500} $size={12} style={{ marginInline: 8 }}>\n            {item?.label}\n          </Text>\n\n          <FlexBox fillWidth gap={8} fxDirection={'row'} flexWrap={'wrap'}>\n            {item?.childrenList?.map(value => (\n              <ButtonIcon\n                key={`prop-value-${value?._id}`}\n                variant={selectedIds.includes(value?._id) ? 'filledSmall' : 'outlinedSmall'}\n                onClick={() => {\n                  handleSelect(value?._id);\n                }}\n              >\n                {value?.label}\n              </ButtonIcon>\n            ))}\n          </FlexBox>\n        </PropertyBox>\n      );\n    });\n  }, [currentTemplateData, handleSelect, selectedIds]);\n\n  return (\n    <Container fillWidth>\n      <FlexBox padding={'8px 8px 0'}>\n        <Text $size={14} $weight={600}>\n          {'Доступні харктеристики'}\n        </Text>\n      </FlexBox>\n\n      {children && (\n        <FlexBox fillWidth padding={'6px 0'}>\n          {children}\n        </FlexBox>\n      )}\n\n      {renderProperties}\n    </Container>\n  );\n};\nconst Container = styled(FlexBox)`\n  margin: 8px 0 0;\n  border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  border-bottom: 1px solid ${p => p.theme.sideBarBorderColor};\n`;\nconst PropertyBox = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  //border-bottom: 1px solid ${p => p.theme.sideBarBorderColor};\n`;\nexport default FormProductStaticProperties;\n","import { IProductDimensions } from '../../../../redux/products/products.types';\nimport { t } from '../../../../lang';\nimport * as React from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport styled from 'styled-components';\nimport { UseFormReturn } from 'react-hook-form/dist/types';\n\nexport interface DimensionsFormData {\n  dimensions?: IProductDimensions;\n}\n\nexport const dimensionsInputsProps: {\n  label?: string;\n  placeholder?: string;\n  name: keyof IProductDimensions;\n}[] = [\n  { name: 'height', label: t('Height'), placeholder: t('Sm') },\n  { name: 'width', label: t('Width'), placeholder: t('Sm') },\n  { name: 'length', label: t('Length'), placeholder: t('Sm') },\n  { name: 'weight', label: t('Weight'), placeholder: t('Kg') },\n];\n\nconst DimensionsInputs = ({ form }: { form: UseFormReturn<DimensionsFormData> }) => {\n  return (\n    <Box fillWidth>\n      {dimensionsInputsProps.map(input => {\n        return (\n          <InputLabel key={input.name} label={input.label}>\n            <InputText\n              placeholder={input.placeholder}\n              min={1}\n              type={'number'}\n              {...form.register(`dimensions.${input.name}`, {\n                valueAsNumber: true,\n                min: 1,\n              })}\n            />\n          </InputLabel>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 8px;\n\n  @media screen and (min-width: 480px) and (max-width: 768px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nexport default DimensionsInputs;\n","import { Path } from 'react-hook-form';\nimport { IProductMeasurement, MeasurementUnit } from '../../../../redux/products/products.types';\nimport { FilterOption } from '../../../ModalForm/ModalFilter';\nimport { enumToFilterOptions } from '../../../../utils/fabrics';\nimport CustomSelect from '../../../atoms/Inputs/CustomSelect/CustomSelect';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport FlexBox from '../../../atoms/FlexBox';\nimport * as React from 'react';\nimport { UseAppFormReturn } from '../../../../hooks/useAppForm.hook';\nimport { t } from '../../../../lang';\n\nexport interface MeasurementInputsFormData {\n  measurement?: IProductMeasurement;\n}\nconst productsMeasurementUnitOptions = enumToFilterOptions(MeasurementUnit);\n\nconst measurementInputs: {\n  label?: string;\n  placeholder?: string;\n  name: Path<MeasurementInputsFormData>;\n  type?: HTMLInputElement['type'];\n  options?: FilterOption[];\n}[] = [\n  { name: 'measurement.unit', label: t('unit'), placeholder: t('unit'), options: productsMeasurementUnitOptions },\n  { name: 'measurement.min', label: t('min'), placeholder: t('min'), type: 'number' },\n  { name: 'measurement.max', label: t('max'), placeholder: t('max'), type: 'number' },\n  // { name: 'measurement.step', label: t('step'), placeholder: t('step'), type: 'number' },\n];\n\nconst MeasurementInputs = ({ appForm }: { appForm: UseAppFormReturn<MeasurementInputsFormData> }) => {\n  return (\n    <FlexBox fillWidth style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', columnGap: 8 }}>\n      {measurementInputs.map(input => {\n        return input.options ? (\n          <CustomSelect\n            key={input.name}\n            {...appForm.registerSelect(input?.name, {\n              options: input?.options,\n              label: input?.label,\n              placeholder: input?.label,\n              dropDownIsAbsolute: true,\n              onlyValue: true,\n            })}\n          />\n        ) : (\n          <InputLabel key={input.name} label={input.label} error={appForm?.formState?.errors[input.name as never]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={input?.type === 'number' ? 1 : undefined}\n              type={input?.type}\n              {...appForm.register(input.name, {\n                valueAsNumber: input?.type === 'number',\n                min: input?.type === 'number' ? 1 : undefined,\n              })}\n            />\n          </InputLabel>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default MeasurementInputs;\n","import * as React from 'react';\nimport { useMemo } from 'react';\nimport ModalForm, { ModalFormProps } from '../../ModalForm';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport TextareaPrimary from '../../atoms/Inputs/TextareaPrimary';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect/CustomSelect';\nimport { useAppSelector } from '../../../redux/store.store';\nimport FlexBox from '../../atoms/FlexBox';\nimport { t } from '../../../lang';\nimport { ApiDirType } from '../../../redux/APP_CONFIGS';\nimport { useAppForm } from '../../../hooks';\nimport {\n  IProductFormData,\n  IProductReqData,\n  ProductFilterOpt,\n  ProductStatusEnum,\n} from '../../../redux/products/products.types';\nimport { createDataForReq } from '../../../utils/dataTransform';\nimport FormAfterSubmitOptions, { useAfterSubmitOptions } from '../components/FormAfterSubmitOptions';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { IVariationTemplate } from '../../../redux/products/properties.types';\nimport FormProductStaticProperties from './FormProductStaticProperties';\nimport FormProductImagesComponent from './FormProductImagesComponent';\nimport FormProductCategories from './FormProductCategories';\nimport { enumToFilterOptions } from '../../../utils/fabrics';\nimport DimensionsInputs from './components/DimensionsInputs';\nimport MeasurementInputs from './components/MeasuremenInputs';\n\nexport interface FormCreateProductProps extends Omit<ModalFormProps<any, any, IProductFormData>, 'onSubmit'> {\n  copy?: boolean;\n  id?: string;\n  edit?: boolean;\n  _id?: string;\n  onSubmit?: AppSubmitHandler<IProductReqData>;\n  filterOptions?: ProductFilterOpt[];\n  defaultState?: IProductFormData;\n  addInputs?: boolean;\n}\n\nconst productsStatusOption = enumToFilterOptions(ProductStatusEnum);\n\nconst FormCreateProduct: React.FC<FormCreateProductProps> = ({\n  edit,\n  _id,\n  onSubmit,\n  copy,\n  defaultState,\n  addInputs,\n  ...props\n}) => {\n  const submitOptions = useAfterSubmitOptions();\n  const {\n    directories: { directories },\n    products: { properties },\n  } = useAppSelector();\n  const form = useAppForm<IProductFormData>({\n    defaultValues: defaultState,\n  });\n  const {\n    formState: { errors },\n    formValues,\n    register,\n    setValue,\n    registerSelect,\n    handleSubmit,\n  } = form;\n\n  const categories = useMemo(() => {\n    return directories[ApiDirType.CATEGORIES_PROD].filter(el => el.type === formValues.type);\n  }, [directories, formValues.type]);\n\n  const currentTemplate = useMemo((): IVariationTemplate | undefined => {\n    return properties.find(t => t._id === formValues?.template?._id);\n  }, [formValues?.template?._id, properties]);\n\n  // TODO eventDate: formatDateForInputValue(defaultState?.eventDate)\n  function onValidSubmit(submitData: IProductFormData) {\n    const productForSubmit = createDataForReq(submitData, { ignorePaths: ['measurement'] });\n\n    onSubmit &&\n      onSubmit(\n        { _id, data: productForSubmit },\n        {\n          ...submitOptions.state,\n        }\n      );\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      onSubmit={handleSubmit(onValidSubmit, data => console.log(data))}\n      onOptSelect={({ value }) => value && setValue('type', value)}\n      extraFooter={<FormAfterSubmitOptions {...submitOptions} />}\n    >\n      <FlexBox className={'inputs'} flex={'1'} fillWidth maxHeight={'100%'} padding={'0 8px 8px'} overflow={'auto'}>\n        <InputLabel label={t('label')} error={errors.label} required>\n          <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={6} fillWidth>\n          <InputLabel label={t('sku')} error={errors.sku}>\n            <InputText placeholder={t('sku')} {...register('sku')} />\n          </InputLabel>\n\n          <InputLabel label={'Штрих-код'} error={errors.barCode}>\n            <InputText placeholder={'Штрих-код'} {...register('barCode')} />\n          </InputLabel>\n        </FlexBox>\n\n        <FormProductCategories\n          options={categories}\n          defaultData={formValues?.categories}\n          onChange={data => {\n            setValue('categories', data);\n          }}\n        />\n\n        <CustomSelect\n          {...registerSelect('brand', {\n            options: directories[ApiDirType.BRANDS],\n            label: t('brand'),\n            placeholder: t('selectBrand'),\n            multipleMode: true,\n          })}\n        />\n\n        <CustomSelect\n          {...registerSelect('approved', {\n            options: productsStatusOption,\n            label: t('status'),\n            placeholder: t('status'),\n          })}\n        />\n\n        <MeasurementInputs appForm={form} />\n\n        <DimensionsInputs form={form} />\n\n        <InputLabel label={t('description')} error={errors.description}>\n          <TextareaPrimary placeholder={t('description')} {...register('description')} />\n        </InputLabel>\n\n        <FormProductStaticProperties\n          template={currentTemplate}\n          defaultData={formValues?.properties}\n          onChange={ids => {\n            setValue('properties', ids);\n          }}\n        >\n          <CustomSelect\n            {...registerSelect('template', {\n              options: properties,\n              dropDownIsAbsolute: true,\n              label: t('variationsTemplate'),\n              placeholder: t('selectVariationsTemplate'),\n            })}\n          />\n        </FormProductStaticProperties>\n\n        <FormProductImagesComponent\n          initialData={formValues?.images}\n          onChangeState={data => {\n            setValue('images', data);\n          }}\n        />\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\n// const GridWrapper = styled.div<{ gridTemplateColumns?: string }>`\n//   display: grid;\n//   grid-template-columns: ${({ gridTemplateColumns }) => gridTemplateColumns || '1fr 120px'};\n//   gap: 12px;\n// `;\n\nexport default FormCreateProduct;\n\n// const optionalSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .nullable()\n//   .optional();\n// const requiredSelectItem = yup\n//   .object()\n//   .shape({\n//     _id: yup.string(),\n//     label: yup.string(),\n//   })\n//   .required();\n//\n// const getValidation = (type: TransactionType) =>\n//   yup.object().shape({\n//     category: requiredSelectItem,\n//   });\n"],"names":["Container","styled","FlexBox","_templateObject","_taggedTemplateLiteral","p","theme","sideBarBorderColor","PropertyBox","_templateObject2","_ref","children","onSelect","onChange","template","defaultData","_useState","useState","_useState2","_slicedToArray","selectedIds","setSelectedIds","useEffect","handleSelect","useCallback","id","option","newData","includes","filter","el","concat","_toConsumableArray","currentTemplateData","useMemo","_template$childrenLis","childrenList","props","isSelectable","renderProperties","map","item","_item$childrenList","_jsxs","gap","fillWidth","padding","_jsx","Text","$weight","$size","style","marginInline","label","fxDirection","flexWrap","value","ButtonIcon","variant","_id","onClick","dimensionsInputsProps","name","t","placeholder","Box","form","input","InputLabel","InputText","_objectSpread","min","type","register","valueAsNumber","productsMeasurementUnitOptions","enumToFilterOptions","MeasurementUnit","measurementInputs","options","appForm","display","gridTemplateColumns","columnGap","_appForm$formState","CustomSelect","registerSelect","dropDownIsAbsolute","onlyValue","error","formState","errors","undefined","productsStatusOption","ProductStatusEnum","edit","_formValues$template2","onSubmit","defaultState","copy","addInputs","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","_useAppSelector","useAppSelector","directories","properties","products","useAppForm","defaultValues","formValues","setValue","handleSubmit","categories","ApiDirType","currentTemplate","find","_formValues$template","ModalForm","submitData","productForSubmit","createDataForReq","ignorePaths","data","state","console","log","onOptSelect","_ref2","extraFooter","FormAfterSubmitOptions","className","flex","maxHeight","overflow","required","autoFocus","sku","barCode","FormProductCategories","multipleMode","MeasurementInputs","DimensionsInputs","description","TextareaPrimary","FormProductStaticProperties","ids","FormProductImagesComponent","initialData","images","onChangeState"],"sourceRoot":""}