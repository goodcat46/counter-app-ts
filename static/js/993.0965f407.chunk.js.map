{"version":3,"file":"static/js/993.0965f407.chunk.js","mappings":"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","sources":["components/Overviews/orderOverviewCellsMap.tsx","components/Overviews/tabs/OrderOverviewInfoTab.tsx","components/Overviews/OrderOverviewXL.tsx","components/AppPages/orders/PageOrderOverviewLeftSide.tsx","components/AppPages/orders/tabs/OrderContentTab.tsx","components/AppPages/orders/tabs/OrderInvoicesTab.tsx","components/AppPages/orders/tabs/OrderPaymentsTab.tsx","components/AppPages/orders/PageOrderOverviewTabs.tsx","components/AppPages/orders/PageOrderProvider.tsx","components/AppPages/orders/PageOrderOverview.tsx"],"sourcesContent":["import { OverviewCellProps } from './components/overview-types';\nimport { OrderEntity } from '../../types/orders/orders.types';\nimport { t } from '../../lang';\nimport { OverviewCells } from './components';\n\nimport { _enumToTabs } from '../../utils';\n\nexport enum OrderOverviewInfoTabsEnum {\n  General = 'General',\n  Customer = 'Customer',\n  Invoicing = 'Invoicing',\n  Delivery = 'Delivery',\n  Additional = 'Additional',\n}\n\nexport const orderOverviewInfoTabs = _enumToTabs(OrderOverviewInfoTabsEnum);\n\nconst orderOverviewCells: OverviewCellProps<OrderEntity>[] = [\n  {\n    title: t('Manager'),\n    getValue: data => data?.manager?.user?.email,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n  {\n    title: t('Reference'),\n    getValue: data => data?.reference?.internal,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n\n  {\n    title: t('Group reference'),\n    getValue: data => data?.group?.reference?.internal,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n  {\n    title: t('Group strategy'),\n    getValue: data => data?.group?.strategy,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n\n  {\n    title: t('Totals'),\n    CellComponent: OverviewCells.OrderTotals,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n\n  {\n    title: t('Status'),\n    getValue: data => data?.status,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n  {\n    CellComponent: OverviewCells.OrderCustomerInfo,\n    tab: OrderOverviewInfoTabsEnum.Customer,\n  },\n  {\n    title: t('Invoicing'),\n    CellComponent: OverviewCells.OrderInvoicing,\n    tab: OrderOverviewInfoTabsEnum.Invoicing,\n  },\n  { title: t('Delivery'), CellComponent: OverviewCells.OrderDelivery, tab: OrderOverviewInfoTabsEnum.Delivery },\n  {\n    title: t('Receiver'),\n    CellComponent: OverviewCells.OrderCustomerInfo,\n    tab: OrderOverviewInfoTabsEnum.Delivery,\n  },\n  { title: t('Additional'), tab: OrderOverviewInfoTabsEnum.Additional },\n];\n\nexport const orderOverviewCellsMap: Record<\n  OrderOverviewInfoTabsEnum | string,\n  OverviewCellProps<OrderEntity, OrderOverviewInfoTabsEnum>[]\n> = {};\norderOverviewCells.forEach(item => {\n  const tab = item.tab;\n  if (tab) {\n    if (orderOverviewCellsMap[tab]) {\n      orderOverviewCellsMap[tab].push(item);\n    } else {\n      orderOverviewCellsMap[tab] = [item];\n    }\n  }\n});\n","import FlexBox from '../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport React, { useMemo, useState } from 'react';\nimport { useOverlayService } from '../../../Providers/Overlay/OverlayStackProvider';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport TabSelector from '../../atoms/TabSelector';\nimport { OverviewCells } from '../components';\nimport { orderOverviewCellsMap, orderOverviewInfoTabs, OrderOverviewInfoTabsEnum } from '../orderOverviewCellsMap';\n\nexport interface OrderOverviewInfoTabProps {}\n\nconst OrderOverviewInfoTab: React.FC<OrderOverviewInfoTabProps> = _p => {\n  const overlayS = useOverlayService();\n  const currentOrder = useOrdersSelector().currentOrder;\n  const [currentTab, setCurrentTab] = useState<OrderOverviewInfoTabsEnum>(OrderOverviewInfoTabsEnum.General);\n\n  const renderCells = useMemo(\n    () =>\n      orderOverviewCellsMap[currentTab].map(({ CellComponent, ...cell }) => {\n        if (CellComponent) {\n          return <CellComponent key={cell.title} overlayHandler={overlayS.open} cell={cell} data={currentOrder} />;\n        }\n        return <OverviewCells.Text key={cell.title} overlayHandler={overlayS.open} cell={cell} data={currentOrder} />;\n      }),\n    [currentTab, overlayS.open, currentOrder]\n  );\n\n  return (\n    <Box fillWidth flex={1} overflow={'auto'}>\n      <TabSelector\n        optionProps={{ fitContentH: true }}\n        filterOptions={orderOverviewInfoTabs}\n        onOptSelect={option => {\n          setCurrentTab(option?.value);\n        }}\n      />\n\n      {renderCells}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)``;\nexport default OrderOverviewInfoTab;\n","import { OrderEntity } from '../../types/orders/orders.types';\nimport FlexBox from '../atoms/FlexBox';\nimport { ModalHeader } from '../atoms';\nimport React, { useMemo, useState } from 'react';\nimport { useOrdersSelector } from '../../redux/selectors.store';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport ButtonIcon from '../atoms/ButtonIcon/ButtonIcon';\nimport { t } from '../../lang';\nimport { useAppParams } from '../../hooks';\nimport { enumToFilterOptions } from '../../utils';\nimport TabSelector from '../atoms/TabSelector';\nimport OrderOverviewInfoTab from './tabs/OrderOverviewInfoTab';\n\nexport interface OrderOverviewXLProps {\n  order?: OrderEntity;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onArchive?: () => void;\n  onHide?: () => void;\n  onRefresh?: () => void;\n  isRefresh?: boolean;\n  onCreateVariation?: (data: Record<string, string>, onSuccess?: () => void) => void;\n  onOpenRightSide?: () => void;\n  className?: string;\n}\nexport enum OrderOverviewTabs {\n  info = 'Info',\n  chat = 'Chat',\n  statuses = 'Statuses',\n  comments = 'Comments',\n  tasks = 'tasks',\n}\n\nconst tabs = enumToFilterOptions(OrderOverviewTabs);\n\nconst OrderOverviewXL: React.FC<OrderOverviewXLProps> = p => {\n  const [currentTab, setCurrentTab] = useState<number>(0);\n  // const orderS = useAppServiceProvider()[ServiceName.orders];\n  const orderId = useAppParams()?.orderId;\n  const currentOrder = useOrdersSelector().currentOrder;\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const renderTab = useMemo(() => {\n    if (tabs[currentTab].value === OrderOverviewTabs.info) {\n      return <OrderOverviewInfoTab />;\n    }\n\n    return null;\n  }, [currentTab]);\n\n  return (\n    <Container flex={1} fillWidth padding={'0 8px'}>\n      <ModalHeader\n        title={t('Order overview')}\n        onBackPress={() => {\n          if (location?.pathname) {\n            const newPath = location?.pathname?.replace(`/${currentOrder?._id || orderId}`, '');\n\n            newPath && navigate(newPath);\n          }\n        }}\n      />\n\n      <Content flex={1} fillWidth overflow={'auto'}>\n        <TabSelector\n          filterOptions={tabs}\n          optionProps={{ fitContentH: true }}\n          onOptSelect={(_o, _v, i) => setCurrentTab(i)}\n        />\n\n        {renderTab}\n      </Content>\n\n      <Footer fxDirection={'row'} alignItems={'center'} justifyContent={'space-between'} padding={'8px 0'}>\n        <ButtonIcon\n          size={'36px'}\n          variant={'onlyIcon'}\n          iconSize={'85%'}\n          icon={'edit'}\n          disabled={!p?.onEdit}\n          onClick={p?.onEdit}\n        />\n\n        <DeleteBtn\n          variant={'onlyIcon'}\n          size={'36px'}\n          iconSize={'85%'}\n          icon={'delete'}\n          disabled={!p?.onDelete}\n          onClick={p?.onDelete}\n        />\n\n        <FlexBox fxDirection={'row'} gap={6} margin={'0 0 0 auto'}>\n          <ButtonIcon\n            size={'36px'}\n            variant={'onlyIcon'}\n            iconSize={'85%'}\n            icon={'refresh'}\n            isLoading={p?.isRefresh}\n            disabled={!p?.onRefresh}\n            onClick={p?.onRefresh}\n          />\n\n          <OpenBtn\n            size={'36px'}\n            variant={'onlyIcon'}\n            iconSize={'85%'}\n            icon={'SmallArrowLeft'}\n            disabled={!p?.onOpenRightSide}\n            onClick={p?.onOpenRightSide}\n          />\n        </FlexBox>\n      </Footer>\n    </Container>\n  );\n};\nconst Container = styled(FlexBox)`\n  position: relative;\n  overflow: hidden;\n\n  background-color: ${p => p.theme.sideBarBackgroundColor};\n`;\n\nconst Content = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  border-bottom: 1px solid ${p => p.theme.sideBarBorderColor};\n`;\nconst Footer = styled(FlexBox)``;\nconst DeleteBtn = styled(ButtonIcon)`\n  fill: ${p => p.theme.globals.colors.error};\n`;\nconst OpenBtn = styled(ButtonIcon)`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n`;\nexport default OrderOverviewXL;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { useState } from 'react';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { OverlayStack } from '../../../Providers/Overlay/OverlayStack';\nimport OrderOverviewXL from 'components/Overviews/OrderOverviewXL';\n\nexport interface PageOrderOverviewLeftSideProps {\n  toggleRightSideVisibility?: () => void;\n}\nconst PageOrderOverviewLeftSide: React.FC<PageOrderOverviewLeftSideProps> = ({ toggleRightSideVisibility }) => {\n  const { currentOrder } = useOrdersSelector();\n  const setLoading = useState(false)[1];\n  const { orders: ordersServ } = useAppServiceProvider();\n\n  return (\n    <LeftSide>\n      <OrderOverviewXL\n        order={currentOrder}\n        onRefresh={() => {\n          currentOrder?._id &&\n            ordersServ.getById({\n              data: { _id: currentOrder?._id, options: { refreshCurrent: true } },\n              onLoading: setLoading,\n            });\n        }}\n        onOpenRightSide={toggleRightSideVisibility}\n      />\n\n      <OverlayStack />\n    </LeftSide>\n  );\n};\n\nconst LeftSide = styled(FlexBox)`\n  position: relative;\n\n  overflow: hidden;\n\n  border-right: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default PageOrderOverviewLeftSide;\n","import FlexBox from '../../../atoms/FlexBox';\nimport TabSelector from '../../../atoms/TabSelector';\nimport TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport { useEffect, useMemo, useState } from 'react';\nimport { orderSlotsTableColumns } from '../../../../data/orders.data';\nimport { productsFilterOptions } from '../../../../data/modalFilterOptions.data';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\nimport { getIdRef } from '../../../../utils';\nimport { IOrderSlot } from '../../../../types/orders/orders.types';\n\nexport interface OrderContentTabProps {}\n\nconst OrderContentTab: React.FC<OrderContentTabProps> = p => {\n  const service = useAppServiceProvider()[AppModuleName.orders];\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTab, setCurrentTab] = useState<number>(0);\n\n  const { currentOrder } = useOrdersSelector();\n\n  const tableData = useMemo(() => {\n    return currentOrder?.slots?.filter(el => el.product?.type === productsFilterOptions[currentTab]?.value);\n  }, [currentOrder?.slots, currentTab]);\n\n  const tableConfigs = useMemo((): ITableListProps<IOrderSlot> => {\n    return {\n      actionsCreator: ctx => {\n        return [\n          {\n            icon: 'refresh',\n            name: 'refresh',\n            onClick: () => {\n              if (currentOrder?._id) {\n                service.getSlots({ data: { params: { order: getIdRef(currentOrder) } }, onLoading: setIsLoading });\n              }\n            },\n          },\n        ];\n      },\n    };\n  }, [currentOrder, service]);\n\n  useEffect(() => {\n    if (currentOrder?._id) {\n      service.getSlots({ data: { params: { order: getIdRef(currentOrder) } } });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <FlexBox fillWidth overflow={'hidden'} flex={1}>\n      <FlexBox fillWidth>\n        <TabSelector\n          filterOptions={productsFilterOptions}\n          currentIndex={currentTab}\n          onOptSelect={(_o, _v, i) => {\n            setCurrentTab(i);\n          }}\n        />\n      </FlexBox>\n\n      <TableList\n        isSearch={false}\n        isFilter={false}\n        {...tableConfigs}\n        tableData={tableData}\n        isLoading={isLoading}\n        tableTitles={orderSlotsTableColumns}\n      />\n    </FlexBox>\n  );\n};\n\nexport default OrderContentTab;\n","import TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { invoicesTableColumns } from '../../../../data/invoicing.data';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useEffect, useMemo, useState } from 'react';\nimport { getIdRef } from '../../../../utils';\nimport { IInvoice } from '../../../../types/invoices.types';\nimport { OrderTabProps } from './orderTabs.types';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\n\nexport interface OrderInvoicesTabProps extends OrderTabProps {}\n\nconst OrderInvoicesTab: React.FC<OrderInvoicesTabProps> = ({ order }) => {\n  const state = useOrdersSelector();\n  const currentOrder = order ?? state?.currentOrder;\n  const service = useAppServiceProvider().get(AppModuleName.orders);\n\n  // const modalService = useModalService();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const tableConfigs = useMemo((): ITableListProps<IInvoice> => {\n    return {\n      actionsCreator: ctx => {\n        return [\n          {\n            name: 'refresh',\n            icon: 'refresh',\n            onClick: () => {\n              if (currentOrder?._id) {\n                service.getInvoicesByOrderId({ data: { params: { order: getIdRef(currentOrder) } } });\n              }\n            },\n          },\n        ];\n      },\n    };\n  }, [currentOrder, service]);\n\n  useEffect(() => {\n    if (currentOrder?._id) {\n      service.getInvoicesByOrderId({ data: { params: { order: getIdRef(currentOrder) } }, onLoading: setIsLoading });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <TableList\n      {...tableConfigs}\n      isSearch={false}\n      isFilter={false}\n      isLoading={isLoading}\n      tableData={currentOrder?.invoices}\n      tableTitles={invoicesTableColumns}\n    />\n  );\n};\n\nexport default OrderInvoicesTab;\n","import TableList from '../../../TableList/TableList';\n\nexport interface OrderPaymentsTabProps {}\n\nconst OrderPaymentsTab: React.FC<OrderPaymentsTabProps> = () => {\n  return <TableList isSearch={false} isFilter={false} />;\n};\n\nexport default OrderPaymentsTab;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { Text } from '../../atoms/Text';\nimport TabSelector, { FilterSelectHandler } from '../../atoms/TabSelector';\nimport { useMemo, useState } from 'react';\nimport { enumToFilterOptions } from '../../../utils';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { useAppParams } from '../../../hooks';\nimport OrderContentTab from './tabs/OrderContentTab';\nimport OrderInvoicesTab from './tabs/OrderInvoicesTab';\nimport OrderPaymentsTab from './tabs/OrderPaymentsTab';\n\nexport interface PageOrderOverviewTabsProps {\n  isVisible?: boolean;\n  toggleVisibility?: () => void;\n}\nenum OrderTabNameEnum {\n  Content = 'Content',\n  Invoices = 'Invoices',\n  Payments = 'Payments',\n  // Shipments = 'Shipments',\n}\nconst toggleOptions = enumToFilterOptions(OrderTabNameEnum);\nconst PageOrderOverviewTabs = ({ toggleVisibility, isVisible }: PageOrderOverviewTabsProps) => {\n  const orderId = useAppParams()?.orderId;\n\n  const { currentOrder } = useOrdersSelector();\n  // const service = useAppServiceProvider()[ServiceName.orders];\n  const [current, setCurrent] = useState<OrderTabNameEnum>(OrderTabNameEnum.Content);\n\n  const renderTab = useMemo(() => {\n    if (current === OrderTabNameEnum.Content) {\n      return <OrderContentTab />;\n    }\n    if (current === OrderTabNameEnum.Invoices) {\n      return <OrderInvoicesTab />;\n    }\n    if (current === OrderTabNameEnum.Payments) {\n      return <OrderPaymentsTab />;\n    }\n  }, [current]);\n\n  const filterHandler: FilterSelectHandler<OrderTabNameEnum> = (_, value, index) => {\n    setCurrent(value);\n  };\n\n  return (\n    <RightSide overflow={'hidden'} fillHeight isVisible={isVisible}>\n      <Top fillWidth gap={4} isVisible={isVisible} fxDirection={'row'} justifyContent={'space-between'}>\n        <ButtonIcon\n          variant={'textExtraSmall'}\n          icon={'SmallArrowLeft'}\n          style={{ padding: 6 }}\n          onClick={toggleVisibility}\n        >\n          {'Back'}\n        </ButtonIcon>\n\n        <FlexBox padding={'0 8px'}>\n          <Text $weight={600} $size={14}>\n            {currentOrder?.code}\n          </Text>\n\n          <Text $size={10}>{orderId}</Text>\n        </FlexBox>\n      </Top>\n\n      <FlexBox>\n        <TabSelector filterOptions={toggleOptions} defaultValue={current} onOptSelect={filterHandler} preventFilter />\n      </FlexBox>\n\n      {renderTab}\n    </RightSide>\n  );\n};\nconst RightSide = styled(FlexBox)<{ isVisible?: boolean }>`\n  overflow: auto;\n\n  max-width: 100%;\n\n  transition: ${p => p.theme.globals.timingFunctionMain};\n  background-color: ${p => p.theme.backgroundColorLight};\n\n  @media screen and (min-width: 768px) {\n    min-width: 320px;\n  }\n\n  @media screen and (max-width: 768px) {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 20;\n\n    transform: translateX(${p => (p.isVisible ? 0 : 100)}%);\n\n    box-shadow: 0 12px 26px rgba(0, 0, 0, 0.25);\n  }\n`;\n\nconst Top = styled(FlexBox)<{ isVisible?: boolean }>`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default PageOrderOverviewTabs;\n","import React, { createContext, useContext, useMemo } from 'react';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { OrderEntity } from '../../../types/orders/orders.types';\n\nexport interface PageCurrentOrderProviderProps {\n  children?: React.ReactNode;\n}\n\nexport interface PageOrderProviderValue {\n  currentOrder?: OrderEntity;\n  mainPagePath?: string;\n}\n\nexport const PageOrderCTX = createContext({});\n\nexport const usePageCurrentOrder = () => useContext(PageOrderCTX) as PageOrderProviderValue;\n\nconst PageOrderProvider: React.FC<PageCurrentOrderProviderProps> = ({ children }) => {\n  const { currentOrder } = useOrdersSelector();\n  // const service = useAppServiceProvider()[ServiceName.orders];\n\n  const CTX = useMemo(\n    (): PageOrderProviderValue => ({\n      currentOrder,\n    }),\n    [currentOrder]\n  );\n\n  return <PageOrderCTX.Provider value={CTX}>{children}</PageOrderCTX.Provider>;\n};\nexport default PageOrderProvider;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { takeFullGridArea } from '../pagesStyles';\nimport { AppGridPage } from '../pages';\nimport { useAppParams } from '../../../hooks';\nimport OverlayStackProvider from '../../../Providers/Overlay/OverlayStackProvider';\nimport PageOrderOverviewLeftSide from './PageOrderOverviewLeftSide';\nimport PageOrderOverviewTabs from './PageOrderOverviewTabs';\nimport { BaseAppPageProps } from '../index';\nimport PageOrderProvider from './PageOrderProvider';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageOrderOverview: React.FC<Props> = ({ path }) => {\n  const service = useAppServiceProvider()[AppModuleName.orders];\n\n  const [isTabsSideVisible, setIsTabsSideVisible] = useState<boolean>(false);\n  const { orderId } = useAppParams();\n\n  const toggleRightSide = useCallback(() => {\n    setIsTabsSideVisible(p => !p);\n  }, []);\n\n  useEffect(() => {\n    if (orderId) {\n      service.getById({\n        data: { _id: orderId, options: { refreshCurrent: true } },\n      });\n    }\n  }, [orderId, service]);\n\n  return (\n    <AppGridPage path={path}>\n      <PageOrderProvider>\n        <OverlayStackProvider>\n          <Page>\n            <PageOrderOverviewLeftSide toggleRightSideVisibility={toggleRightSide} />\n\n            <PageOrderOverviewTabs toggleVisibility={toggleRightSide} isVisible={isTabsSideVisible} />\n          </Page>\n        </OverlayStackProvider>\n      </PageOrderProvider>\n    </AppGridPage>\n  );\n};\nconst Page = styled.div`\n  display: grid;\n  grid-template-columns: minmax(220px, 1fr) 0;\n\n  ${takeFullGridArea};\n\n  //@media screen and (max-width: 768px) {\n  //}\n  @media screen and (min-width: 768px) {\n    grid-template-columns: minmax(360px, 1fr) 2fr;\n  }\n  @media screen and (min-width: 1000px) {\n    grid-template-columns: minmax(360px, 400px) 2fr;\n  }\n`;\nexport default PageOrderOverview;\n"],"names":["OrderOverviewInfoTabsEnum","orderOverviewInfoTabs","_enumToTabs","orderOverviewCells","title","t","getValue","data","_data$manager","_data$manager$user","manager","user","email","tab","General","_data$reference","reference","internal","_data$group","_data$group$reference","group","_data$group2","strategy","CellComponent","OverviewCells","status","Customer","Invoicing","Delivery","Additional","orderOverviewCellsMap","forEach","item","push","Box","styled","FlexBox","_templateObject","_taggedTemplateLiteral","_p","overlayS","useOverlayService","currentOrder","useOrdersSelector","_useState","useState","_useState2","_slicedToArray","currentTab","setCurrentTab","renderCells","useMemo","map","_ref","cell","_objectWithoutProperties","_excluded","_jsx","overlayHandler","open","_jsxs","fillWidth","flex","overflow","children","TabSelector","optionProps","fitContentH","filterOptions","onOptSelect","option","value","OrderOverviewTabs","tabs","enumToFilterOptions","Container","p","theme","sideBarBackgroundColor","Content","_templateObject2","sideBarBorderColor","Footer","_templateObject3","DeleteBtn","ButtonIcon","_templateObject4","globals","colors","error","OpenBtn","_templateObject5","_useAppParams","orderId","useAppParams","navigate","useNavigate","location","useLocation","renderTab","info","OrderOverviewInfoTab","padding","ModalHeader","onBackPress","pathname","_location$pathname","newPath","replace","concat","_id","_o","_v","i","fxDirection","alignItems","justifyContent","size","variant","iconSize","icon","disabled","onEdit","onClick","onDelete","gap","margin","isLoading","isRefresh","onRefresh","onOpenRightSide","LeftSide","modalBorderColor","toggleRightSideVisibility","setLoading","ordersServ","useAppServiceProvider","orders","OrderOverviewXL","order","getById","options","refreshCurrent","onLoading","OverlayStack","service","AppModuleName","setIsLoading","_useState3","_useState4","tableData","_currentOrder$slots","slots","filter","el","_el$product","_productsFilterOption","product","type","productsFilterOptions","tableConfigs","actionsCreator","ctx","name","getSlots","params","getIdRef","useEffect","currentIndex","TableList","_objectSpread","isSearch","isFilter","tableTitles","orderSlotsTableColumns","state","get","getInvoicesByOrderId","invoices","invoicesTableColumns","OrderTabNameEnum","toggleOptions","RightSide","timingFunctionMain","backgroundColorLight","isVisible","Top","toggleVisibility","current","setCurrent","OrderContentTab","Invoices","OrderInvoicesTab","Payments","OrderPaymentsTab","fillHeight","style","Text","$weight","$size","code","defaultValue","_","index","preventFilter","PageOrderCTX","createContext","CTX","Provider","Page","takeFullGridArea","path","isTabsSideVisible","setIsTabsSideVisible","toggleRightSide","useCallback","AppGridPage","PageOrderProvider","OverlayStackProvider","PageOrderOverviewLeftSide","PageOrderOverviewTabs"],"sourceRoot":""}