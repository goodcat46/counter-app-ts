{"version":3,"file":"static/js/265.812d616f.chunk.js","mappings":"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","sources":["redux/customers/customers.types.ts","components/Forms/FormCreateCustomer.tsx","components/Forms/FormCreateOrder/components/OrderGroupItem.tsx","components/Forms/FormCreateOrder/steps/OrderGroupsStuffingStep.tsx","components/Forms/FormCreateOrder/components/SelectCustomerModal.tsx","components/Forms/FormCreateOrder/components/SelectManagerModal.tsx","components/Forms/FormCreateOrder/components/CreateCustomerButtonIcon.tsx","components/Forms/FormCreateOrder/components/CustomerInfoComponent.tsx","components/Forms/FormCreateOrder/components/DestinationInputs.tsx","utils/lodash.utils.ts","components/Forms/FormCreateOrder/steps/OrderInfoStep.tsx","../node_modules/date-fns/esm/addDays/index.js","components/Forms/FormCreateOrder/FormCreateOrdersGroup.tsx","components/Forms/components/StepsController.tsx","components/atoms/CheckboxesListSelector.tsx","data/customers.data.ts"],"sourcesContent":["import { AppQueryParams } from '../../api';\nimport {\n  AddressDto,\n  ContactsDto,\n  IAddressSlot,\n  IBase,\n  IContactsSlot,\n  IFormDataValueWithUUID,\n  OnlyUUID,\n} from '../global.types';\nimport { IOrder } from '../orders/orders.types';\nimport { BusinessSubjectTypeEnum } from '../companies/companies.types';\n\nexport enum CustomerTypeEnum {\n  active = 'active',\n}\n\nexport enum EngagementSource {\n  facebook = 'facebook',\n  instagram = 'instagram',\n  referralSystem = 'referralSystem',\n  another = 'another',\n}\nexport interface ICustomerBase extends IBase {\n  label?: string;\n  name?: string;\n  secondName?: string;\n  email?: string;\n  phone?: string;\n  age?: string;\n  taxCode?: string;\n  personalTaxCode?: string;\n  type?: CustomerTypeEnum;\n  businessType?: BusinessSubjectTypeEnum;\n\n  birthDate?: string | number | Date;\n  avatarURL?: string;\n  tags?: string[];\n\n  engagementSource?: EngagementSource;\n}\nexport interface ICustomer extends ICustomerBase {\n  orders?: IOrder[];\n\n  referer?: ICustomer;\n  referrals?: ICustomer[];\n\n  addresses?: IContactsSlot[];\n  contacts?: IAddressSlot[];\n}\n\nexport interface ICustomerDto extends Omit<ICustomerBase, '_id' | 'createdAt' | 'updatedAt' | 'deletedAt'> {\n  referrer?: OnlyUUID;\n}\n\nexport interface ICustomerFormData extends ICustomerDto {\n  referrer?: IFormDataValueWithUUID;\n\n  addresses?: ContactsDto[];\n  contacts?: AddressDto[];\n}\n\nexport interface ICustomerReqDta {\n  _id?: string;\n  data?: ICustomerDto;\n  params?: AppQueryParams;\n}\n","import { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport { EngagementSource, ICustomerFormData } from '../../redux/customers/customers.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport { t } from '../../lang';\nimport styled from 'styled-components';\nimport FlexBox from '../atoms/FlexBox';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport ButtonsGroup from '../atoms/ButtonsGroup';\nimport { businessSubjectTypeFilterOptions } from '../../data/companies.data';\nimport { useForm } from 'react-hook-form';\nimport ButtonIcon from '../atoms/ButtonIcon/ButtonIcon';\nimport CheckboxesListSelector from '../atoms/CheckboxesListSelector';\nimport { enumToFilterOptions } from '../../utils/fabrics';\nimport { useMemo } from 'react';\nimport { ConfigService } from '../../services';\nimport { BusinessSubjectTypeEnum } from '../../redux/companies/companies.types';\nimport _ from 'lodash';\n\nconst isDevMode = ConfigService.isDevMode();\n\nexport interface FormCreateCustomerProps extends Omit<ModalFormProps<any, any, ICustomerFormData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<ICustomerFormData>;\n  withReferer?: boolean;\n}\n\nconst engagementSourceOptions = enumToFilterOptions(EngagementSource);\nconst FormCreateCustomer: React.FC<FormCreateCustomerProps> = ({\n  defaultState,\n  withReferer,\n  onSubmit,\n  onClose,\n  ...p\n}) => {\n  const { register, setValue, handleSubmit, watch } = useForm<ICustomerFormData>({\n    defaultValues: { ...defaultState, businessType: BusinessSubjectTypeEnum.company },\n  });\n  const formValues = watch();\n\n  const isEditMode = useMemo(() => !!defaultState?.email, [defaultState?.email]);\n\n  const onValid = (fData: ICustomerFormData) => {\n    onSubmit && onSubmit(_.omit(fData, isEditMode ? ['engagementSource', 'email'] : ['engagementSource']));\n  };\n\n  return (\n    <ModalForm {...p} title={p.title ? p.title : t('Create customer')} onSubmit={handleSubmit(onValid)}>\n      <Inputs padding={'0 8px 8px'}>\n        <InputLabel label={t('type')} required>\n          <ButtonsGroup\n            options={businessSubjectTypeFilterOptions}\n            onSelect={info => {\n              setValue('businessType', info?.value);\n            }}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('name')} required>\n          <InputText placeholder={t('name')} {...register('name')} required />\n        </InputLabel>\n\n        <InputLabel label={t('secondName')}>\n          <InputText placeholder={t('secondName')} {...register('secondName')} />\n        </InputLabel>\n\n        <InputLabel label={t('email')} disabled={isEditMode} required>\n          <InputText\n            placeholder={t('email')}\n            type={'email'}\n            {...register('email', { required: true })}\n            disabled={isEditMode}\n            required\n          />\n        </InputLabel>\n\n        <InputLabel label={t('phone')}>\n          <InputText placeholder={t('phone')} {...register('phone')} />\n        </InputLabel>\n\n        <InputLabel label={t('Birth date')}>\n          <InputText placeholder={t('Birth date')} {...register('birthDate')} type={'datetime-local'} />\n        </InputLabel>\n\n        {withReferer && isDevMode && (\n          <InputLabel label={t('Referrer id')}>\n            <InputText placeholder={t('Referrer id')} {...register('referrer._id')} />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('Source')}>\n          <CheckboxesListSelector\n            disabled\n            options={engagementSourceOptions}\n            currentOption={{ value: formValues?.engagementSource }}\n            onChangeIndex={i => {\n              setValue('engagementSource', engagementSourceOptions[i].value);\n            }}\n          />\n        </InputLabel>\n\n        {formValues?.engagementSource === EngagementSource.referralSystem && (\n          <FlexBox gap={8} fillWidth>\n            <InputLabel label={t('Referrer')} required>\n              <InputText placeholder={t('Referrer')} type={'email'} required />\n            </InputLabel>\n\n            <FlexBox fxDirection={'row'} fillWidth gap={8} padding={'8px 0'}>\n              <ButtonIcon variant={'defOutlinedSmall'}>{t('Clear referrer')}</ButtonIcon>\n              <ButtonIcon variant={'outlinedSmall'} flex={1}>\n                {t('Select referrer')}\n              </ButtonIcon>\n            </FlexBox>\n          </FlexBox>\n        )}\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled(FlexBox)``;\nexport default FormCreateCustomer;\n","import { IOrderTempSlot } from '../../../../redux/orders/orders.types';\nimport { useMemo } from 'react';\nimport OrderSlotOverview from '../../../Overviews/OrderSlotOverview';\nimport FormAccordionItem from '../../components/FormAccordionItem';\nimport styled, { useTheme } from 'styled-components';\nimport FlexBox from '../../../atoms/FlexBox';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport { t } from 'lang';\nimport { Text } from '../../../atoms/Text';\n\nconst OrderGroupItem = ({\n  slots,\n  onRemove,\n  onUpdate,\n  renderHeader,\n  title,\n  onAddSlotPress,\n  renderFooter,\n}: {\n  slots: IOrderTempSlot[];\n  renderHeader?: React.ReactNode;\n  renderFooter?: React.ReactNode;\n  title?: React.ReactNode;\n  onRemove?: (id: string) => void;\n  onUpdate?: (slot: IOrderTempSlot) => void;\n  onAddSlotPress?: () => void;\n}) => {\n  const theme = useTheme();\n  const renderSlots = useMemo(() => {\n    return slots.map(slot => (\n      <OrderSlotOverview\n        key={`slot_${slot?.tempId}`}\n        slot={slot}\n        editable\n        onRemovePress={onRemove ? () => slot?.tempId && onRemove(slot?.tempId) : undefined}\n        onUpdate={onUpdate}\n      />\n    ));\n  }, [onRemove, onUpdate, slots]);\n\n  const renderHeaderComp = useMemo(() => {\n    return (\n      <FlexBox fxDirection={'row'} fillHeight gap={8} alignItems={'center'} padding={'2px 0'}>\n        {renderHeader || (\n          <Text $weight={500} $size={15}>\n            {title}\n          </Text>\n        )}\n\n        {onAddSlotPress && <FlexBox height={'80%'} border={`1px solid ${theme.modalBorderColor}`} />}\n\n        {onAddSlotPress && (\n          <ButtonIcon\n            variant={'textExtraSmall'}\n            style={{ minWidth: 'fit-content', height: '100%', fontWeight: 600 }}\n            disabled={!onAddSlotPress}\n            onClick={onAddSlotPress}\n          >\n            {t('Add')}\n          </ButtonIcon>\n        )}\n      </FlexBox>\n    );\n  }, [onAddSlotPress, renderHeader, theme.modalBorderColor, title]);\n\n  return (\n    <>\n      <StAccordionItem open renderHeader={renderHeaderComp} renderFooter={renderFooter} title={title}>\n        {renderSlots}\n      </StAccordionItem>\n    </>\n  );\n};\n\nconst StAccordionItem = styled(FormAccordionItem)`\n  & .header {\n  }\n  & .content {\n    padding: 0;\n  }\n`;\nexport default OrderGroupItem;\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { IOrderTempSlot } from '../../../../redux/orders/orders.types';\nimport FlexBox from '../../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport { IWarehouse } from '../../../../redux/warehouses/warehouses.types';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport { useDispatch } from 'react-redux';\nimport {\n  AddSlotToGroupAction,\n  RemoveSlotFromGroupAction,\n  UpdateSlotInGroupAction,\n} from '../../../../redux/orders/orders.actions';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport { ToastService } from '../../../../services';\nimport { t } from '../../../../lang';\nimport { Modals } from '../../../Modals';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport OrderGroupItem from '../components/OrderGroupItem';\nimport { getIdRef } from '../../../../utils/dataTransform';\nimport { FormOrderStepBaseProps } from '../formOrder.types';\n\nexport interface OrderGroupsStuffingStepProps extends FormOrderStepBaseProps {\n  slots?: IOrderTempSlot[];\n  onAddSlot?: (slot: IOrderTempSlot) => void;\n  onRemoveSlot?: (id: string) => void;\n}\n\nconst OrderGroupsStuffingStep: React.FC<OrderGroupsStuffingStepProps> = ({ onChangeValidStatus }) => {\n  const { slots } = useOrdersSelector().ordersGroupFormData;\n\n  const modalS = useModalService();\n  const dispatch = useDispatch();\n\n  const handelAddSlot = useCallback(\n    (slot: IOrderTempSlot) => {\n      dispatch(AddSlotToGroupAction(slot));\n    },\n    [dispatch]\n  );\n  const handelRemoveSlot = useCallback(\n    (id: string) => {\n      dispatch(RemoveSlotFromGroupAction(id));\n    },\n    [dispatch]\n  );\n  const handelUpdateSlot = useCallback(\n    (slot: IOrderTempSlot) => {\n      dispatch(UpdateSlotInGroupAction(slot));\n    },\n    [dispatch]\n  );\n\n  const groupedData = useMemo(() => {\n    let map: Record<string, { slots: (IOrderTempSlot & { tempId?: string })[]; warehouse?: IWarehouse }> = {};\n\n    slots?.map(slot => {\n      if (slot.warehouse?._id) {\n        map[slot.warehouse._id] = {\n          warehouse: slot.warehouse,\n          slots: map[slot.warehouse._id]?.slots ? [...map[slot.warehouse._id]?.slots, slot] : [slot],\n        };\n      }\n\n      return '';\n    });\n\n    return map;\n  }, [slots]);\n\n  useEffect(() => {\n    onChangeValidStatus && onChangeValidStatus(!!slots?.length && slots?.length > 0);\n  }, [onChangeValidStatus, slots?.length]);\n\n  const renderGroupedData = useMemo(() => {\n    return Object.keys(groupedData).map((k, i) => {\n      const v = groupedData[k];\n      return (\n        <OrderGroupItem\n          key={`pre-order_${v.warehouse?._id || i}`}\n          slots={v.slots}\n          title={v?.warehouse?.label}\n          onRemove={handelRemoveSlot}\n          onUpdate={handelUpdateSlot}\n          onAddSlotPress={() => {\n            const m = modalS.open({\n              Modal: Modals.FormCreateOrderSlot,\n              props: {\n                params: v?.warehouse ? { warehouse: getIdRef(v?.warehouse) } : undefined,\n                onSubmit: d => {\n                  handelAddSlot(d);\n\n                  if (d && m?.onClose) {\n                    m?.onClose();\n                  }\n                },\n              },\n            });\n          }}\n        />\n      );\n    });\n  }, [groupedData, handelAddSlot, handelRemoveSlot, handelUpdateSlot, modalS]);\n\n  return (\n    <Container flex={1} fillWidth overflow={'hidden'} style={{ position: 'relative' }}>\n      <Content flex={1} overflow={'auto'}>\n        <FlexBox flex={1} fillWidth>\n          {renderGroupedData}\n        </FlexBox>\n      </Content>\n\n      <Buttons fxDirection={'row'} gap={8} padding={'8px'}>\n        <ButtonIcon\n          variant={'defOutlinedSmall'}\n          onClick={() => {\n            const res = window.confirm('Remove all items?');\n            if (res) {\n              ToastService.info('All items will be remove');\n            }\n          }}\n        >\n          {t('Remove all')}\n        </ButtonIcon>\n\n        <ButtonIcon\n          variant={'outlinedSmall'}\n          flex={1}\n          onClick={() => {\n            const m = modalS.open({\n              Modal: Modals.FormCreateOrderSlot,\n              props: {\n                onSubmit: d => {\n                  handelAddSlot(d);\n\n                  if (d && m?.onClose) {\n                    m?.onClose();\n                  }\n                },\n              },\n            });\n          }}\n        >\n          {t('Add position to group')}\n        </ButtonIcon>\n      </Buttons>\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  color: ${p => p.theme.fontColorSidebar};\n`;\nconst Content = styled(FlexBox)``;\nconst Buttons = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nexport default OrderGroupsStuffingStep;\n","import { ICustomer } from '../../../../redux/customers/customers.types';\nimport ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { useEffect, useMemo } from 'react';\nimport { ITableListProps } from '../../../TableList/tableTypes.types';\nimport { customersColumns } from '../../../../data/customers.data';\nimport { t } from '../../../../lang';\nimport TableList from '../../../TableList/TableList';\nimport { useCustomersSelector } from '../../../../redux/selectors.store';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport FormCreateCustomer from '../../FormCreateCustomer';\nimport { createDataForReq } from '../../../../utils/dataTransform';\n\nexport interface SelectCustomerModalProps extends Omit<ModalFormProps, 'onSelect' | 'onSubmit'> {\n  onSelect?: (customer: ICustomer) => void;\n  onSubmit?: AppSubmitHandler<ICustomer>;\n  asReceiver?: boolean;\n}\nconst SelectCustomerModal: React.FC<SelectCustomerModalProps> = ({ onSelect, onSubmit, onClose, asReceiver, ...p }) => {\n  const customers = useCustomersSelector().customers;\n  const modalS = useModalService();\n  const service = useAppServiceProvider()[ServiceName.customers];\n\n  const tableConfigs = useMemo((): ITableListProps<ICustomer> => {\n    return {\n      tableData: customers,\n      tableTitles: customersColumns,\n      actionsCreator: _ctx => {\n        return [\n          { icon: 'refresh', onClick: () => service.getAll() },\n          { separator: true },\n          {\n            icon: 'plus',\n            onClick: () => {\n              modalS.open({\n                ModalChildren: FormCreateCustomer,\n                modalChildrenProps: {\n                  onSubmit: d => {\n                    console.log('createDataForReq(d) ModalChildren: FormCreateCustomer', createDataForReq(d));\n\n                    service.create({ data: createDataForReq(d) as never });\n                  },\n                },\n              });\n            },\n          },\n        ];\n      },\n      onRowClick: data => {\n        data?.rowData && onSelect && onSelect(data.rowData);\n\n        onClose && onClose();\n      },\n    };\n  }, [service, customers, onClose, modalS, onSelect]);\n\n  useEffect(() => {\n    service.getAll({\n      data: { refresh: true, params: {} },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ModalForm\n      fillWidth\n      fillHeight\n      title={t(asReceiver ? 'Select receiver' : 'Select customer')}\n      onClose={onClose}\n      {...p}\n    >\n      <TableList {...tableConfigs} />\n    </ModalForm>\n  );\n};\n\nexport default SelectCustomerModal;\n","import ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { IPermission } from '../../../../redux/permissions/permissions.types';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { usersDirColumns } from '../../../../data/usersDir.data';\nimport { t } from '../../../../lang';\nimport { useMemo } from 'react';\nimport { usePermissionsSelector } from '../../../../redux/selectors.store';\n\nexport interface SelectManagerModalProps extends Omit<ModalFormProps, 'onSubmit' | 'onSelect'> {\n  onSelect?: (manager: IPermission) => void;\n  onSubmit?: AppSubmitHandler<IPermission>;\n}\n\nconst SelectManagerModal: React.FC<SelectManagerModalProps> = ({ onSubmit, onSelect, onClose, ...p }) => {\n  const { users } = usePermissionsSelector();\n\n  const tableConfigs = useMemo((): ITableListProps<IPermission> => {\n    return {\n      tableData: users,\n      onRowClick: data => {\n        const res = users.find(pr => pr._id === data?._id);\n        res && onSelect && onSelect(res);\n      },\n    };\n  }, [onSelect, users]);\n\n  return (\n    <ModalForm fillWidth fillHeight onClose={onClose} title={t('Select manager')}>\n      <TableList tableTitles={usersDirColumns} {...tableConfigs} isSearch={false} />\n    </ModalForm>\n  );\n};\nexport default SelectManagerModal;\n","import { ICustomer } from '../../../../redux/customers/customers.types';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport FormCreateCustomer from '../../FormCreateCustomer';\nimport { t } from '../../../../lang';\nimport { createDataForReq } from '../../../../utils/dataTransform';\nimport * as React from 'react';\n\nconst CreateCustomerButtonIcon = ({\n  onSuccess,\n  isReceiver,\n}: {\n  onSuccess?: (customer: ICustomer) => void;\n  isReceiver?: boolean;\n}) => {\n  const customerS = useAppServiceProvider()[ServiceName.customers];\n  const modalS = useModalService();\n\n  return (\n    <ButtonIcon\n      variant={'onlyIcon'}\n      icon={'plus'}\n      iconSize={'100%'}\n      size={'30px'}\n      onClick={() => {\n        modalS.open({\n          ModalChildren: FormCreateCustomer,\n          modalChildrenProps: {\n            title: isReceiver ? t('Create receiver') : undefined,\n            onSubmit: d => {\n              customerS.create({\n                data: createDataForReq(d) as never,\n                onSuccess: onSuccess,\n              });\n            },\n          },\n        });\n      }}\n    ></ButtonIcon>\n  );\n};\nexport default CreateCustomerButtonIcon;\n","import { ICustomer } from '../../../../redux/customers/customers.types';\nimport { useTheme } from 'styled-components';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport { Text } from '../../../atoms/Text';\nimport { t } from '../../../../lang';\n\nconst CustomerInfoComponent = ({\n  info,\n  isReceiver,\n  isManager,\n}: {\n  info?: ICustomer;\n  isReceiver?: boolean;\n  isManager?: boolean;\n}) => {\n  const theme = useTheme();\n  const renderCells = useMemo(() => {\n    if (!info) return undefined;\n\n    return getCustomerInfoComponentCells({ info, isReceiver, isManager }).map(({ label, getValue, visible }) => {\n      return (\n        visible && (\n          <FlexBox\n            key={label}\n            gap={4}\n            padding={'4px'}\n            flex={'1 1 50%'}\n            maxWidth={'50%'}\n            border={`1px solid ${theme.modalBorderColor}`}\n          >\n            <Text $size={12}>{label}</Text>\n            <Text $align={'right'}>{getValue(info)}</Text>\n          </FlexBox>\n        )\n      );\n    });\n  }, [info, isManager, isReceiver, theme.modalBorderColor]);\n\n  return (\n    <FlexBox fillWidth flexWrap={'wrap'} fxDirection={'row'} border={`1px solid ${theme.modalBorderColor}`}>\n      {renderCells}\n    </FlexBox>\n  );\n};\n\nexport default CustomerInfoComponent;\nfunction getCustomerInfoComponentCells({ isManager }: { info?: ICustomer; isReceiver?: boolean; isManager?: boolean }) {\n  return [\n    { label: t('label'), getValue: (info?: ICustomer) => info?.label || '---', visible: !isManager },\n    { label: t('name'), getValue: (info?: ICustomer) => info?.name || '---', visible: true },\n    { label: t('secondName'), getValue: (info?: ICustomer) => info?.secondName || '---', visible: true },\n    { label: t('email'), getValue: (info?: ICustomer) => info?.email || '---', visible: true },\n    { label: t('taxCode'), getValue: (info?: ICustomer) => info?.taxCode || '---', visible: !isManager },\n    {\n      label: t('personalTaxCode'),\n      getValue: (info?: ICustomer) => info?.personalTaxCode || '---',\n      visible: !isManager,\n    },\n    { label: t('tags'), getValue: (info?: ICustomer) => info?.tags?.join(', ') || '---', visible: !isManager },\n  ];\n}\n","import { AddressDto } from 'redux/global.types';\nimport { HTMLAttributes } from 'react';\nimport { t } from 'lang';\n\nexport const destinationAddressInputsProps: ({\n  name: keyof AddressDto;\n  label: string;\n  required?: boolean;\n} & HTMLAttributes<HTMLInputElement>)[] = [\n  { name: 'country', label: t('Country'), required: false },\n  { name: 'region', label: t('Region'), required: false },\n  { name: 'area', label: t('Area'), required: false },\n  { name: 'city', label: t('City'), required: false },\n  { name: 'street', label: t('Street'), required: false },\n  { name: 'house', label: t('House'), required: false },\n  { name: 'office', label: t('Office'), required: false },\n  { name: 'room', label: t('Room'), required: false },\n];\n","import _ from 'lodash';\nimport { AnyFn } from './types';\n\nexport const throttledLogger = _.throttle((...args: any) => {\n  console.log('Throttled Logger', ...args);\n}, 5000);\n\nexport const throttleCallback = _.throttle(<T extends AnyFn>(fn: T) => {\n  console.log(throttleCallback.name);\n\n  fn();\n}, 3000);\n\nexport const throttledCallback = <Fn extends AnyFn>(fn: Fn, wait: number = 3000) => {\n  console.log('throttledCallback return');\n  return _.throttle(fn, wait);\n};\n","import FlexBox from 'components/atoms/FlexBox';\nimport styled from 'styled-components';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { t } from 'lang';\nimport { Text } from 'components/atoms/Text';\nimport FormAccordionItem from '../../components/FormAccordionItem';\nimport InputLabel from 'components/atoms/Inputs/InputLabel';\nimport { ICreateOrderInfoFormState } from 'redux/orders/orders.types';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport ButtonIcon from 'components/atoms/ButtonIcon/ButtonIcon';\nimport SelectCustomerModal from '../components/SelectCustomerModal';\nimport TagButtonsFilter from 'components/atoms/TagButtonsFilter';\nimport SelectManagerModal from '../components/SelectManagerModal';\nimport { FormOrderStepBaseProps } from '../formOrder.types';\nimport CheckboxesListSelector from 'components/atoms/CheckboxesListSelector';\nimport { useTranslatedListData } from 'hooks/useTranslatedMethods.hook';\nimport ButtonSwitch from '../../../atoms/ButtonSwitch';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport { Path, useFormContext, UseFormSetValue } from 'react-hook-form';\nimport CreateCustomerButtonIcon from '../components/CreateCustomerButtonIcon';\nimport CustomerInfoComponent from '../components/CustomerInfoComponent';\nimport { destinationAddressInputsProps } from '../components/DestinationInputs';\nimport { UseFormReturn } from 'react-hook-form/dist/types';\nimport { throttleCallback } from '../../../../utils/lodash.utils';\nimport { useCommunicationSelector, useInvoicesSelector, useShipmentsSelector } from '../../../../redux/selectors.store';\n\nexport interface OrderInfoStepProps extends FormOrderStepBaseProps {\n  isGroup?: boolean;\n  defaultValues?: ICreateOrderInfoFormState;\n  getFormMethods?: () => UseFormReturn<ICreateOrderInfoFormState>;\n}\n\nconst useOrderInfoForm = () => useFormContext<ICreateOrderInfoFormState>();\n\ntype ConfirmsStateKay = 'hasDeliveryInvoice' | 'holdDeliveryPayment' | 'holdOrderPayment' | 'hasReceiverInfo';\ntype FormFieldPaths = Path<ICreateOrderInfoFormState>;\nconst OrderInfoStep: React.FC<OrderInfoStepProps> = ({ getFormMethods, onChangeValidStatus }) => {\n  const [touchedFields, setTouchedFields] = useState<Record<FormFieldPaths | string, boolean>>({});\n  const modalS = useModalService();\n  const [confirms, setConfirms] = useState<Record<ConfirmsStateKay | string, boolean>>({});\n  // TODO refactoring\n  useEffect(() => {\n    console.debug('OrderInfoStep', { touchedFields });\n  }, [touchedFields]);\n\n  const shipmentMethodsList = useTranslatedListData(useShipmentsSelector().methods, { withFullLabel: true });\n  const communicationMethodsList = useTranslatedListData(useCommunicationSelector().methods, { withFullLabel: true });\n  const invoicingMethods = useTranslatedListData(useInvoicesSelector().methods, { withFullLabel: true });\n\n  const setTouchedField = (path: FormFieldPaths) => {\n    setTouchedFields(p => ({ ...p, [path]: true }));\n  };\n\n  const {\n    formState: { isValid, errors },\n    register,\n    setValue,\n    unregister,\n    watch,\n    trigger,\n  } = useOrderInfoForm();\n\n  const formValues = watch();\n\n  const handleOnChangeValue: UseFormSetValue<ICreateOrderInfoFormState> = (path, value) => {\n    try {\n      setValue(path, value as never);\n      throttleCallback(() =>\n        trigger()\n          .then(isValid => {\n            isValid && onChangeValidStatus && onChangeValidStatus(isValid);\n          })\n          .catch(e => {\n            console.error('handleOnChangeValue trigger error', e);\n          })\n      );\n      setTouchedField(path);\n    } catch (e) {\n      console.error('handleOnChangeValue: ', e);\n    }\n  };\n  const registerConfirmSelectHandler = (name: ConfirmsStateKay) => {\n    return (value: boolean) => {\n      setConfirms(p => ({ ...p, [name]: value }));\n      if (!value) {\n        if (name === 'hasDeliveryInvoice') {\n          return unregister('deliveryInfo.invoiceInfo');\n        }\n        if (name === 'hasReceiverInfo') {\n          return unregister('receiver');\n        }\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (onChangeValidStatus) onChangeValidStatus(isValid);\n  }, [isValid, onChangeValidStatus]);\n\n  return (\n    <Inputs flex={1} overflow={'auto'}>\n      <FlexBox fillWidth gap={8} padding={'8px 2px'} style={{ maxWidth: 480, width: '100%', margin: '0 auto' }}>\n        {formValues?.manager && (\n          <InputLabel label={t('manager')}>\n            <CustomerInfoComponent info={formValues?.manager?.user as never} isManager />\n          </InputLabel>\n        )}\n\n        <ButtonIcon\n          variant={'outlinedSmall'}\n          onClick={() => {\n            const m = modalS.open({\n              ModalChildren: SelectManagerModal,\n              modalChildrenProps: {\n                onSelect: pr => {\n                  handleOnChangeValue('manager', pr);\n                  m?.onClose && m?.onClose();\n                },\n              },\n            });\n          }}\n        >\n          {t(!formValues?.manager ? 'Select manager' : 'Change manager')}\n        </ButtonIcon>\n      </FlexBox>\n\n      <FlexBox padding={'0 2px'}>\n        <StAccordionItem\n          contentContainerStyle={{ padding: '8px 0', gap: 8 }}\n          open\n          renderHeader={\n            <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>{`${t('Customer')} | ${t(\n              'Receiver'\n            )}`}</Text>\n          }\n        >\n          {formValues?.customer && (\n            <>\n              <InputLabel label={t('Customer information')}>\n                <CustomerInfoComponent info={formValues?.customer} />\n              </InputLabel>\n\n              <BorderedBox fillWidth overflow={'hidden'}>\n                <InputLabel label={t('Communication methods')}>\n                  <TagButtonsFilter\n                    multiple\n                    numColumns={2}\n                    values={formValues?.communication?.customer}\n                    resetButtonLabel={t('Not needed')}\n                    options={communicationMethodsList.map(mtd => ({ ...mtd, value: mtd._id }))}\n                    resetButtonPosition={'start'}\n                    onChange={value => {\n                      handleOnChangeValue('communication.customer', value);\n                    }}\n                  />\n                </InputLabel>\n              </BorderedBox>\n            </>\n          )}\n\n          <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'center'}>\n            <CreateCustomerButtonIcon\n              onSuccess={d => {\n                handleOnChangeValue('customer', d);\n              }}\n            />\n\n            <ButtonIcon\n              variant={'outlinedSmall'}\n              flex={1}\n              onClick={() => {\n                const m = modalS.open({\n                  ModalChildren: SelectCustomerModal,\n                  modalChildrenProps: {\n                    onSelect: data => {\n                      handleOnChangeValue('customer', data);\n                      m?.onClose && m?.onClose();\n                    },\n                  },\n                });\n              }}\n            >\n              {t(!formValues?.customer ? 'Select customer' : 'Change customer')}\n            </ButtonIcon>\n          </FlexBox>\n\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Receiver')}>\n              <ButtonSwitch\n                onChange={registerConfirmSelectHandler('hasReceiverInfo')}\n                value={confirms?.hasReceiverInfo || !!formValues?.receiver}\n                rejectLabel={'The same'}\n                acceptLabel={'Another'}\n              />\n            </InputLabel>\n          </BorderedBox>\n\n          {(confirms?.hasReceiverInfo || formValues?.receiver) && (\n            <>\n              <InputLabel label={t('Receiver information')}>\n                <CustomerInfoComponent info={formValues?.receiver} />{' '}\n              </InputLabel>\n\n              <BorderedBox fillWidth>\n                <InputLabel label={t('Communication methods')}>\n                  <TagButtonsFilter\n                    multiple\n                    numColumns={2}\n                    values={formValues?.communication?.receiver}\n                    resetButtonLabel={t('Without')}\n                    options={communicationMethodsList.map(mtd => ({ ...mtd, value: mtd._id }))}\n                    resetButtonPosition={'start'}\n                    onChange={value => {\n                      handleOnChangeValue('communication.receiver', value);\n                    }}\n                  />\n                </InputLabel>\n              </BorderedBox>\n            </>\n          )}\n\n          {confirms?.hasReceiverInfo && (\n            <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'center'}>\n              <CreateCustomerButtonIcon\n                isReceiver\n                onSuccess={d => {\n                  handleOnChangeValue('receiver', d);\n                }}\n              />\n\n              <ButtonIcon\n                variant={'outlinedSmall'}\n                flex={1}\n                onClick={() => {\n                  const m = modalS.open({\n                    ModalChildren: SelectCustomerModal,\n                    modalChildrenProps: {\n                      onSelect: i => {\n                        handleOnChangeValue('receiver', i);\n                        m?.onClose && m?.onClose();\n                      },\n                    },\n                  });\n                }}\n              >\n                {t(!formValues?.receiver ? 'Select receiver' : 'Change receiver')}\n              </ButtonIcon>\n            </FlexBox>\n          )}\n        </StAccordionItem>\n\n        <StAccordionItem\n          contentContainerStyle={{ padding: '8px 2px' }}\n          open\n          renderHeader={\n            <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>\n              {t('Invoicing')}\n            </Text>\n          }\n        >\n          <InputLabel label={t('Payment method')} required>\n            <CheckboxesListSelector\n              options={invoicingMethods}\n              currentOption={formValues?.invoiceInfo?.method}\n              onChangeIndex={i => {\n                handleOnChangeValue('invoiceInfo.method', invoicingMethods[i]);\n              }}\n            />\n          </InputLabel>\n\n          <InputLabel label={t('Expired at')} required>\n            <InputText\n              placeholder={t('Expired at')}\n              type={'datetime-local'}\n              required\n              {...register('invoiceInfo.expiredAt', { required: true })}\n            />\n          </InputLabel>\n        </StAccordionItem>\n\n        <StAccordionItem\n          contentContainerStyle={{ padding: '0 2px' }}\n          open\n          renderHeader={\n            <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>\n              {`${t('Shipment')} | ${t('Delivery')}`}\n            </Text>\n          }\n        >\n          <BorderedBox fillWidth gap={8}>\n            <InputLabel label={t('Delivery method')} required>\n              <CheckboxesListSelector\n                options={shipmentMethodsList}\n                currentOption={formValues?.deliveryInfo?.method}\n                onChangeIndex={i => {\n                  handleOnChangeValue('deliveryInfo.method', shipmentMethodsList[i]);\n                }}\n              />\n            </InputLabel>\n          </BorderedBox>\n\n          <BorderedBox fillWidth style={{ columnGap: 8, display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n            {destinationAddressInputsProps.map(({ name, label, required }) => {\n              return (\n                <InputLabel\n                  key={`dest-addr-${label}`}\n                  label={label}\n                  error={errors?.deliveryInfo?.destination ? errors?.deliveryInfo?.destination[name] : undefined}\n                  required={required}\n                >\n                  <InputText\n                    required={required}\n                    placeholder={label}\n                    {...register(`deliveryInfo.destination.${name}`, { required })}\n                  />\n                </InputLabel>\n              );\n            })}\n          </BorderedBox>\n\n          <BorderedBox fillWidth gap={8}>\n            <InputLabel label={t('Has payment')} required>\n              <ButtonSwitch\n                onChange={registerConfirmSelectHandler('hasDeliveryInvoice')}\n                value={confirms?.hasDeliveryInvoice || !!formValues?.deliveryInfo?.invoiceInfo}\n              />\n            </InputLabel>\n          </BorderedBox>\n\n          <BorderedBox fillWidth gap={8}>\n            {(confirms?.hasDeliveryInvoice || !!formValues?.deliveryInfo?.invoiceInfo?.method) && (\n              <InputLabel label={t('Payment method')} required>\n                <CheckboxesListSelector\n                  options={invoicingMethods}\n                  currentOption={formValues?.deliveryInfo?.invoiceInfo?.method}\n                  onChangeIndex={i => {\n                    handleOnChangeValue('deliveryInfo.invoiceInfo.method', invoicingMethods[i]);\n                  }}\n                />\n              </InputLabel>\n            )}\n          </BorderedBox>\n        </StAccordionItem>\n      </FlexBox>\n    </Inputs>\n  );\n};\nconst Inputs = styled(FlexBox)``;\n\nconst BorderedBox = styled(FlexBox)`\n  padding-bottom: 8px;\n\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nconst StAccordionItem = styled(FormAccordionItem)`\n  & .content {\n    max-width: 480px;\n    width: 100%;\n    margin: auto;\n  }\n`;\n\nexport default OrderInfoStep;\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import { ModalFormProps } from '../../ModalForm';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { enumToFilterOptions } from '../../../utils/fabrics';\nimport ModalFilter from '../../ModalForm/ModalFilter';\nimport { useStepsHandler } from '../../../utils/createStepChecker';\nimport { useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { ModalHeader } from '../../atoms';\nimport { t } from '../../../lang';\nimport StepsController from '../components/StepsController';\nimport OrderGroupsStuffingStep from './steps/OrderGroupsStuffingStep';\nimport OrderInfoStep from './steps/OrderInfoStep';\nimport { ICreateOrderInfoFormState, IOrder, IOrderTempSlot } from '../../../redux/orders/orders.types';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { ToastService } from '../../../services';\nimport _ from 'lodash';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { orderInfoBaseSchema } from '../validation';\nimport { ServiceName, useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { createApiCall, OrdersApi } from '../../../api';\nimport { formatDateForInputValue } from '../../../utils';\n\nimport * as fns from 'date-fns';\n\nexport interface FormCreateOrdersGroupProps\n  extends Omit<ModalFormProps<any, any, FormCreateOrdersGroupStepsData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<FormCreateOrdersGroupStepsData>;\n}\nexport interface FormCreateOrdersGroupStepsData {\n  slots?: IOrderTempSlot[];\n  info?: ICreateOrderInfoFormState;\n\n  orders?: IOrder[];\n}\nexport enum FormCreateOrdersGroupStepsEnum {\n  Stuffing = 'Stuffing',\n  Info = 'Info',\n  // Confirmation = 'Confirmation',\n  // Invoices = 'Invoices',\n}\n\nconst steps = enumToFilterOptions(FormCreateOrdersGroupStepsEnum);\n\nconst stepsProcessInitialState: Record<FormCreateOrdersGroupStepsEnum | string, boolean> = {\n  [FormCreateOrdersGroupStepsEnum.Stuffing]: true,\n  [FormCreateOrdersGroupStepsEnum.Info]: false,\n  // [FormCreateOrdersGroupStepsEnum.Confirmation]: false,\n  // [FormCreateOrdersGroupStepsEnum.Invoices]: false,\n};\nconst FormCreateOrdersGroup: React.FC<FormCreateOrdersGroupProps> = ({ onSubmit, onClose }) => {\n  const service = useAppServiceProvider()[ServiceName.orders];\n  const currentGroupFormState = useOrdersSelector().ordersGroupFormData;\n  const { stepsMap, stepIdx, setNextStep, setPrevStep, getCurrentStep, isLast } = useStepsHandler(steps);\n  const [isStepFinished, setIsStepFinished] =\n    useState<Record<FormCreateOrdersGroupStepsEnum | string, boolean>>(stepsProcessInitialState);\n\n  const handleValidStatus = (name: keyof typeof FormCreateOrdersGroupStepsEnum) => (value: boolean) => {\n    setIsStepFinished(p => ({ ...p, [FormCreateOrdersGroupStepsEnum[name]]: value }));\n  };\n\n  const formOrderInfo = useForm<ICreateOrderInfoFormState>({\n    defaultValues: {\n      ...currentGroupFormState.info,\n      invoiceInfo: {\n        expiredAt: formatDateForInputValue(fns.addDays(new Date(), 1)),\n        ...currentGroupFormState.info?.invoiceInfo,\n      },\n    },\n    resolver: yupResolver(orderInfoBaseSchema),\n    reValidateMode: 'onChange',\n  });\n  const orderInfoFormValues = formOrderInfo.watch();\n\n  useEffect(() => {\n    console.log(orderInfoFormValues);\n  }, [orderInfoFormValues]);\n\n  const renderStep = useMemo(() => {\n    if (stepsMap?.Stuffing) {\n      return <OrderGroupsStuffingStep onChangeValidStatus={handleValidStatus('Stuffing')} />;\n    }\n    if (stepsMap?.Info) {\n      return (\n        <OrderInfoStep isGroup getFormMethods={() => formOrderInfo} onChangeValidStatus={handleValidStatus('Info')} />\n      );\n    }\n  }, [formOrderInfo, stepsMap?.Info, stepsMap?.Stuffing]);\n\n  const canGoNext = useMemo(() => {\n    return isStepFinished[getCurrentStep().value];\n  }, [getCurrentStep, isStepFinished]);\n\n  const handlePrevPress = () => {\n    if (getCurrentStep().value === 'Info') {\n      service.updateCurrentGroupFormInfoData(_.cloneDeep(orderInfoFormValues));\n    }\n    setPrevStep();\n  };\n\n  const handleNextPress = () => {\n    if (getCurrentStep().value === 'Info') {\n      service.updateCurrentGroupFormInfoData(_.cloneDeep(orderInfoFormValues));\n    }\n    if (canGoNext) {\n      setNextStep();\n    } else {\n      ToastService.error(`${t('Step is not finished')}: \"${getCurrentStep().value.toUpperCase()}\"`);\n    }\n  };\n  const canAccept = useMemo(() => {\n    if (stepsMap.Stuffing) {\n      return isStepFinished.Stuffing;\n    }\n    if (stepsMap.Info) {\n      return isStepFinished.Info;\n    }\n\n    return false;\n  }, [isStepFinished.Info, isStepFinished.Stuffing, stepsMap.Info, stepsMap.Stuffing]);\n\n  const handleAcceptPress = () => {\n    if (!canAccept) {\n      ToastService.error('Form is not valid');\n      return;\n    }\n    // if (stepsMap.Info) {\n    //   modalS.open({\n    //     ModalChildren: (p: { onClose?: () => void; compId?: string }) => {\n    //       return (\n    //         <ModalForm\n    //           {...p}\n    //           title={t('Accept orders?')}\n    //           onSubmit={() => {\n    //             window.confirm('You accept?') && p?.onClose && p?.onClose();\n    //           }}\n    //         >\n    //           <FlexBox fillWidth></FlexBox>\n    //         </ModalForm>\n    //       );\n    //     },\n    //   });\n    // }\n\n    createApiCall(\n      {\n        data: { data: { info: orderInfoFormValues, slots: currentGroupFormState.slots } },\n        onSuccess: data => {\n          console.log(data);\n        },\n        onError: error => {\n          console.log(error);\n        },\n        onLoading: loading => {},\n      },\n      OrdersApi.createManyOrdersGroupedByWarehouse,\n      OrdersApi\n    );\n\n    console.log(getCurrentStep());\n    console.log(currentGroupFormState);\n  };\n\n  return (\n    <FormProvider {...formOrderInfo}>\n      <Form>\n        <ModalHeader title={t('Create orders group by warehouse')} onBackPress={onClose} />\n\n        <Content fillWidth flex={1} overflow={'hidden'}>\n          <ModalFilter filterOptions={steps} asStepper currentIndex={stepIdx} optionProps={{ fitContentH: true }} />\n\n          {renderStep}\n        </Content>\n\n        <Footer padding={'8px'}>\n          <StepsController\n            steps={steps}\n            onNextPress={handleNextPress}\n            onPrevPress={handlePrevPress}\n            currentIndex={stepIdx}\n            canGoNext={true}\n            canAccept={isLast}\n            onAcceptPress={handleAcceptPress}\n            onCancelPress={stepIdx === 0 ? onClose : undefined}\n          />\n        </Footer>\n      </Form>\n    </FormProvider>\n  );\n};\nconst Form = styled.div`\n  color: ${p => p.theme.fontColorSidebar};\n\n  display: flex;\n  flex-direction: column;\n\n  width: 98vw;\n  height: 98vh;\n  padding: 0 8px;\n\n  background-color: ${p => p.theme.modalBackgroundColor};\n`;\n\nconst Content = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nconst Footer = styled(FlexBox)``;\nexport default FormCreateOrdersGroup;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { FilterOption } from '../../ModalForm/ModalFilter';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { checks } from '../../../utils';\nimport { t } from '../../../lang';\nimport { useMediaQuery } from 'react-responsive';\n\nexport type StepChangeEvent<V = any, D = any> = {\n  option: FilterOption<V, D>;\n  value: V;\n  index: number;\n  name?: string;\n};\nexport type StepChangeHandler<V = any, D = any> = (event: StepChangeEvent<V, D>) => void;\nexport interface StepsControllerProps<V = any> {\n  steps?: FilterOption<V>[];\n  currentIndex?: number;\n  onNextPress?: StepChangeHandler<V>;\n  onPrevPress?: StepChangeHandler<V>;\n\n  onCancelPress?: () => void;\n  onAcceptPress?: () => void;\n\n  canGoNext?: boolean;\n  canAccept?: boolean;\n  canSubmit?: boolean;\n\n  cancelButton?: boolean;\n  submitButton?: boolean;\n  acceptButton?: boolean;\n  arrowButtons?: boolean;\n}\n\nconst StepsController = <V = any,>({\n  steps,\n  currentIndex = 0,\n  onNextPress,\n  onPrevPress,\n  onCancelPress,\n  onAcceptPress,\n  canGoNext = true,\n  canAccept,\n  canSubmit,\n  cancelButton = true,\n  submitButton = true,\n  acceptButton,\n  arrowButtons = true,\n}: StepsControllerProps<V>) => {\n  const isTablet = useMediaQuery({ query: '(max-width: 768px)' });\n  const isMobile = useMediaQuery({ query: '(max-width: 480px)' });\n  const [current, setCurrent] = useState<number>(currentIndex);\n\n  const prevData = useMemo((): { label?: string; value: V } | null => {\n    if (!steps) return null;\n    return steps[current - 1] ? { label: steps[current - 1]?.label, value: steps[current - 1]?.value } : null;\n  }, [current, steps]);\n  const nextData = useMemo((): { label?: string; value: V } | null => {\n    if (!steps) return null;\n\n    return steps[current + 1] ? { label: steps[current + 1]?.label, value: steps[current + 1]?.value } : null;\n  }, [current, steps]);\n\n  const handlePrevPress = useCallback(() => {\n    if (steps) {\n      if (onPrevPress) {\n        if (current === 0) {\n          onCancelPress && onCancelPress();\n          return;\n        } else {\n          const newValue = current - 1;\n          onPrevPress && onPrevPress({ option: steps[newValue], value: steps[newValue].value, index: newValue });\n        }\n      } else {\n        setCurrent(prev => {\n          if (prev === 0) {\n            return prev;\n          } else {\n            return prev - 1;\n          }\n        });\n      }\n    }\n  }, [current, onCancelPress, onPrevPress, steps]);\n\n  const handleNextPress = useCallback(() => {\n    if (steps) {\n      if (onNextPress) {\n        const newValue = current + 1;\n        if (newValue === steps.length) {\n          return onAcceptPress && onAcceptPress();\n        } else {\n          return onNextPress({ option: steps[newValue], value: steps[newValue].value, index: newValue });\n        }\n      } else {\n        setCurrent(prev => {\n          return prev + 1 === steps.length ? prev + 1 : prev;\n        });\n      }\n    }\n  }, [current, onAcceptPress, onNextPress, steps]);\n\n  useEffect(() => {\n    if (checks.isNotUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  return (\n    <Container fxDirection={'row'} gap={8} fillWidth>\n      {cancelButton && !isTablet && (\n        <ActionButton variant={'defOutlinedSmall'} onClick={onCancelPress}>\n          {t('Cancel')}\n        </ActionButton>\n      )}\n\n      {arrowButtons && (\n        <ArrowButton\n          variant={isMobile ? 'onlyIconFilled' : 'filledSmall'}\n          icon={'SmallArrowLeft'}\n          onClick={handlePrevPress}\n          disabled={!prevData}\n        >\n          {prevData?.label}\n        </ArrowButton>\n      )}\n\n      {arrowButtons && (\n        <ArrowButton\n          variant={isMobile ? 'onlyIconFilled' : 'filledSmall'}\n          endIcon={'SmallArrowRight'}\n          onClick={handleNextPress}\n          disabled={!canGoNext || !nextData}\n        >\n          {nextData?.label}\n        </ArrowButton>\n      )}\n\n      {(submitButton || acceptButton) && (\n        <ActionButton\n          variant={'filledSmall'}\n          type={canSubmit && submitButton ? 'submit' : 'button'}\n          onClick={onAcceptPress}\n          disabled={canSubmit && submitButton ? !canSubmit : !canAccept}\n        >\n          {t('Accept')}\n        </ActionButton>\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  //min-height: 44px;\n  // border-top: 1px solid ${({ theme }) => theme.modalBorderColor};\n  // border-bottom: 1px solid ${({ theme }) => theme.modalBorderColor};\n`;\nconst ActionButton = styled(ButtonIcon)`\n  flex: 1;\n  min-width: min-content;\n  height: 100%;\n`;\nconst ArrowButton = styled(ButtonIcon)`\n  min-width: 34px;\n  height: 100%;\n  color: ${p => p.theme.accentColor.base};\n  fill: ${p => p.theme.accentColor.base};\n  background-color: ${p => p.theme.accentColor.light};\n  @media screen and (min-width: 480px) {\n    flex: 1;\n  }\n`;\nexport default StepsController;\n","import { FilterOption } from '../ModalForm/ModalFilter';\nimport { useEffect, useState } from 'react';\nimport { checks } from '../../utils';\nimport FlexBox from './FlexBox';\nimport CheckBox from '../TableList/TebleCells/CellComponents/CheckBox';\nimport { Text } from './Text';\n\nexport interface CheckboxesListOption<V = any> extends Partial<FilterOption<V>> {\n  description?: string;\n}\n\nexport type CheckboxesListOnChangeHandler = (ids: string[]) => void;\n\nconst CheckboxesListSelector = <V = any,>({\n  options,\n  onChangeIndex,\n  currentIndex,\n  currentOption,\n  multiple,\n  onChange,\n  value,\n  disabled,\n  disabledCheck,\n}: {\n  onChangeIndex?: (index: number) => void;\n  onChange?: CheckboxesListOnChangeHandler;\n  options?: CheckboxesListOption<V>[];\n  currentIndex?: number;\n  currentOption?: CheckboxesListOption<V>;\n  value?: string[];\n  multiple?: boolean;\n  disabled?: boolean;\n  disabledCheck?: (option: CheckboxesListOption<V>, index: number) => boolean;\n}) => {\n  const [current, setCurrent] = useState(0);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  const handleSelect = (id: string) => {\n    if (multiple) {\n      setSelectedIds(p => {\n        const newValue = selectedIds.includes(id) ? p.filter(el => el !== id) : [...p, id];\n        onChange && onChange(newValue);\n        return newValue;\n      });\n    } else {\n      setSelectedIds([id]);\n      onChange && onChange([id]);\n    }\n  };\n  const handleSetCurrent = (idx: number) => {\n    setCurrent(idx);\n    onChangeIndex && onChangeIndex(idx);\n  };\n\n  useEffect(() => {\n    if (!checks.isUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    if (multiple) return;\n    if (!checks.isUnd(currentOption) && !checks.isUnd(options)) {\n      setCurrent(options.findIndex(o => o?.value === currentOption?.value || o?._id === currentOption?._id));\n    }\n  }, [currentOption, multiple, options]);\n\n  useEffect(() => {\n    if (!multiple) return;\n    if (!checks.isUnd(value) && checks.isArray(value)) {\n      setSelectedIds(value);\n    }\n  }, [multiple, value]);\n  return (\n    <FlexBox fillWidth gap={8}>\n      {options?.map((o, idx) => {\n        const isDisabled = disabledCheck ? disabledCheck(o, idx) : disabled;\n\n        return (\n          <FlexBox\n            key={`m-opt_${o.value}`}\n            fxDirection={'row'}\n            gap={8}\n            padding={'2px 4px'}\n            alignItems={'center'}\n            style={{ opacity: isDisabled ? 0.7 : 1, pointerEvents: isDisabled ? 'none' : 'all' }}\n            onClick={() => {\n              if (isDisabled) return;\n              handleSetCurrent(idx);\n              o?._id && handleSelect(o?._id);\n            }}\n          >\n            <CheckBox\n              checked={(o?._id && selectedIds.includes(o?._id)) || idx === current}\n              size={'22px'}\n              disabled={isDisabled}\n            />\n\n            <Text>{o?.label}</Text>\n          </FlexBox>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default CheckboxesListSelector;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { ICustomer } from '../redux/customers/customers.types';\nimport { t } from '../lang';\n\nexport const customersColumns: CellTittleProps<ICustomer>[] = [\n  {\n    top: {\n      name: `${t('label')}/${t('name')}`,\n      getData: d => d?.label || `${d?.name || '---'} ${d?.secondName || '---'}`,\n    },\n    bottom: { name: 'ІПН/ЄДРПОУ', getData: d => (d.personalTaxCode || '---') + '/' + (d.taxCode || '---') },\n    width: '240px',\n    action: 'doubleDataWithAvatar',\n  },\n  {\n    top: { name: 'Тип', path: 'type', getData: d => d?.type },\n    bottom: { name: 'Статус', path: 'status' },\n    width: '120px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Емейл', path: 'email', uppercase: false },\n    bottom: { name: 'Телефон', path: 'phone' },\n    width: '170px',\n    action: 'contacts',\n  },\n  {\n    top: { name: 'Локація' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Теги', path: 'tags' },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: 'Коментар', path: 'description' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Створено', align: 'center', path: 'createdAt' },\n    bottom: { name: 'Оновлено', align: 'center', path: 'updatedAt' },\n    width: '150px',\n    action: 'dateSimple',\n  },\n];\n"],"names":["EngagementSource","isDevMode","ConfigService","engagementSourceOptions","enumToFilterOptions","Inputs","styled","FlexBox","_templateObject","_taggedTemplateLiteral","_ref","defaultState","withReferer","onSubmit","p","onClose","_objectWithoutProperties","_excluded","_useForm","useForm","defaultValues","_objectSpread","businessType","BusinessSubjectTypeEnum","register","setValue","handleSubmit","formValues","watch","isEditMode","useMemo","email","_jsx","ModalForm","title","t","fData","_","children","_jsxs","padding","InputLabel","label","required","ButtonsGroup","options","businessSubjectTypeFilterOptions","onSelect","info","value","InputText","placeholder","disabled","type","CheckboxesListSelector","currentOption","engagementSource","onChangeIndex","i","referralSystem","gap","fillWidth","fxDirection","ButtonIcon","variant","flex","StAccordionItem","FormAccordionItem","slots","onRemove","onUpdate","renderHeader","onAddSlotPress","renderFooter","theme","useTheme","renderSlots","map","slot","OrderSlotOverview","editable","onRemovePress","tempId","undefined","concat","renderHeaderComp","fillHeight","alignItems","Text","$weight","$size","height","border","modalBorderColor","style","minWidth","fontWeight","onClick","_Fragment","open","Container","fontColorSidebar","Content","_templateObject2","Buttons","_templateObject3","onChangeValidStatus","useOrdersSelector","ordersGroupFormData","modalS","useModalService","dispatch","useDispatch","handelAddSlot","useCallback","AddSlotToGroupAction","handelRemoveSlot","id","RemoveSlotFromGroupAction","handelUpdateSlot","UpdateSlotInGroupAction","groupedData","_slot$warehouse","_map$slot$warehouse$_","_map$slot$warehouse$_2","warehouse","_id","_toConsumableArray","useEffect","length","renderGroupedData","Object","keys","k","_v$warehouse","_v$warehouse2","v","OrderGroupItem","m","Modal","Modals","props","params","getIdRef","d","overflow","position","window","confirm","ToastService","asReceiver","customers","useCustomersSelector","service","useAppServiceProvider","ServiceName","tableConfigs","tableData","tableTitles","customersColumns","actionsCreator","_ctx","icon","getAll","separator","ModalChildren","FormCreateCustomer","modalChildrenProps","console","log","createDataForReq","create","data","onRowClick","rowData","refresh","TableList","users","usePermissionsSelector","res","find","pr","usersDirColumns","isSearch","onSuccess","isReceiver","customerS","iconSize","size","isManager","renderCells","_ref3","getValue","visible","name","secondName","taxCode","personalTaxCode","_info$tags","tags","join","getCustomerInfoComponentCells","_ref2","maxWidth","$align","flexWrap","destinationAddressInputsProps","throttleCallback","_console","_len","arguments","args","Array","_key","apply","fn","BorderedBox","getFormMethods","_formValues$manager","_formValues$communica","_formValues$communica2","_formValues$invoiceIn","_formValues$deliveryI","_formValues$deliveryI2","_formValues$deliveryI3","_formValues$deliveryI4","_formValues$deliveryI5","_formValues$deliveryI6","_useState","useState","_useState2","_slicedToArray","touchedFields","setTouchedFields","_useState3","_useState4","confirms","setConfirms","debug","shipmentMethodsList","useTranslatedListData","useShipmentsSelector","methods","withFullLabel","communicationMethodsList","useCommunicationSelector","invoicingMethods","useInvoicesSelector","_useOrderInfoForm","useFormContext","_useOrderInfoForm$for","formState","isValid","errors","unregister","trigger","handleOnChangeValue","path","then","catch","e","error","_defineProperty","setTouchedField","registerConfirmSelectHandler","width","margin","manager","CustomerInfoComponent","user","SelectManagerModal","contentContainerStyle","$padding","$ellipsisMode","customer","TagButtonsFilter","multiple","numColumns","values","communication","resetButtonLabel","mtd","resetButtonPosition","onChange","CreateCustomerButtonIcon","SelectCustomerModal","ButtonSwitch","hasReceiverInfo","receiver","rejectLabel","acceptLabel","invoiceInfo","method","deliveryInfo","columnGap","display","gridTemplateColumns","_errors$deliveryInfo","_errors$deliveryInfo2","destination","hasDeliveryInvoice","addDays","dirtyDate","dirtyAmount","requiredArgs","date","toDate","amount","toInteger","isNaN","Date","NaN","setDate","getDate","FormCreateOrdersGroupStepsEnum","steps","stepsProcessInitialState","_stepsProcessInitialS","Stuffing","Info","Form","modalBackgroundColor","Footer","_currentGroupFormStat","currentGroupFormState","_useStepsHandler","useStepsHandler","stepsMap","stepIdx","setNextStep","setPrevStep","getCurrentStep","isLast","isStepFinished","setIsStepFinished","handleValidStatus","formOrderInfo","expiredAt","formatDateForInputValue","fns","resolver","yupResolver","orderInfoBaseSchema","reValidateMode","orderInfoFormValues","renderStep","OrderGroupsStuffingStep","OrderInfoStep","isGroup","canGoNext","canAccept","FormProvider","ModalHeader","onBackPress","ModalFilter","filterOptions","asStepper","currentIndex","optionProps","fitContentH","StepsController","onNextPress","updateCurrentGroupFormInfoData","toUpperCase","onPrevPress","onAcceptPress","createApiCall","onError","onLoading","loading","OrdersApi","onCancelPress","ActionButton","ArrowButton","accentColor","base","light","_ref$currentIndex","_ref$canGoNext","canSubmit","_ref$cancelButton","cancelButton","_ref$submitButton","submitButton","acceptButton","_ref$arrowButtons","arrowButtons","isTablet","useMediaQuery","query","isMobile","current","setCurrent","prevData","_steps","_steps2","nextData","_steps3","_steps4","handlePrevPress","newValue","option","index","prev","handleNextPress","checks","endIcon","disabledCheck","selectedIds","setSelectedIds","findIndex","o","idx","isDisabled","opacity","pointerEvents","handleSetCurrent","includes","filter","el","CheckBox","checked","top","getData","bottom","action","uppercase","align"],"sourceRoot":""}