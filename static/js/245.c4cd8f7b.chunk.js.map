{"version":3,"file":"static/js/245.c4cd8f7b.chunk.js","mappings":"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","sources":["components/atoms/PageOverlayProvider.tsx","components/Overviews/components/OrderOverviewInfoTab.tsx","components/Overviews/OrderOverviewXL.tsx","components/AppPages/orders/PageOrderOverviewLeftSide.tsx","components/AppPages/orders/tabs/OrderContentTab.tsx","components/AppPages/orders/tabs/OrderInvoicesTab.tsx","components/AppPages/orders/tabs/OrderPaymentsTab.tsx","components/AppPages/orders/tabs/OrderShipmentsTab.tsx","components/AppPages/orders/PageOrderOverviewTabs.tsx","components/AppPages/orders/PageCurrentOrderProvider.tsx","components/AppPages/orders/PageOrderOverview.tsx","data/orders.data.ts"],"sourcesContent":["import { createContext, useCallback, useContext, useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport interface PageOverlayProviderValue {\n  getOverlayStack: () => OverlayStackItemData[];\n  overlayStack: OverlayStackItemData[];\n  createOverlayComponent: OverlayHandler;\n  removeStackItem: (id: string) => void;\n  clearStack: () => void;\n}\n\nexport type OverlayHandler = <Props = any>(params: OverlayHandlerParams<Props>) => OverlayHandlerReturn;\n\nexport interface OverlayHandlerParams<Props = any> {\n  RenderComponent: React.FC<OverlayRenderComponentProps<Props>>;\n  props?: OverlayRenderComponentProps<Props>;\n}\n\nexport interface OverlayStackItemData<Props = any> {\n  RenderComponent: React.FC<OverlayRenderComponentProps<Props>>;\n  props?: OverlayRenderComponentProps<Props>;\n  id: string;\n}\n\nexport type OverlayRenderComponentProps<Props = any> = OverlayHandlerReturn & Props;\nexport interface OverlayRenderComponent<Props = any> extends React.FC<OverlayRenderComponentProps<Props>> {}\n\nexport interface OverlayHandlerReturn {\n  onClose?: () => void;\n  index?: number;\n  overlayId?: string;\n}\nexport const PageCurrentOrderCTX = createContext({});\n\nexport const usePageOverlayService = () => useContext(PageCurrentOrderCTX) as PageOverlayProviderValue;\n\nconst PageOverlayProvider: React.FC<{ children?: React.ReactNode }> = ({ children }) => {\n  const [overlayStack, setOverlayStack] = useState<OverlayStackItemData[]>([]);\n\n  const removeStackItem = useCallback((id: string) => {\n    setOverlayStack(pStack => pStack.filter(el => el.id !== id));\n  }, []);\n\n  const clearStack = useCallback(() => {\n    setOverlayStack([]);\n  }, []);\n\n  const createOverlayComponent: OverlayHandler = useCallback(\n    params => {\n      const id = `${params.RenderComponent.name}_${nanoid(8)}`;\n\n      if (typeof params.RenderComponent === 'function') {\n        setOverlayStack(prev => {\n          const isExist = prev.find(el => el.id.includes(params.RenderComponent.name));\n\n          if (isExist) {\n            const clearedStack = prev.filter(el => el.id !== isExist.id);\n\n            return [\n              ...clearedStack,\n              {\n                ...params,\n                id,\n              },\n            ];\n          }\n\n          return [\n            ...prev,\n            {\n              ...params,\n              id,\n            },\n          ];\n        });\n      }\n\n      const returnData: OverlayHandlerReturn = {\n        onClose: () => removeStackItem(id),\n        overlayId: id,\n      };\n      return returnData;\n    },\n    [removeStackItem]\n  );\n\n  const getOverlayStack = useCallback(() => overlayStack, [overlayStack]);\n\n  const value: PageOverlayProviderValue = {\n    getOverlayStack,\n    removeStackItem,\n    clearStack,\n    createOverlayComponent,\n    overlayStack,\n  };\n\n  return <PageCurrentOrderCTX.Provider value={value}>{children}</PageCurrentOrderCTX.Provider>;\n};\nexport default PageOverlayProvider;\n","import FlexBox from '../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport React, { useMemo } from 'react';\nimport * as Cells from './Cells';\nimport { OverviewCellProps } from './Cells';\nimport { IOrder } from '../../../redux/orders/orders.types';\nimport { usePageOverlayService } from '../../atoms/PageOverlayProvider';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { t } from '../../../lang';\n\nexport interface OrderOverviewInfoTabProps {}\n\nconst OrderOverviewInfoTab: React.FC<OrderOverviewInfoTabProps> = _p => {\n  const overlayS = usePageOverlayService();\n  const currentOrder = useOrdersSelector().currentOrder;\n\n  const renderCells = useMemo(\n    () =>\n      orderOverviewCells.map(({ CellComponent, ...cell }) => {\n        if (CellComponent) {\n          return (\n            <CellComponent\n              key={cell.title}\n              setOverlayContent={overlayS.createOverlayComponent}\n              cell={cell}\n              data={currentOrder}\n            />\n          );\n        }\n        return (\n          <Cells.OverviewTextCell\n            key={cell.title}\n            setOverlayContent={overlayS.createOverlayComponent}\n            cell={cell}\n            data={currentOrder}\n          />\n        );\n      }),\n    [overlayS.createOverlayComponent, currentOrder]\n  );\n  return (\n    <Box fillWidth flex={1} overflow={'auto'}>\n      {renderCells}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)``;\nexport default OrderOverviewInfoTab;\n\nconst orderOverviewCells: OverviewCellProps<IOrder>[] = [\n  { title: t('Manager') },\n  { title: t('Group') },\n  { title: t('Status') },\n  { title: t('Client') },\n  { title: t('Receiver') },\n  { title: t('Delivery') },\n  { title: t('Payment') },\n  { title: t('Additional') },\n  // { title: t('Code _') },\n  // { title: t('Code __') },\n];\n","import { IOrder } from '../../redux/orders/orders.types';\nimport FlexBox from '../atoms/FlexBox';\nimport { ModalHeader } from '../atoms';\nimport React, { useMemo, useState } from 'react';\nimport { useOrdersSelector } from '../../redux/selectors.store';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport ButtonIcon from '../atoms/ButtonIcon/ButtonIcon';\nimport { t } from '../../lang';\nimport { useAppParams } from '../../hooks';\nimport { enumToFilterOptions } from '../../utils/fabrics';\nimport ModalFilter from '../ModalForm/ModalFilter';\nimport OrderOverviewInfoTab from './components/OrderOverviewInfoTab';\n\nexport interface OrderOverviewXLProps {\n  order?: IOrder;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onArchive?: () => void;\n  onHide?: () => void;\n  onRefresh?: () => void;\n  onCreateVariation?: (data: Record<string, string>, onSuccess?: () => void) => void;\n  onOpenRightSide?: () => void;\n  className?: string;\n}\nexport enum OrderOverviewTabs {\n  info = 'Info',\n  chat = 'Chat',\n  statuses = 'Statuses',\n  comments = 'Comments',\n  tasks = 'tasks',\n}\n\nconst tabs = enumToFilterOptions(OrderOverviewTabs);\n\nconst OrderOverviewXL: React.FC<OrderOverviewXLProps> = p => {\n  const [currentTab, setCurrentTab] = useState<number>(0);\n  // const orderS = useAppServiceProvider()[ServiceName.orders];\n  const orderId = useAppParams()?.orderId;\n  const currentOrder = useOrdersSelector().currentOrder;\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const renderTab = useMemo(() => {\n    if (tabs[currentTab].value === OrderOverviewTabs.info) {\n      return <OrderOverviewInfoTab />;\n    }\n    if (tabs[currentTab].value === OrderOverviewTabs.chat) {\n      return <OrderOverviewInfoTab />;\n    }\n    if (tabs[currentTab].value === OrderOverviewTabs.statuses) {\n      return <OrderOverviewInfoTab />;\n    }\n\n    return;\n  }, [currentTab]);\n\n  return (\n    <Container flex={1} fillWidth padding={'0 8px'}>\n      <ModalHeader\n        title={t('Order overview')}\n        onBackPress={() => {\n          if (location?.pathname) {\n            const newPath = location?.pathname?.replace(`/${currentOrder?._id || orderId}`, '');\n\n            newPath && navigate(newPath);\n          }\n        }}\n      />\n\n      <Content flex={1} fillWidth overflow={'auto'}>\n        <ModalFilter\n          filterOptions={tabs}\n          optionProps={{ fitContentH: true }}\n          onOptSelect={(_o, _v, i) => setCurrentTab(i)}\n        />\n\n        {renderTab}\n      </Content>\n\n      <Footer fxDirection={'row'} alignItems={'center'} justifyContent={'space-between'} padding={'8px 0'}>\n        <ButtonIcon\n          size={'36px'}\n          variant={'onlyIcon'}\n          iconSize={'85%'}\n          icon={'edit'}\n          disabled={!p?.onEdit}\n          onClick={p?.onEdit}\n        />\n\n        <DeleteBtn\n          variant={'onlyIcon'}\n          size={'36px'}\n          iconSize={'85%'}\n          icon={'delete'}\n          disabled={!p?.onDelete}\n          onClick={p?.onDelete}\n        />\n\n        <FlexBox fxDirection={'row'} gap={6} margin={'0 0 0 auto'}>\n          <ButtonIcon\n            size={'36px'}\n            variant={'onlyIcon'}\n            iconSize={'85%'}\n            icon={'refresh'}\n            disabled={!p?.onRefresh}\n            onClick={p?.onRefresh}\n          />\n\n          <OpenBtn\n            size={'36px'}\n            variant={'onlyIcon'}\n            iconSize={'85%'}\n            icon={'SmallArrowLeft'}\n            disabled={!p?.onOpenRightSide}\n            onClick={p?.onOpenRightSide}\n          />\n        </FlexBox>\n      </Footer>\n    </Container>\n  );\n};\nconst Container = styled(FlexBox)`\n  position: relative;\n  overflow: hidden;\n\n  background-color: ${p => p.theme.sideBarBackgroundColor};\n`;\n\nconst Content = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  border-bottom: 1px solid ${p => p.theme.sideBarBorderColor};\n`;\nconst Footer = styled(FlexBox)``;\nconst DeleteBtn = styled(ButtonIcon)`\n  fill: ${p => p.theme.globals.colors.error};\n`;\nconst OpenBtn = styled(ButtonIcon)`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n`;\nexport default OrderOverviewXL;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport React, { MouseEventHandler, useCallback, useMemo } from 'react';\nimport { usePageOverlayService } from '../../atoms/PageOverlayProvider';\nimport OrderOverviewXL from '../../Overviews/OrderOverviewXL';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\n\nexport interface PageOrderOverviewLeftSideProps {\n  toggleRightSideVisibility?: () => void;\n}\nconst PageOrderOverviewLeftSide: React.FC<PageOrderOverviewLeftSideProps> = ({ toggleRightSideVisibility }) => {\n  const { currentOrder } = useOrdersSelector();\n  const overlayService = usePageOverlayService();\n  // const modalS = useModalProvider();\n  // const [loading, setLoading] = useState(false);\n  // const { products: productsS } = useAppServiceProvider();\n\n  const onOverlayBackdropClick = useCallback(\n    (id: string): MouseEventHandler<HTMLDivElement> =>\n      ev => {\n        if (ev.target === ev.currentTarget) {\n          overlayService.removeStackItem(id);\n        }\n      },\n    [overlayService]\n  );\n\n  const renderOverlayStack = useMemo(() => {\n    const stack = overlayService.getOverlayStack();\n\n    return stack.map(({ RenderComponent, props, id }, index) => {\n      return (\n        <OverlayBox\n          key={`overlay-${id}`}\n          className={`overlay-${id}`}\n          style={{ zIndex: 20 + index }}\n          fillHeight\n          fillWidth\n          alignItems={'flex-end'}\n          onClick={onOverlayBackdropClick(id)}\n        >\n          <RenderComponent\n            key={`overlay-${id}`}\n            {...props}\n            onClose={() => {\n              overlayService.removeStackItem(id);\n            }}\n            overlayId={id}\n            index={index}\n          />\n        </OverlayBox>\n      );\n    });\n  }, [onOverlayBackdropClick, overlayService]);\n\n  return (\n    <>\n      <LeftSide>\n        <OrderOverviewXL\n          order={currentOrder}\n          onEdit={\n            currentOrder\n              ? () => {\n                  // const formData = createProductFormData(currentOrder);\n                  //\n                  // console.log('PageOrderOverviewLeftSide', formData);\n                  //\n                  // const m = modalS.handleOpenModal({\n                  //   Modal: Modals.FormCreateProduct,\n                  //   props: {\n                  //     edit: true,\n                  //     _id: currentOrder?._id,\n                  //     defaultState: formData,\n                  //     onSubmit: (d, o) => {\n                  //       productsS\n                  //         .updateById({\n                  //           data: { ...d, refreshCurrent: true },\n                  //           onSuccess: () => {\n                  //             o?.closeAfterSave && m?.onClose();\n                  //             ToastService.success(`Updated product`);\n                  //           },\n                  //         })\n                  //         .finally();\n                  //     },\n                  //   },\n                  // });\n                }\n              : undefined\n          }\n          // onRefresh={\n          //   loading\n          //     ? undefined\n          //     : () => {\n          //         // const handler = ToastService.createLoader('Refreshing...').open;\n          //       }\n          // }\n          onOpenRightSide={toggleRightSideVisibility}\n        />\n\n        <Backdrop fillWidth fillHeight isActive={renderOverlayStack.length > 0} overflow={'hidden'}>\n          {renderOverlayStack}\n        </Backdrop>\n      </LeftSide>\n    </>\n  );\n};\n\nconst LeftSide = styled(FlexBox)`\n  position: relative;\n\n  overflow: hidden;\n\n  border-right: 1px solid ${p => p.theme.modalBorderColor};\n`;\nconst Backdrop = styled(FlexBox)`\n  position: absolute;\n\n  top: 0;\n  left: ${p => (p.isActive ? 0 : '100%')};\n  z-index: 20;\n\n  background-color: ${p => p.theme.backdropColor};\n\n  transition: all ${p => p.theme.globals.timingFunctionMain};\n`;\n\nconst OverlayBox = styled(FlexBox)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 20;\n\n  animation: 'OverlayFromRight';\n`;\n\nexport default PageOrderOverviewLeftSide;\n","import FlexBox from '../../../atoms/FlexBox';\nimport ModalFilter from '../../../ModalForm/ModalFilter';\nimport TableList from '../../../TableList/TableList';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport { useMemo, useState } from 'react';\nimport { orderSlotTableColumns } from '../../../../data/orders.data';\nimport { productsFilterOptions } from '../../../../data/modalFilterOptions.data';\n\nexport interface OrderContentTabProps {}\n\nconst OrderContentTab: React.FC<OrderContentTabProps> = p => {\n  const [currentTab, setCurrentTab] = useState<number>(0);\n\n  const { currentOrder } = useOrdersSelector();\n\n  const tableData = useMemo(() => {\n    return currentOrder?.slots?.filter(el => el.product?.type === productsFilterOptions[currentTab]?.value);\n  }, [currentOrder?.slots, currentTab]);\n\n  return (\n    <FlexBox fillWidth overflow={'hidden'} flex={1}>\n      <ModalFilter\n        filterOptions={productsFilterOptions}\n        currentIndex={currentTab}\n        onOptSelect={(_o, _v, i) => {\n          setCurrentTab(i);\n        }}\n      />\n\n      <TableList isSearch={false} isFilter={false} tableData={tableData} tableTitles={orderSlotTableColumns} />\n    </FlexBox>\n  );\n};\n\nexport default OrderContentTab;\n","import TableList from '../../../TableList/TableList';\n\nexport interface OrderInvoicesTabProps {}\n\nconst OrderInvoicesTab: React.FC<OrderInvoicesTabProps> = () => {\n  return <TableList isSearch={false} isFilter={false} />;\n};\n\nexport default OrderInvoicesTab;\n","import TableList from '../../../TableList/TableList';\n\nexport interface OrderPaymentsTabProps {}\n\nconst OrderPaymentsTab: React.FC<OrderPaymentsTabProps> = () => {\n  return <TableList isSearch={false} isFilter={false} />;\n};\n\nexport default OrderPaymentsTab;\n","import TableList from '../../../TableList/TableList';\n\nexport interface OrderShipmentsTabProps {}\n\nconst OrderShipmentsTab: React.FC<OrderShipmentsTabProps> = () => {\n  return <TableList isSearch={false} isFilter={false} />;\n};\n\nexport default OrderShipmentsTab;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { Text } from '../../atoms/Text';\nimport ModalFilter, { FilterSelectHandler } from '../../ModalForm/ModalFilter';\nimport { useMemo, useState } from 'react';\nimport { enumToFilterOptions } from '../../../utils/fabrics';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { useAppParams } from '../../../hooks';\nimport OrderContentTab from './tabs/OrderContentTab';\nimport OrderInvoicesTab from './tabs/OrderInvoicesTab';\nimport OrderPaymentsTab from './tabs/OrderPaymentsTab';\nimport OrderShipmentsTab from './tabs/OrderShipmentsTab';\n\nexport interface PageOrderOverviewTabsProps {\n  isVisible?: boolean;\n  toggleVisibility?: () => void;\n}\nenum OrderTabNameEnum {\n  Content = 'Content',\n  Invoices = 'Invoices',\n  Payments = 'Payments',\n  Shipments = 'Shipments',\n}\nconst toggleOptions = enumToFilterOptions(OrderTabNameEnum);\nconst PageOrderOverviewTabs = ({ toggleVisibility, isVisible }: PageOrderOverviewTabsProps) => {\n  const orderId = useAppParams()?.orderId;\n\n  const { currentOrder } = useOrdersSelector();\n  // const service = useAppServiceProvider()[ServiceName.orders];\n  const [current, setCurrent] = useState<OrderTabNameEnum>(OrderTabNameEnum.Content);\n\n  const renderTab = useMemo(() => {\n    if (current === OrderTabNameEnum.Content) {\n      return <OrderContentTab />;\n    }\n    if (current === OrderTabNameEnum.Invoices) {\n      return <OrderInvoicesTab />;\n    }\n    if (current === OrderTabNameEnum.Payments) {\n      return <OrderPaymentsTab />;\n    }\n    if (current === OrderTabNameEnum.Shipments) {\n      return <OrderShipmentsTab />;\n    }\n  }, [current]);\n\n  const filterHandler: FilterSelectHandler<OrderTabNameEnum> = (_, value, index) => {\n    setCurrent(value);\n  };\n\n  return (\n    <RightSide overflow={'hidden'} fillHeight isVisible={isVisible}>\n      <Top fillWidth gap={4} isVisible={isVisible} fxDirection={'row'} justifyContent={'space-between'}>\n        <ButtonIcon\n          variant={'textExtraSmall'}\n          icon={'SmallArrowLeft'}\n          style={{ padding: 6 }}\n          onClick={toggleVisibility}\n        >\n          {'Back'}\n        </ButtonIcon>\n\n        <FlexBox padding={'0 8px'}>\n          <Text $weight={600} $size={14}>\n            {currentOrder?.code}\n          </Text>\n\n          <Text $size={10}>{orderId}</Text>\n        </FlexBox>\n      </Top>\n\n      <ModalFilter filterOptions={toggleOptions} defaultValue={current} onOptSelect={filterHandler} preventFilter />\n\n      {renderTab}\n    </RightSide>\n  );\n};\nconst RightSide = styled(FlexBox)<{ isVisible?: boolean }>`\n  overflow: auto;\n\n  max-width: 100%;\n\n  transition: ${p => p.theme.globals.timingFunctionMain};\n  background-color: ${p => p.theme.backgroundColorLight};\n\n  @media screen and (min-width: 768px) {\n    min-width: 320px;\n  }\n\n  @media screen and (max-width: 768px) {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 20;\n\n    transform: translateX(${p => (p.isVisible ? 0 : 100)}%);\n\n    box-shadow: 0 12px 26px rgba(0, 0, 0, 0.25);\n  }\n`;\n\nconst Top = styled(FlexBox)<{ isVisible?: boolean }>`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default PageOrderOverviewTabs;\n","import React, { createContext, useCallback, useContext, useMemo } from 'react';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { IOrder } from '../../../redux/orders/orders.types';\n\nexport interface PageCurrentOrderProviderProps {\n  children?: React.ReactNode;\n}\n\nexport interface PageCurrentOrderProviderValue {\n  currentOrder?: IOrder;\n  clearCurrent: () => void;\n  mainPagePath?: string;\n}\n\nexport const PageCurrentOrderCTX = createContext({});\n\nexport const usePageCurrentOrder = () => useContext(PageCurrentOrderCTX) as PageCurrentOrderProviderValue;\n\nconst PageCurrentOrderProvider: React.FC<PageCurrentOrderProviderProps> = ({ children }) => {\n  const { currentOrder } = useOrdersSelector();\n  // const service = useAppServiceProvider()[ServiceName.orders];\n\n  const clearCurrent = useCallback(() => {\n    // service.clearCurrent({});\n    console.log('clear current order');\n  }, []);\n\n  const CTX = useMemo(\n    (): PageCurrentOrderProviderValue => ({\n      currentOrder,\n      clearCurrent,\n    }),\n    [currentOrder, clearCurrent]\n  );\n\n  return <PageCurrentOrderCTX.Provider value={CTX}>{children}</PageCurrentOrderCTX.Provider>;\n};\nexport default PageCurrentOrderProvider;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { takeFullGridArea } from '../pagesStyles';\nimport { AppGridPage } from '../pages';\nimport { useAppParams } from '../../../hooks';\nimport PageOverlayProvider from '../../atoms/PageOverlayProvider';\nimport PageOrderOverviewLeftSide from './PageOrderOverviewLeftSide';\nimport PageOrderOverviewTabs from './PageOrderOverviewTabs';\nimport { BaseAppPageProps } from '../index';\nimport PageCurrentOrderProvider from './PageCurrentOrderProvider';\n\ninterface Props extends BaseAppPageProps {}\n\n// const loader = ToastService.createLoader('Loading order info');\n\nconst PageOrderOverview: React.FC<Props> = ({ path }) => {\n  const [isTabsSideVisible, setIsTabsSideVisible] = useState<boolean>(false);\n  const { orderId } = useAppParams();\n\n  const toggleRightSide = useCallback(() => {\n    setIsTabsSideVisible(p => !p);\n  }, []);\n\n  useEffect(() => {\n    if (orderId) {\n      console.log('PageOrderOverview', orderId);\n    }\n  }, [orderId]);\n\n  return (\n    <AppGridPage path={path}>\n      <PageCurrentOrderProvider>\n        <PageOverlayProvider>\n          <Page>\n            <PageOrderOverviewLeftSide toggleRightSideVisibility={toggleRightSide} />\n\n            <PageOrderOverviewTabs toggleVisibility={toggleRightSide} isVisible={isTabsSideVisible} />\n          </Page>\n        </PageOverlayProvider>\n      </PageCurrentOrderProvider>\n    </AppGridPage>\n  );\n};\nconst Page = styled.div`\n  display: grid;\n  grid-template-columns: minmax(220px, 1fr) 0;\n\n  ${takeFullGridArea};\n\n  //@media screen and (max-width: 768px) {\n  //}\n  @media screen and (min-width: 768px) {\n    grid-template-columns: minmax(360px, 1fr) 2fr;\n  }\n  @media screen and (min-width: 1000px) {\n    grid-template-columns: minmax(360px, 400px) 2fr;\n  }\n`;\nexport default PageOrderOverview;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { IOrder, IOrderSlot, OrderStatusEnum } from '../redux/orders/orders.types';\nimport { t } from '../lang';\nimport { SelectItem } from '../components/TableList/tableTypes.types';\nimport { FilterOption } from '../components/ModalForm/ModalFilter';\nimport { getStatusesByEnum } from './statuses.data';\n\nexport const orderStatusesData = getStatusesByEnum(OrderStatusEnum);\nexport const orderStatuses: FilterOption<OrderStatusEnum>[] = [\n  { _id: '1', value: OrderStatusEnum.new, label: t(OrderStatusEnum.new), color: 'rgb(136,222,255)' },\n  { _id: '2', value: OrderStatusEnum.inWork, label: t(OrderStatusEnum.inWork), color: 'rgb(239,173,255)' },\n  {\n    _id: '3.1',\n    value: OrderStatusEnum.rejectedByCustomer,\n    label: t(OrderStatusEnum.rejectedByCustomer),\n    color: 'rgb(255,145,2)',\n  },\n  {\n    _id: '3.2',\n    value: OrderStatusEnum.rejectedByManager,\n    label: t(OrderStatusEnum.rejectedByManager),\n    color: 'rgb(255,205,105)',\n  },\n  { _id: '4.1', value: OrderStatusEnum.active, label: t(OrderStatusEnum.active), color: 'rgb(255,236,84)' },\n  { _id: '4.2', value: OrderStatusEnum.fulfilled, label: t(OrderStatusEnum.fulfilled), color: 'rgb(151,255,95)' },\n  {\n    _id: '4.3',\n    value: OrderStatusEnum.fulfilledWithRefund,\n    label: t(OrderStatusEnum.fulfilledWithRefund),\n    color: 'rgb(255,53,53)',\n  },\n  { _id: '5.1', value: OrderStatusEnum.archived, label: t(OrderStatusEnum.archived), color: 'rgb(164,171,182)' },\n  { _id: '5.2', value: OrderStatusEnum.expired, label: t(OrderStatusEnum.expired), color: 'rgb(164,171,182)' },\n];\n\nexport type DataPath =\n  | 'owner.label'\n  | 'owner.name'\n  | 'author.name'\n  | 'author.email'\n  | 'editor.name'\n  | 'editor.email'\n  | 'auditor.name'\n  | 'auditor.email'\n  | 'contractor.name'\n  | 'contractor.type'\n  | 'eventDate'\n  | 'type'\n  | 'status'\n  | 'amount'\n  | 'currency'\n  | 'comment'\n  | 'createdAt'\n  | 'updatedAt'\n  | 'mark.label'\n  | 'invoice.label'\n  | 'invoice.code'\n  | 'invoice.number'\n  | 'payment.label'\n  | 'payment.code'\n  | 'payment.number'\n  | 'order.code'\n  | 'total'\n  | 'manager.name'\n  | 'manager.code'\n  | 'manager.email'\n  | 'customer.name'\n  | 'customer.phone'\n  | 'receiver.name'\n  | 'receiver.phone'\n  | 'invoices'\n  | 'payments'\n  | 'transporters';\nexport const ordersTableColumns: CellTittleProps<IOrder, DataPath>[] = [\n  {\n    top: { name: t('date'), align: 'center', path: 'eventDate' },\n    bottom: { name: t('time'), align: 'center' },\n    width: '90px',\n    action: 'dateSimple',\n  },\n  {\n    top: { name: t('status'), path: 'status' },\n    bottom: { name: t('type'), path: 'type' },\n    width: '100px',\n    action: 'status',\n  },\n  {\n    top: { name: t('Priority') },\n    // bottom: { name: t('type'), path: 'type' },\n    width: '100px',\n    action: 'status',\n  },\n  {\n    top: { name: t('Total amount'), align: 'end', path: 'total' },\n    bottom: { name: t('Total q-ty'), align: 'end' },\n    width: '120px',\n    action: 'numberWithSpaces',\n  },\n  {\n    top: { name: t('Group') },\n    bottom: { name: t('Number'), path: 'manager.email' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Замовник', path: 'customer.name' },\n    bottom: { name: 'Телефон', path: 'customer.phone' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Отримувач', path: 'receiver.name' },\n    bottom: { name: 'Телефон', path: 'receiver.phone' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: {\n      name: t('Invoices'),\n\n      // getData: () => ['5651651323213', '6546565165651', '546565165651', '565165132321', '54656516565'],\n    },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: t('Payments') },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('Shipments') },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('comment'), path: 'comment' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('Refunds') },\n    width: '200px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('manager'), path: 'manager.name' },\n    bottom: { name: t('email'), path: 'manager.email' },\n    width: '180px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: t('updated'), align: 'center', path: 'updatedAt' },\n    bottom: { name: t('created'), align: 'center', path: 'createdAt' },\n    width: '150px',\n    action: 'dateDbl',\n  },\n];\n\nexport const ordersSearchParams: SelectItem[] = [\n  {\n    label: 'Дата',\n    dataPath: 'eventDate',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n  { label: 'Мітка', dataPath: 'mark.label', filter: false, search: true, sort: true },\n  {\n    label: 'Статус',\n    dataPath: 'status',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n  {\n    label: t('type'),\n    dataPath: 'type',\n    filter: false,\n    search: true,\n    sort: true,\n  },\n  {\n    label: t('amount'),\n    dataPath: 'total',\n    filter: false,\n    search: true,\n    sort: true,\n  },\n  {\n    label: 'Оновлено',\n    dataPath: 'createdAt',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n  {\n    label: 'Створено',\n    dataPath: 'updatedAt',\n    filter: false,\n    search: false,\n    sort: true,\n  },\n];\n\nexport const orderSlotTableColumns: CellTittleProps<IOrderSlot>[] = [\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n  { top: { name: '' }, bottom: { name: '' }, action: 'valueByPath', width: '125px' },\n];\n"],"names":["PageCurrentOrderCTX","createContext","usePageOverlayService","useContext","_ref","children","_useState","useState","_useState2","_slicedToArray","overlayStack","setOverlayStack","removeStackItem","useCallback","id","pStack","filter","el","clearStack","createOverlayComponent","params","concat","RenderComponent","name","nanoid","prev","isExist","find","includes","clearedStack","_toConsumableArray","_objectSpread","onClose","overlayId","value","getOverlayStack","_jsx","Provider","Box","styled","FlexBox","_templateObject","_taggedTemplateLiteral","_p","overlayS","currentOrder","useOrdersSelector","renderCells","useMemo","orderOverviewCells","map","CellComponent","cell","_objectWithoutProperties","_excluded","setOverlayContent","data","title","Cells","fillWidth","flex","overflow","t","OrderOverviewTabs","tabs","enumToFilterOptions","Container","p","theme","sideBarBackgroundColor","Content","_templateObject2","sideBarBorderColor","Footer","_templateObject3","DeleteBtn","ButtonIcon","_templateObject4","globals","colors","error","OpenBtn","_templateObject5","_useAppParams","currentTab","setCurrentTab","orderId","useAppParams","navigate","useNavigate","location","useLocation","renderTab","info","chat","statuses","OrderOverviewInfoTab","_jsxs","padding","ModalHeader","onBackPress","pathname","_location$pathname","newPath","replace","_id","ModalFilter","filterOptions","optionProps","fitContentH","onOptSelect","_o","_v","i","fxDirection","alignItems","justifyContent","size","variant","iconSize","icon","disabled","onEdit","onClick","onDelete","gap","margin","onRefresh","onOpenRightSide","LeftSide","modalBorderColor","Backdrop","isActive","backdropColor","timingFunctionMain","OverlayBox","toggleRightSideVisibility","overlayService","onOverlayBackdropClick","ev","target","currentTarget","renderOverlayStack","_ref2","index","props","className","style","zIndex","fillHeight","_Fragment","OrderOverviewXL","order","undefined","length","tableData","_currentOrder$slots","slots","_el$product","_productsFilterOption","product","type","productsFilterOptions","currentIndex","TableList","isSearch","isFilter","tableTitles","orderSlotTableColumns","OrderTabNameEnum","toggleOptions","RightSide","backgroundColorLight","isVisible","Top","toggleVisibility","current","setCurrent","OrderContentTab","Invoices","OrderInvoicesTab","Payments","OrderPaymentsTab","Shipments","OrderShipmentsTab","Text","$weight","$size","code","defaultValue","_","preventFilter","clearCurrent","console","log","CTX","Page","takeFullGridArea","path","isTabsSideVisible","setIsTabsSideVisible","toggleRightSide","useEffect","AppGridPage","PageCurrentOrderProvider","PageOverlayProvider","PageOrderOverviewLeftSide","PageOrderOverviewTabs","ordersTableColumns","getStatusesByEnum","OrderStatusEnum","top","align","bottom","width","action","ordersSearchParams","label","dataPath","search","sort"],"sourceRoot":""}