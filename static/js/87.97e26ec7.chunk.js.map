{"version":3,"file":"static/js/87.97e26ec7.chunk.js","mappings":"kPAoDA,UAjCsD,SAAHA,GAAgC,IAA1BC,EAAQD,EAARC,SAAaC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GACnEC,GAAQC,EAAAA,EAAAA,MAAyBC,YACvCC,GAKIC,EAAAA,EAAAA,MAJFC,EAAcF,EAAdE,eACAC,EAAQH,EAARG,SACAC,EAAYJ,EAAZI,aAAYC,EAAAL,EACZM,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAMvB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACH,QAASA,GAAad,GAAK,IAAED,SAAUW,GAJ9B,SAACQ,GACrBnB,GAAYA,EAASmB,EACvB,IAEgFC,UAC5EC,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAAAF,SAAA,EACTJ,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAO,iCAASC,MAAOX,EAAOY,MAAOC,UAAQ,EAAAP,UACvDJ,EAAAA,EAAAA,KAACY,EAAAA,IAASV,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJR,EAAS,QAAS,CAAEiB,UAAU,KAAO,IACzCE,KAAM,QACNC,YAAa,4JACbH,UAAQ,EACRI,WAAS,QAIbf,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CAACC,MAAO,2BAAQC,MAAOX,EAAOkB,KAAKZ,UAC5CJ,EAAAA,EAAAA,KAACiB,EAAAA,GAAYf,EAAAA,EAAAA,GAAA,GAAKT,EAAe,OAAQ,CAAEyB,QAAS9B,EAAO0B,YAAa,uKAKlF,C","sources":["components/Forms/Auth/FormInviteUser.tsx"],"sourcesContent":["import ModalForm, { ModalFormProps } from '../../ModalForm';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport { useAppForm } from '../../../hooks';\nimport { ICustomRole } from '../../../redux/customRoles/customRoles.types';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { useCustomRolesSelector } from '../../../redux/selectors.store';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect';\nimport InputText from '../../atoms/Inputs/InputText';\nimport { PermissionEntity } from '../../../types/permissions.types';\nimport { FormInputs } from '../components/atoms';\n\nexport interface FormInviteUserProps extends Omit<ModalFormProps<any, any, undefined>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<FormInviteUserData, { onSuccess?: (d: PermissionEntity) => void }>;\n}\n\nexport interface FormInviteUserData {\n  email: string;\n  role?: ICustomRole;\n}\nconst FormInviteUser: React.FC<FormInviteUserProps> = ({ onSubmit, ...props }) => {\n  const roles = useCustomRolesSelector().customRoles;\n  const {\n    registerSelect,\n    register,\n    handleSubmit,\n    formState: { errors, isValid },\n  } = useAppForm<FormInviteUserData>();\n\n  const onValidSubmit = (d: FormInviteUserData) => {\n    onSubmit && onSubmit(d);\n  };\n  return (\n    <ModalForm isValid={isValid} {...props} onSubmit={handleSubmit(onValidSubmit)}>\n      <FormInputs>\n        <InputLabel label={'Емейл'} error={errors.email} required>\n          <InputText\n            {...register('email', { required: true })}\n            type={'email'}\n            placeholder={'Впишіть емейл для запрошення'}\n            required\n            autoFocus\n          />\n        </InputLabel>\n\n        <InputLabel label={'Роль'} error={errors.role}>\n          <CustomSelect {...registerSelect('role', { options: roles, placeholder: 'Оберіть роль для користувача' })} />\n        </InputLabel>\n      </FormInputs>\n    </ModalForm>\n  );\n};\n\nexport default FormInviteUser;\n"],"names":["_ref","onSubmit","props","_objectWithoutProperties","_excluded","roles","useCustomRolesSelector","customRoles","_useAppForm","useAppForm","registerSelect","register","handleSubmit","_useAppForm$formState","formState","errors","isValid","_jsx","ModalForm","_objectSpread","d","children","_jsxs","FormInputs","InputLabel","label","error","email","required","InputText","type","placeholder","autoFocus","role","CustomSelect","options"],"sourceRoot":""}