{"version":3,"file":"static/js/427.9400bac5.chunk.js","mappings":"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","sources":["components/Forms/Company/FormCreateCompany.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { BusinessSubjectTypeEnum, ICompanyFormData } from '../../../types/companies.types';\nimport ModalForm, { ModalFormProps } from '../../ModalForm';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport ButtonsGroup from '../../atoms/ButtonsGroup';\nimport { t } from '../../../lang';\nimport { useAppForm } from '../../../hooks';\nimport CustomSelect from '../../atoms/Inputs/CustomSelect/CustomSelect';\nimport { businessSubjectTypeFilterOptions, ownershipTypeFilterOptions } from '../../../data/companies.data';\nimport { ContractorsTypesEnum } from '../../../redux/directories/contractors.types';\nimport { FormInputs } from '../components/atoms';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\nimport { toReqData } from '../../../utils';\nimport { ToastService } from '../../../services';\n\nexport interface FormCreateCompanyProps extends Omit<ModalFormProps<any, any, ICompanyFormData>, 'onSubmit'> {}\nconst FormCreateCompany: React.FC<FormCreateCompanyProps> = ({ defaultState, ...props }) => {\n  const pServ = useAppServiceProvider()[AppModuleName.permissions];\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    register,\n    unregister,\n    formState: { errors },\n    handleSubmit,\n    formValues: { businessSubjectType, type: currentType, ...formValues },\n    registerSelect,\n    setValue,\n  } = useAppForm<ICompanyFormData>({\n    defaultValues: { businessSubjectType: BusinessSubjectTypeEnum.company, ...defaultState },\n    reValidateMode: 'onBlur',\n    // resolver: yupResolver(createCompanyFormSchema),\n    shouldUnregister: true,\n  });\n\n  const formRenderConfig = useMemo(\n    () => ({\n      renderOwnershipTypeSelect: businessSubjectType === BusinessSubjectTypeEnum.company,\n      renderLabelInput:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderNamesInputs:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderPersonalTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.person, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderTaxCode:\n        businessSubjectType &&\n        [BusinessSubjectTypeEnum.company, BusinessSubjectTypeEnum.entrepreneur].includes(businessSubjectType),\n      renderAttractionSourceSelect: currentType === ContractorsTypesEnum.CUSTOMER,\n    }),\n    [currentType, businessSubjectType]\n  );\n\n  function onValid(fData: ICompanyFormData) {\n    console.log({ formValues });\n\n    pServ\n      .createCompany({\n        data: toReqData(fData),\n        onSuccess(data) {\n          console.log('Company created', data);\n          ToastService.success(`Company created: ${data?.name || data?.label}`);\n          props?.onClose && props?.onClose();\n        },\n        onError() {\n          ToastService.error('Error');\n        },\n        onLoading: setIsLoading,\n      })\n      .then();\n  }\n\n  return (\n    <Form\n      fillHeight\n      width={'480px'}\n      {...props}\n      isLoading={isLoading}\n      onSubmit={handleSubmit(onValid, errors => {\n        console.error('FormCreateCompany', errors);\n      })}\n    >\n      <FormInputs flex={1} fillWidth padding={'8px 4px'} overflow={'auto'}>\n        <InputLabel label={t('businessSubjectType')} error={errors.businessSubjectType} required>\n          <ButtonsGroup\n            options={businessSubjectTypeFilterOptions}\n            currentOption={{ value: businessSubjectType }}\n            onSelect={({ value }) => {\n              setValue('businessSubjectType', value);\n              if (value !== BusinessSubjectTypeEnum.company) {\n                unregister('ownershipType');\n              }\n            }}\n          />\n        </InputLabel>\n\n        {formRenderConfig.renderOwnershipTypeSelect && (\n          <CustomSelect\n            {...registerSelect('ownershipType', {\n              options: ownershipTypeFilterOptions,\n              label: 'Форма власності',\n              placeholder: 'Оберіть форму власності компанії',\n            })}\n          />\n        )}\n\n        {formRenderConfig.renderNamesInputs && (\n          <>\n            <InputLabel label={t('name')} error={errors.name?.first} required>\n              <InputText\n                placeholder={t('Insert first name')}\n                {...register('name.first')}\n                required\n                autoFocus={formRenderConfig.renderNamesInputs}\n              />\n            </InputLabel>\n\n            <InputLabel label={t('secondName')} error={errors?.name?.second}>\n              <InputText placeholder={t('insertSecondName')} {...register('name.second')} />\n            </InputLabel>\n\n            <InputLabel label={t('Middle name')} error={errors?.name?.middle}>\n              <InputText placeholder={t('Insert middle name')} {...register('name.middle')} />\n            </InputLabel>\n          </>\n        )}\n\n        {formRenderConfig.renderLabelInput && (\n          <>\n            <InputLabel label={t('Label')} error={errors.label?.base} required={!formRenderConfig.renderNamesInputs}>\n              <InputText\n                placeholder={t('insertLabel')}\n                {...register('label.base')}\n                required={!formRenderConfig.renderNamesInputs}\n                autoFocus={!formRenderConfig.renderNamesInputs}\n              />\n            </InputLabel>\n\n            <InputLabel label={t('Print label')} error={errors.label?.print}>\n              <InputText placeholder={t('Enter print label')} {...register('label.print')} />\n            </InputLabel>\n          </>\n        )}\n\n        <InputLabel label={'Емейл (основний)'} error={errors.email} required>\n          <InputText placeholder={'Введіть основний емейл'} {...register('email')} type={'email'} required />\n        </InputLabel>\n\n        <InputLabel label={'Телефон (основний)'} error={errors.phone}>\n          <InputText placeholder={'Введіть осний контактний номер'} {...register('phone')} />\n        </InputLabel>\n\n        {formRenderConfig.renderTaxCode && (\n          <InputLabel label={t('taxCode')} error={errors.taxCode}>\n            <InputText placeholder={t('taxCode')} {...register('taxCode')} />\n          </InputLabel>\n        )}\n\n        {formRenderConfig.renderPersonalTaxCode && (\n          <InputLabel label={t('personalTaxCode')} error={errors.taxCode}>\n            <InputText placeholder={t('personalTaxCode')} {...register('personalTaxCode')} />\n          </InputLabel>\n        )}\n      </FormInputs>\n    </Form>\n  );\n};\n\nconst Form = styled(ModalForm)``;\n\nexport default FormCreateCompany;\n"],"names":["Form","styled","ModalForm","_templateObject","_taggedTemplateLiteral","_ref","_errors$name","_errors$name2","_errors$name3","_errors$label","_errors$label2","defaultState","props","_objectWithoutProperties","_excluded","pServ","useAppServiceProvider","AppModuleName","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useAppForm","useAppForm","defaultValues","_objectSpread","businessSubjectType","BusinessSubjectTypeEnum","reValidateMode","shouldUnregister","register","unregister","errors","formState","handleSubmit","_useAppForm$formValue","formValues","currentType","type","_excluded2","registerSelect","setValue","formRenderConfig","useMemo","renderOwnershipTypeSelect","renderLabelInput","includes","renderNamesInputs","renderPersonalTaxCode","renderTaxCode","renderAttractionSourceSelect","ContractorsTypesEnum","_jsx","fillHeight","width","onSubmit","fData","console","log","createCompany","data","toReqData","onSuccess","ToastService","concat","name","label","onClose","onError","onLoading","then","error","children","_jsxs","FormInputs","flex","fillWidth","padding","overflow","InputLabel","t","required","ButtonsGroup","options","businessSubjectTypeFilterOptions","currentOption","value","onSelect","_ref2","CustomSelect","ownershipTypeFilterOptions","placeholder","_Fragment","first","InputText","autoFocus","second","middle","base","print","email","phone","taxCode"],"sourceRoot":""}