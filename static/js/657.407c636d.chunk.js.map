{"version":3,"file":"static/js/657.407c636d.chunk.js","mappings":"6UAkBMA,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaK,IAAI,KAAKF,aAuEzBG,EAASC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,wHASzB,UA7EoD,SAAHC,GAO1C,IAADC,EAAAD,EANJE,cAAAA,OAAa,IAAAD,EAAGE,EAAAA,GAAiBF,EACjCG,EAAQJ,EAARI,SACAZ,EAAIQ,EAAJR,KAEAa,GADML,EAANM,OACIN,EAAJK,MACGE,GAAKC,EAAAA,EAAAA,GAAAR,EAAAS,GAERC,GASIC,EAAAA,EAAAA,IAAwB,CAC1BC,eAAaC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACRR,GAAI,IACPb,KAAAA,IAEFsB,UAAUC,EAAAA,EAAAA,GAAY1B,GACtB2B,eAAgB,aAChBC,EAAAP,EAfAQ,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QACrBC,EAAQX,EAARW,SACAC,EAAYZ,EAAZY,aACAC,EAAQb,EAARa,SACAC,EAAcd,EAAdc,eACAC,EAAcf,EAAde,eACAC,EAAUhB,EAAVgB,WACAC,EAAuBjB,EAAvBiB,wBAgBF,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAShB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJN,GAAK,IACTuB,MAAO,CAAEC,SAAU,KACnB7B,cAAeA,EACf8B,YAAa,SAACC,EAAIC,GAChBX,EAAS,OAAQW,EACnB,EACA9B,SAdJ,SAA0B+B,GACxB,GAAIA,EACF,OAAOb,GAAa,SAAAjB,GAAI,OAAI8B,EAAU9B,EAAM,CAAEmB,eAAAA,EAAgBC,eAAAA,GAAiB,GAEnF,CAUcW,CAAiBhC,GAC3BgB,QAASA,EACTiB,aACET,EAAAA,EAAAA,KAACU,EAAAA,EAAsB,CACrBd,eAAgBA,EAChBC,eAAgBA,EAChBc,aAAcZ,IAEjBa,UAEDC,EAAAA,EAAAA,MAAC7C,EAAM,CAAA4C,SAAA,CACJtC,IACC0B,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAAChD,OAAOiD,EAAAA,EAAAA,GAAE,QAASC,MAAOzB,EAAO3B,KAAMqD,UAAQ,EAAAL,UACxDZ,EAAAA,EAAAA,KAACkB,EAAAA,IAASjC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRgC,UAAQ,GACJxB,EAAS,SAAO,IACpB0B,MAAiB,OAAVrB,QAAU,IAAVA,GAAAA,EAAYlC,MAAOmD,EAAAA,EAAAA,GAAE,GAADK,OAAc,OAAVtB,QAAU,IAAVA,OAAU,EAAVA,EAAYlC,OAAeyD,cAAgBzD,QAKhFoC,EAAAA,EAAAA,KAACc,EAAAA,EAAU,CAAChD,OAAOiD,EAAAA,EAAAA,GAAE,SAAUO,UAAW,WAAYN,MAAOzB,EAAOzB,MAAOD,UAAQ,EAAA+C,UACjFZ,EAAAA,EAAAA,KAACkB,EAAAA,IAASjC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACsC,aAAaR,EAAAA,EAAAA,GAAE,gBAAoBtB,EAAS,UAAQ,IAAE5B,UAAQ,EAAC2D,WAAS,YAK7F,C","sources":["components/Forms/FormCreateTag.tsx"],"sourcesContent":["import { DirectoriesFormProps, ITagDirItem } from '../Directories/dir.types';\nimport ModalForm from '../ModalForm';\n\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport styled from 'styled-components';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport t from '../../lang';\nimport InputText from '../atoms/Inputs/InputText';\nimport React from 'react';\nimport { useAppForm } from '../../hooks';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\nimport { tagsFilterOptions } from '../../data/directories.data';\n\nexport interface FormCreateTagProps extends DirectoriesFormProps<ApiDirType.TAGS, ITagDirItem, ITagDirItem> {}\n\nconst validation = yup.object().shape({\n  type: yup.string().required(),\n  label: yup.string().max(100).required(),\n});\n\nconst FormCreateTag: React.FC<FormCreateTagProps> = ({\n  filterOptions = tagsFilterOptions,\n  onSubmit,\n  type,\n  parent,\n  data,\n  ...props\n}) => {\n  const {\n    formState: { errors, isValid },\n    register,\n    handleSubmit,\n    setValue,\n    clearAfterSave,\n    closeAfterSave,\n    formValues,\n    toggleAfterSubmitOption,\n  } = useAppForm<ITagDirItem>({\n    defaultValues: {\n      ...data,\n      type,\n    },\n    resolver: yupResolver(validation),\n    reValidateMode: 'onSubmit',\n  });\n\n  function formEventWrapper(evHandler?: AppSubmitHandler<ITagDirItem>) {\n    if (evHandler) {\n      return handleSubmit(data => evHandler(data, { clearAfterSave, closeAfterSave }));\n    }\n  }\n\n  return (\n    <ModalForm\n      {...props}\n      style={{ maxWidth: 480 }}\n      filterOptions={filterOptions}\n      onOptSelect={(_o, v) => {\n        setValue('type', v);\n      }}\n      onSubmit={formEventWrapper(onSubmit)}\n      isValid={isValid}\n      extraFooter={\n        <FormAfterSubmitOptions\n          clearAfterSave={clearAfterSave}\n          closeAfterSave={closeAfterSave}\n          toggleOption={toggleAfterSubmitOption}\n        />\n      }\n    >\n      <Inputs>\n        {filterOptions && (\n          <InputLabel label={t('type')} error={errors.type} disabled>\n            <InputText\n              disabled\n              {...register('type')}\n              value={formValues?.type ? t(`${formValues?.type}` as any).toUpperCase() : type}\n            />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={t('insertLabel')} {...register('label')} required autoFocus />\n        </InputLabel>\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n\n  padding: 16px;\n\n  background-color: inherit;\n`;\nexport default FormCreateTag;\n"],"names":["validation","yup","shape","type","required","label","max","Inputs","styled","_templateObject","_taggedTemplateLiteral","_ref","_ref$filterOptions","filterOptions","tagsFilterOptions","onSubmit","data","parent","props","_objectWithoutProperties","_excluded","_useAppForm","useAppForm","defaultValues","_objectSpread","resolver","yupResolver","reValidateMode","_useAppForm$formState","formState","errors","isValid","register","handleSubmit","setValue","clearAfterSave","closeAfterSave","formValues","toggleAfterSubmitOption","_jsx","ModalForm","style","maxWidth","onOptSelect","_o","v","evHandler","formEventWrapper","extraFooter","FormAfterSubmitOptions","toggleOption","children","_jsxs","InputLabel","t","error","disabled","InputText","value","concat","toUpperCase","direction","placeholder","autoFocus"],"sourceRoot":""}