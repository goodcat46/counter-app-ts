{"version":3,"file":"static/js/421.cb8e6a97.chunk.js","mappings":"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","sources":["components/Forms/FormProduct/FormSelectPropertiesOverlay.tsx","components/Forms/FormProduct/components/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { useProductsSelector, usePropertiesSelector } from '../../../redux/selectors.store';\nimport { ServiceName, useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { FormEventHandler, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Text } from '../../atoms/Text';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { OverlayHandlerReturn } from '../../AppPages/PageProductOverview/PageCurrentProductProvider';\nimport { OnlyUUID } from '../../../redux/global.types';\nimport { ModalFormProps } from '../../ModalForm';\nimport { ToastService } from '../../../services';\nimport { OverlayFooter, OverlayForm, OverlayHeader } from './components';\n\nexport interface FormSelectPropertiesProps\n  extends OverlayHandlerReturn,\n    Omit<ModalFormProps<any, any, string[]>, 'onSubmit' | 'onChange' | 'onSelect'> {\n  onSubmit?: AppSubmitHandler<string[]>;\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n\n  product?: OnlyUUID;\n  template?: OnlyUUID;\n\n  update?: string;\n}\n\nconst FormSelectPropertiesOverlay: React.FC<FormSelectPropertiesProps> = ({\n  onClose,\n  title,\n  defaultState,\n  onSubmit,\n  update,\n  product,\n  template,\n  onSelect,\n  onChange,\n  ...props\n}) => {\n  const currentProduct = useProductsSelector().currentProduct;\n  const service = useAppServiceProvider()[ServiceName.products];\n  const templates = usePropertiesSelector();\n  const [loading, setLoading] = useState(false);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  const templateData = useMemo(() => {\n    return templates.find(t => t._id === (template?._id || currentProduct?.template?._id));\n  }, [currentProduct?.template?._id, template?._id, templates]);\n\n  const canSubmit = useMemo(() => {\n    return currentProduct?.properties?.map(p => p._id).join(',') !== selectedIds.join(',');\n  }, [currentProduct?.properties, selectedIds]);\n\n  const handleSubmit: FormEventHandler = useCallback(\n    event => {\n      event.preventDefault();\n\n      const id = update ?? currentProduct?._id;\n      if (id) {\n        service.updateById({\n          data: { _id: id, data: { properties: selectedIds } },\n          onLoading: setLoading,\n          onSuccess: (data, _meta) => {\n            ToastService.success('Product updated');\n            onClose && onClose();\n          },\n        });\n      } else {\n        console.debug('selectedIds', selectedIds);\n      }\n\n      onSubmit && onSubmit(selectedIds);\n    },\n    [currentProduct?._id, onClose, onSubmit, selectedIds, service, update]\n  );\n\n  const handleSelect = useCallback(\n    (id: string, parentId?: string) => {\n      setSelectedIds(prev => {\n        const newData = prev.includes(id) ? prev.filter(el => el !== id) : [...prev, id];\n\n        onChange && onChange(newData);\n        onSelect && onSelect(id);\n\n        return newData;\n      });\n    },\n    [onChange, onSelect]\n  );\n\n  const renderTemplate = useMemo(() => {\n    return templateData?.childrenList\n      ?.filter(el => !el?.isSelectable)\n      .map(prop => {\n        return (\n          <PropertyBox key={`property-${prop._id}`} gap={8} fillWidth padding={'8px 0 0'}>\n            <Text style={{ flex: 1, paddingLeft: 12 }} $weight={500}>\n              {prop.label}\n            </Text>\n\n            <PropertyValuesList fillWidth padding={'8px 0'} gap={6} flexWrap={'wrap'} fxDirection={'row'}>\n              {prop.childrenList?.map(value => {\n                const isActive = selectedIds.includes(value._id);\n\n                return (\n                  <ValueTag\n                    key={`prop-value-${value._id}`}\n                    variant={isActive ? 'filledSmall' : 'outlinedSmall'}\n                    padding={'6px 8px'}\n                    fontWeight={500}\n                    onClick={() => handleSelect(value._id, prop._id)}\n                  >\n                    {value.label}\n                  </ValueTag>\n                );\n              })}\n            </PropertyValuesList>\n          </PropertyBox>\n        );\n      });\n  }, [handleSelect, selectedIds, templateData?.childrenList]);\n\n  useEffect(() => {\n    if (currentProduct?.properties) {\n      setSelectedIds(currentProduct?.properties.map(p => p._id));\n    }\n  }, [currentProduct?.properties]);\n\n  return (\n    <OverlayForm onSubmit={handleSubmit} {...props}>\n      <OverlayHeader onClose={onClose} canSubmit={canSubmit} title={title || templateData?.label} showSubmitButton />\n\n      <TemplateBox flex={1} overflow={'auto'}>\n        {renderTemplate}\n      </TemplateBox>\n\n      <OverlayFooter\n        canSubmit={canSubmit}\n        loading={loading}\n        submitButtonText={loading ? 'Loading...' : 'Підтвердити'}\n      />\n    </OverlayForm>\n  );\n};\n\nconst TemplateBox = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  border-bottom: 1px solid ${p => p.theme.sideBarBorderColor};\n  padding-bottom: 8px;\n`;\n\nconst PropertyBox = styled(FlexBox)`\n  &:not(:first-child) {\n    border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  }\n`;\nconst PropertyValuesList = styled(FlexBox)<{ numColumns?: number }>`\n  //display: grid;\n  //grid-template-columns: repeat(auto-fill, 25%);\n  //\n  //@media screen and (max-width: 480px) {\n  //  grid-template-columns: repeat(auto-fill, 50%);\n  //}\n`;\n\nconst ValueTag = styled(ButtonIcon)`\n  flex-basis: 100px;\n  min-width: max-content;\n\n  //width: 100%;\n  //min-width: unset;\n\n  // border-radius: 2px;\n  // border: 2px solid ${p => p.theme.accentColor.light};\n  //\n  // &:hover {\n  //   border: 2px solid ${p => p.theme.accentColor.base};\n  // }\n`;\nexport default FormSelectPropertiesOverlay;\n","import FlexBox from '../../../atoms/FlexBox';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport { Text } from '../../../atoms/Text';\nimport styled from 'styled-components';\nimport * as React from 'react';\n\nexport const OverlayHeader = ({\n  onClose,\n  title,\n  showSubmitButton,\n  canSubmit,\n}: {\n  canSubmit?: boolean;\n  onClose?: () => void;\n  title?: string;\n  showSubmitButton?: boolean;\n}) => {\n  return (\n    <Header padding={'4px 0'}>\n      <FlexBox fillWidth fxDirection={'row'} justifyContent={'space-between'} alignItems={'stretch'} height={'32px'}>\n        <ButtonIcon\n          variant={'textExtraSmall'}\n          icon={'SmallArrowLeft'}\n          iconSize={'22px'}\n          padding={'0 6px'}\n          style={{ minWidth: 'max-content', minHeight: '100%' }}\n          onClick={onClose}\n        >\n          {'Back'}\n        </ButtonIcon>\n\n        <FlexBox justifyContent={'center'} overflow={'hidden'}>\n          <Text\n            $weight={600}\n            $size={14}\n            style={{ textTransform: 'uppercase', textOverflow: 'ellipsis', overflow: 'hidden', whiteSpace: 'nowrap' }}\n          >\n            {title}\n          </Text>\n        </FlexBox>\n\n        {showSubmitButton && (\n          <ButtonIcon\n            variant={'textExtraSmall'}\n            gap={'6px'}\n            type={'submit'}\n            padding={'0 6px'}\n            endIcon={'done'}\n            endIconSize={'22px'}\n            style={{ minWidth: 'max-content', minHeight: '100%' }}\n            disabled={!canSubmit}\n          >\n            {'Ok'}\n          </ButtonIcon>\n        )}\n      </FlexBox>\n    </Header>\n  );\n};\nconst Header = styled(FlexBox)`\n  height: 32px;\n`;\n\nexport const OverlayFooter = ({\n  submitButtonText = 'Прийняти',\n  loading,\n  extraFooter,\n  canSubmit,\n  onCreatePress,\n  resetButtonShown,\n}: {\n  canSubmit?: boolean;\n  resetButtonShown?: boolean;\n  extraFooter?: React.ReactNode;\n  loading?: boolean;\n  onCreatePress?: () => void;\n  submitButtonText?: string;\n}) => {\n  return (\n    <Footer fillWidth>\n      {extraFooter}\n\n      <FlexBox padding={'8px 8px'} fxDirection={'row'} gap={8} alignItems={'center'}>\n        {resetButtonShown && (\n          <ButtonIcon variant={'onlyIcon'} icon={'clear'} size={'36px'} iconSize={'80%'} type={'reset'} />\n        )}\n\n        {onCreatePress && (\n          <ButtonIcon variant={'onlyIcon'} icon={'plus'} size={'36px'} iconSize={'80%'} onClick={onCreatePress} />\n        )}\n\n        <ButtonIcon\n          variant={'filledLarge'}\n          flex={1}\n          type={'submit'}\n          style={{ padding: '0 12px' }}\n          textTransform={'uppercase'}\n          fontWeight={600}\n          endIcon={'SmallArrowRight'}\n          endIconSize={'24px'}\n          disabled={loading || !canSubmit}\n        >\n          {submitButtonText}\n        </ButtonIcon>\n      </FlexBox>\n    </Footer>\n  );\n};\n\nconst Footer = styled(FlexBox)``;\n\nexport const OverlayForm = ({\n  children,\n  ...props\n}: { children?: React.ReactNode } & React.HTMLAttributes<HTMLFormElement>) => {\n  return <Form {...props}>{children}</Form>;\n};\n\nconst Form = styled.form`\n  flex: 1;\n\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  max-width: 480px;\n\n  padding: 0 8px;\n\n  background-color: ${p => p.theme.modalBackgroundColor};\n`;\n"],"names":["TemplateBox","styled","FlexBox","_templateObject","_taggedTemplateLiteral","p","theme","sideBarBorderColor","PropertyBox","_templateObject2","PropertyValuesList","_templateObject3","ValueTag","ButtonIcon","_templateObject4","accentColor","light","base","_ref","_currentProduct$templ2","onClose","title","onSubmit","defaultState","update","template","product","onSelect","onChange","props","_objectWithoutProperties","_excluded","currentProduct","useProductsSelector","service","useAppServiceProvider","ServiceName","templates","usePropertiesSelector","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","selectedIds","setSelectedIds","templateData","useMemo","find","t","_currentProduct$templ","_id","canSubmit","_currentProduct$prope","properties","map","join","handleSubmit","useCallback","event","preventDefault","id","updateById","data","onLoading","onSuccess","_meta","ToastService","console","debug","handleSelect","parentId","prev","newData","includes","filter","el","concat","_toConsumableArray","renderTemplate","_templateData$childre","childrenList","isSelectable","prop","_prop$childrenList","_jsxs","gap","fillWidth","padding","children","_jsx","Text","style","flex","paddingLeft","$weight","label","flexWrap","fxDirection","value","isActive","variant","fontWeight","onClick","useEffect","OverlayForm","_objectSpread","OverlayHeader","showSubmitButton","overflow","OverlayFooter","submitButtonText","Header","justifyContent","alignItems","height","icon","iconSize","minWidth","minHeight","$size","textTransform","textOverflow","whiteSpace","type","endIcon","endIconSize","disabled","_ref2","_ref2$submitButtonTex","extraFooter","onCreatePress","resetButtonShown","Footer","size","_ref3","Form","modalBackgroundColor"],"sourceRoot":""}