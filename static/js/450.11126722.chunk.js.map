{"version":3,"file":"static/js/450.11126722.chunk.js","mappings":"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","sources":["components/Overviews/order/tabs/orderOverviewCellsMap.tsx","components/Overviews/order/tabs/OrderOverviewInfoTab.tsx","components/Overviews/order/OrderOverviewXL.tsx","components/AppPages/orders/PageOrderOverviewLeftSide.tsx","components/AppPages/orders/tabs/OrderContentTab.tsx","components/AppPages/orders/tabs/OrderInvoicesTab.tsx","components/AppPages/orders/tabs/OrderPaymentsTab.tsx","components/AppPages/orders/PageOrderOverviewTabs.tsx","components/AppPages/orders/PageOrderProvider.tsx","components/AppPages/orders/PageOrderOverview.tsx"],"sourcesContent":["import { OverviewCellProps } from '../../components/overview-types';\nimport { OrderEntity } from '../../../../types/orders/orders.types';\nimport { t } from '../../../../lang';\nimport { OrderOverviewInfoTabsEnum } from '../OrderOverviewXL';\nimport { OrderOverviewTotals } from '../../components';\n\nconst orderOverviewCells: OverviewCellProps<OrderEntity>[] = [\n  {\n    title: t('Manager'),\n    getValue: data => data?.manager?.user?.email,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n  {\n    title: t('Reference'),\n    getValue: data => data?.reference?.internal,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n\n  {\n    title: t('Group reference'),\n    getValue: data => data?.group?.reference?.internal,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n  {\n    title: t('Group strategy'),\n    getValue: data => data?.group?.strategy,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n\n  {\n    title: t('Totals'),\n    CellComponent: OrderOverviewTotals,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n\n  {\n    title: t('Status'),\n    getValue: data => data?.status,\n    tab: OrderOverviewInfoTabsEnum.General,\n  },\n  // {\n  //   CellComponent: OverviewCells.OrderCustomerInfo,\n  //   tab: OrderOverviewInfoTabsEnum.Customer,\n  // },\n  // {\n  //   title: t('Invoicing'),\n  //   CellComponent: OverviewCells.OrderInvoicing,\n  //   tab: OrderOverviewInfoTabsEnum.Invoicing,\n  // },\n  // { title: t('Delivery'), CellComponent: OverviewCells.OrderDelivery, tab: OrderOverviewInfoTabsEnum.Delivery },\n  // {\n  //   title: t('Receiver'),\n  //   CellComponent: OverviewCells.OrderCustomerInfo,\n  //   tab: OrderOverviewInfoTabsEnum.Delivery,\n  // },\n  { title: t('Additional'), tab: OrderOverviewInfoTabsEnum.Additional },\n];\n\nexport const getOrderOverviewCellsMap = (): Record<\n  OrderOverviewInfoTabsEnum | string,\n  OverviewCellProps<OrderEntity, OrderOverviewInfoTabsEnum>[]\n> => {\n  const orderOverviewCellsMap: Record<\n    OrderOverviewInfoTabsEnum | string,\n    OverviewCellProps<OrderEntity, OrderOverviewInfoTabsEnum>[]\n  > = {};\n  orderOverviewCells.forEach(item => {\n    const tab = item.tab;\n    if (tab) {\n      if (orderOverviewCellsMap[tab]) {\n        orderOverviewCellsMap[tab].push(item);\n      } else {\n        orderOverviewCellsMap[tab] = [item];\n      }\n    }\n  });\n  return orderOverviewCellsMap;\n};\n","import FlexBox from '../../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport React, { useMemo, useState } from 'react';\nimport { useOverlayService } from '../../../../Providers/Overlay/OverlayStackProvider';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport TabSelector from '../../../atoms/TabSelector';\nimport { getOrderOverviewCellsMap } from './orderOverviewCellsMap';\nimport { orderOverviewInfoTabs, OrderOverviewInfoTabsEnum } from '../OrderOverviewXL';\nimport { OverviewTextCell } from '../../components';\n\nexport interface OrderOverviewInfoTabProps {}\nconst cellsMap = getOrderOverviewCellsMap();\n\nconst OrderOverviewInfoTab: React.FC<OrderOverviewInfoTabProps> = _p => {\n  const overlayS = useOverlayService();\n  const currentOrder = useOrdersSelector().currentOrder;\n  const [currentTab, setCurrentTab] = useState<OrderOverviewInfoTabsEnum>(OrderOverviewInfoTabsEnum.General);\n  console.log('OrderOverviewInfoTab', cellsMap);\n  const renderCells = useMemo(\n    () =>\n      cellsMap[currentTab].map(({ CellComponent, ...cell }) => {\n        if (CellComponent) {\n          return <CellComponent key={cell.title} overlayHandler={overlayS.open} cell={cell} data={currentOrder} />;\n        }\n        return <OverviewTextCell key={cell.title} overlayHandler={overlayS.open} cell={cell} data={currentOrder} />;\n      }),\n    [currentTab, overlayS.open, currentOrder]\n  );\n\n  return (\n    <Box fillWidth flex={1} overflow={'auto'}>\n      <TabSelector\n        optionProps={{ fitContentH: true }}\n        filterOptions={orderOverviewInfoTabs}\n        onOptSelect={option => {\n          setCurrentTab(option?.value);\n        }}\n      />\n\n      {renderCells}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)``;\nexport default OrderOverviewInfoTab;\n","import { OrderEntity } from '../../../types/orders/orders.types';\nimport FlexBox from '../../atoms/FlexBox';\nimport { ModalHeader } from '../../atoms';\nimport React, { useMemo, useState } from 'react';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { t } from '../../../lang';\nimport { useAppParams } from '../../../hooks';\nimport { _enumToTabs, enumToFilterOptions } from '../../../utils';\nimport TabSelector from '../../atoms/TabSelector';\nimport OrderOverviewInfoTab from './tabs/OrderOverviewInfoTab';\n\nexport enum OrderOverviewInfoTabsEnum {\n  General = 'General',\n  Customer = 'Customer',\n  Invoicing = 'Invoicing',\n  Delivery = 'Delivery',\n  Additional = 'Additional',\n}\n\nexport const orderOverviewInfoTabs = _enumToTabs(OrderOverviewInfoTabsEnum);\n\nexport interface OrderOverviewXLProps {\n  order?: OrderEntity;\n  onEdit?: () => void;\n  onDelete?: () => void;\n  onArchive?: () => void;\n  onHide?: () => void;\n  onRefresh?: () => void;\n  isRefresh?: boolean;\n  onCreateVariation?: (data: Record<string, string>, onSuccess?: () => void) => void;\n  onOpenRightSide?: () => void;\n  className?: string;\n}\nexport enum OrderOverviewTabs {\n  info = 'Info',\n  chat = 'Chat',\n  statuses = 'Statuses',\n  comments = 'Comments',\n  tasks = 'tasks',\n}\n\nconst tabs = enumToFilterOptions(OrderOverviewTabs);\n\nconst OrderOverviewXL: React.FC<OrderOverviewXLProps> = p => {\n  const [currentTab, setCurrentTab] = useState<number>(0);\n  // const orderS = useAppServiceProvider()[ServiceName.orders];\n  const orderId = useAppParams()?.orderId;\n  const currentOrder = useOrdersSelector().currentOrder;\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const renderTab = useMemo(() => {\n    if (tabs[currentTab].value === OrderOverviewTabs.info) {\n      return <OrderOverviewInfoTab />;\n    }\n\n    return null;\n  }, [currentTab]);\n\n  return (\n    <Container flex={1} fillWidth padding={'0 8px'}>\n      <ModalHeader\n        title={t('Order overview')}\n        onBackPress={() => {\n          if (location?.pathname) {\n            const newPath = location?.pathname?.replace(`/${currentOrder?._id || orderId}`, '');\n\n            newPath && navigate(newPath);\n          }\n        }}\n      />\n\n      <Content flex={1} fillWidth overflow={'auto'}>\n        <TabSelector\n          filterOptions={tabs}\n          optionProps={{ fitContentH: true }}\n          onOptSelect={(_o, _v, i) => setCurrentTab(i)}\n        />\n\n        {renderTab}\n      </Content>\n\n      <Footer fxDirection={'row'} alignItems={'center'} justifyContent={'space-between'} padding={'8px 0'}>\n        <ButtonIcon\n          size={'36px'}\n          variant={'onlyIcon'}\n          iconSize={'85%'}\n          icon={'edit'}\n          disabled={!p?.onEdit}\n          onClick={p?.onEdit}\n        />\n\n        <DeleteBtn\n          variant={'onlyIcon'}\n          size={'36px'}\n          iconSize={'85%'}\n          icon={'delete'}\n          disabled={!p?.onDelete}\n          onClick={p?.onDelete}\n        />\n\n        <FlexBox fxDirection={'row'} gap={6} margin={'0 0 0 auto'}>\n          <ButtonIcon\n            size={'36px'}\n            variant={'onlyIcon'}\n            iconSize={'85%'}\n            icon={'refresh'}\n            isLoading={p?.isRefresh}\n            disabled={!p?.onRefresh}\n            onClick={p?.onRefresh}\n          />\n\n          <OpenBtn\n            size={'36px'}\n            variant={'onlyIcon'}\n            iconSize={'85%'}\n            icon={'SmallArrowLeft'}\n            disabled={!p?.onOpenRightSide}\n            onClick={p?.onOpenRightSide}\n          />\n        </FlexBox>\n      </Footer>\n    </Container>\n  );\n};\nconst Container = styled(FlexBox)`\n  position: relative;\n  overflow: hidden;\n\n  background-color: ${p => p.theme.sideBarBackgroundColor};\n`;\n\nconst Content = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.sideBarBorderColor};\n  border-bottom: 1px solid ${p => p.theme.sideBarBorderColor};\n`;\nconst Footer = styled(FlexBox)``;\nconst DeleteBtn = styled(ButtonIcon)`\n  fill: ${p => p.theme.globals.colors.error};\n`;\nconst OpenBtn = styled(ButtonIcon)`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n`;\nexport default OrderOverviewXL;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { useState } from 'react';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { OverlayStack } from '../../../Providers/Overlay/OverlayStack';\nimport OrderOverviewXL from 'components/Overviews/order/OrderOverviewXL';\n\nexport interface PageOrderOverviewLeftSideProps {\n  toggleRightSideVisibility?: () => void;\n}\nconst PageOrderOverviewLeftSide: React.FC<PageOrderOverviewLeftSideProps> = ({ toggleRightSideVisibility }) => {\n  const { currentOrder } = useOrdersSelector();\n  const setLoading = useState(false)[1];\n  const { orders: ordersServ } = useAppServiceProvider();\n\n  return (\n    <LeftSide>\n      <OrderOverviewXL\n        order={currentOrder}\n        onRefresh={() => {\n          currentOrder?._id &&\n            ordersServ.getById({\n              data: { _id: currentOrder?._id, options: { refreshCurrent: true } },\n              onLoading: setLoading,\n            });\n        }}\n        onOpenRightSide={toggleRightSideVisibility}\n      />\n\n      <OverlayStack />\n    </LeftSide>\n  );\n};\n\nconst LeftSide = styled(FlexBox)`\n  position: relative;\n\n  overflow: hidden;\n\n  border-right: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default PageOrderOverviewLeftSide;\n","import FlexBox from '../../../atoms/FlexBox';\nimport TabSelector from '../../../atoms/TabSelector';\nimport TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport { useEffect, useMemo, useState } from 'react';\nimport { orderSlotsTableColumns } from '../../../../data/orders.data';\nimport { productsFilterOptions } from '../../../../data/modalFilterOptions.data';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\nimport { getIdRef } from '../../../../utils';\nimport { IOrderSlot } from '../../../../types/orders/orders.types';\n\nexport interface OrderContentTabProps {}\n\nconst OrderContentTab: React.FC<OrderContentTabProps> = p => {\n  const service = useAppServiceProvider()[AppModuleName.orders];\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentTab, setCurrentTab] = useState<number>(0);\n\n  const { currentOrder } = useOrdersSelector();\n\n  const tableData = useMemo(() => {\n    return currentOrder?.slots?.filter(el => el.product?.type === productsFilterOptions[currentTab]?.value);\n  }, [currentOrder?.slots, currentTab]);\n\n  const tableConfigs = useMemo((): ITableListProps<IOrderSlot> => {\n    return {\n      actionsCreator: ctx => {\n        return [\n          {\n            icon: 'refresh',\n            name: 'refresh',\n            onClick: () => {\n              if (currentOrder?._id) {\n                service.getSlots({ data: { params: { order: getIdRef(currentOrder) } }, onLoading: setIsLoading });\n              }\n            },\n          },\n        ];\n      },\n    };\n  }, [currentOrder, service]);\n\n  useEffect(() => {\n    if (currentOrder?._id) {\n      service.getSlots({ data: { params: { order: getIdRef(currentOrder) } } });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <FlexBox fillWidth overflow={'hidden'} flex={1}>\n      <FlexBox fillWidth>\n        <TabSelector\n          filterOptions={productsFilterOptions}\n          currentIndex={currentTab}\n          onOptSelect={(_o, _v, i) => {\n            setCurrentTab(i);\n          }}\n        />\n      </FlexBox>\n\n      <TableList\n        isSearch={false}\n        isFilter={false}\n        {...tableConfigs}\n        tableData={tableData}\n        isLoading={isLoading}\n        tableTitles={orderSlotsTableColumns}\n      />\n    </FlexBox>\n  );\n};\n\nexport default OrderContentTab;\n","import TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { invoicesTableColumns } from '../../../../data/invoicing.data';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useEffect, useMemo, useState } from 'react';\nimport { getIdRef } from '../../../../utils';\nimport { IInvoice } from '../../../../types/invoices.types';\nimport { OrderTabProps } from './orderTabs.types';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\n\nexport interface OrderInvoicesTabProps extends OrderTabProps {}\n\nconst OrderInvoicesTab: React.FC<OrderInvoicesTabProps> = ({ order }) => {\n  const state = useOrdersSelector();\n  const currentOrder = order ?? state?.currentOrder;\n  const service = useAppServiceProvider().get(AppModuleName.orders);\n\n  // const modalService = useModalService();\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const tableConfigs = useMemo((): ITableListProps<IInvoice> => {\n    return {\n      actionsCreator: ctx => {\n        return [\n          {\n            name: 'refresh',\n            icon: 'refresh',\n            onClick: () => {\n              if (currentOrder?._id) {\n                service.getInvoicesByOrderId({ data: { params: { order: getIdRef(currentOrder) } } });\n              }\n            },\n          },\n        ];\n      },\n    };\n  }, [currentOrder, service]);\n\n  useEffect(() => {\n    if (currentOrder?._id) {\n      service.getInvoicesByOrderId({ data: { params: { order: getIdRef(currentOrder) } }, onLoading: setIsLoading });\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <TableList\n      {...tableConfigs}\n      isSearch={false}\n      isFilter={false}\n      isLoading={isLoading}\n      tableData={currentOrder?.invoices}\n      tableTitles={invoicesTableColumns}\n    />\n  );\n};\n\nexport default OrderInvoicesTab;\n","import TableList from '../../../TableList/TableList';\n\nexport interface OrderPaymentsTabProps {}\n\nconst OrderPaymentsTab: React.FC<OrderPaymentsTabProps> = () => {\n  return <TableList isSearch={false} isFilter={false} />;\n};\n\nexport default OrderPaymentsTab;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { Text } from '../../atoms/Text';\nimport TabSelector, { FilterSelectHandler } from '../../atoms/TabSelector';\nimport { useMemo, useState } from 'react';\nimport { enumToFilterOptions } from '../../../utils';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { useAppParams } from '../../../hooks';\nimport OrderContentTab from './tabs/OrderContentTab';\nimport OrderInvoicesTab from './tabs/OrderInvoicesTab';\nimport OrderPaymentsTab from './tabs/OrderPaymentsTab';\n\nexport interface PageOrderOverviewTabsProps {\n  isVisible?: boolean;\n  toggleVisibility?: () => void;\n}\nenum OrderTabNameEnum {\n  Content = 'Content',\n  Invoices = 'Invoices',\n  Payments = 'Payments',\n  // Shipments = 'Shipments',\n}\nconst toggleOptions = enumToFilterOptions(OrderTabNameEnum);\nconst PageOrderOverviewTabs = ({ toggleVisibility, isVisible }: PageOrderOverviewTabsProps) => {\n  const orderId = useAppParams()?.orderId;\n\n  const { currentOrder } = useOrdersSelector();\n  // const service = useAppServiceProvider()[ServiceName.orders];\n  const [current, setCurrent] = useState<OrderTabNameEnum>(OrderTabNameEnum.Content);\n\n  const renderTab = useMemo(() => {\n    if (current === OrderTabNameEnum.Content) {\n      return <OrderContentTab />;\n    }\n    if (current === OrderTabNameEnum.Invoices) {\n      return <OrderInvoicesTab />;\n    }\n    if (current === OrderTabNameEnum.Payments) {\n      return <OrderPaymentsTab />;\n    }\n  }, [current]);\n\n  const filterHandler: FilterSelectHandler<OrderTabNameEnum> = (_, value, index) => {\n    setCurrent(value);\n  };\n\n  return (\n    <RightSide overflow={'hidden'} fillHeight isVisible={isVisible}>\n      <Top fillWidth gap={4} isVisible={isVisible} fxDirection={'row'} justifyContent={'space-between'}>\n        <ButtonIcon\n          variant={'textExtraSmall'}\n          icon={'SmallArrowLeft'}\n          style={{ padding: 6 }}\n          onClick={toggleVisibility}\n        >\n          {'Back'}\n        </ButtonIcon>\n\n        <FlexBox padding={'0 8px'}>\n          <Text $weight={600} $size={14}>\n            {currentOrder?.code}\n          </Text>\n\n          <Text $size={10}>{orderId}</Text>\n        </FlexBox>\n      </Top>\n\n      <FlexBox>\n        <TabSelector filterOptions={toggleOptions} defaultValue={current} onOptSelect={filterHandler} preventFilter />\n      </FlexBox>\n\n      {renderTab}\n    </RightSide>\n  );\n};\nconst RightSide = styled(FlexBox)<{ isVisible?: boolean }>`\n  overflow: auto;\n\n  max-width: 100%;\n\n  transition: ${p => p.theme.globals.timingFunctionMain};\n  background-color: ${p => p.theme.backgroundColorLight};\n\n  @media screen and (min-width: 768px) {\n    min-width: 320px;\n  }\n\n  @media screen and (max-width: 768px) {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: 20;\n\n    transform: translateX(${p => (p.isVisible ? 0 : 100)}%);\n\n    box-shadow: 0 12px 26px rgba(0, 0, 0, 0.25);\n  }\n`;\n\nconst Top = styled(FlexBox)<{ isVisible?: boolean }>`\n  @media screen and (min-width: 768px) {\n    display: none;\n  }\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nexport default PageOrderOverviewTabs;\n","import React, { createContext, useContext, useMemo } from 'react';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { OrderEntity } from '../../../types/orders/orders.types';\n\nexport interface PageCurrentOrderProviderProps {\n  children?: React.ReactNode;\n}\n\nexport interface PageOrderProviderValue {\n  currentOrder?: OrderEntity;\n  mainPagePath?: string;\n}\n\nexport const PageOrderCTX = createContext({});\n\nexport const usePageCurrentOrder = () => useContext(PageOrderCTX) as PageOrderProviderValue;\n\nconst PageOrderProvider: React.FC<PageCurrentOrderProviderProps> = ({ children }) => {\n  const { currentOrder } = useOrdersSelector();\n  // const service = useAppServiceProvider()[ServiceName.orders];\n\n  const CTX = useMemo(\n    (): PageOrderProviderValue => ({\n      currentOrder,\n    }),\n    [currentOrder]\n  );\n\n  return <PageOrderCTX.Provider value={CTX}>{children}</PageOrderCTX.Provider>;\n};\nexport default PageOrderProvider;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { takeFullGridArea } from '../pagesStyles';\nimport { AppGridPage } from '../pages';\nimport { useAppParams } from '../../../hooks';\nimport OverlayStackProvider from '../../../Providers/Overlay/OverlayStackProvider';\nimport PageOrderOverviewLeftSide from './PageOrderOverviewLeftSide';\nimport PageOrderOverviewTabs from './PageOrderOverviewTabs';\nimport { BaseAppPageProps } from '../index';\nimport PageOrderProvider from './PageOrderProvider';\nimport { useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../redux/reduxTypes.types';\n\ninterface Props extends BaseAppPageProps {}\n\nconst PageOrderOverview: React.FC<Props> = ({ path }) => {\n  const service = useAppServiceProvider()[AppModuleName.orders];\n\n  const [isTabsSideVisible, setIsTabsSideVisible] = useState<boolean>(false);\n  const { orderId } = useAppParams();\n\n  const toggleRightSide = useCallback(() => {\n    setIsTabsSideVisible(p => !p);\n  }, []);\n\n  useEffect(() => {\n    if (orderId) {\n      service.getById({\n        data: { _id: orderId, options: { refreshCurrent: true } },\n      });\n    }\n  }, [orderId, service]);\n\n  return (\n    <AppGridPage path={path}>\n      <PageOrderProvider>\n        <OverlayStackProvider>\n          <Page>\n            <PageOrderOverviewLeftSide toggleRightSideVisibility={toggleRightSide} />\n\n            <PageOrderOverviewTabs toggleVisibility={toggleRightSide} isVisible={isTabsSideVisible} />\n          </Page>\n        </OverlayStackProvider>\n      </PageOrderProvider>\n    </AppGridPage>\n  );\n};\nconst Page = styled.div`\n  display: grid;\n  grid-template-columns: minmax(220px, 1fr) 0;\n\n  ${takeFullGridArea};\n\n  //@media screen and (max-width: 768px) {\n  //}\n  @media screen and (min-width: 768px) {\n    grid-template-columns: minmax(360px, 1fr) 2fr;\n  }\n  @media screen and (min-width: 1000px) {\n    grid-template-columns: minmax(360px, 400px) 2fr;\n  }\n`;\nexport default PageOrderOverview;\n"],"names":["orderOverviewCells","title","t","getValue","data","_data$manager","_data$manager$user","manager","user","email","tab","OrderOverviewInfoTabsEnum","General","_data$reference","reference","internal","_data$group","_data$group$reference","group","_data$group2","strategy","CellComponent","OrderOverviewTotals","status","Additional","cellsMap","orderOverviewCellsMap","forEach","item","push","getOrderOverviewCellsMap","Box","styled","FlexBox","_templateObject","_taggedTemplateLiteral","_p","overlayS","useOverlayService","currentOrder","useOrdersSelector","_useState","useState","_useState2","_slicedToArray","currentTab","setCurrentTab","console","log","renderCells","useMemo","map","_ref","cell","_objectWithoutProperties","_excluded","_jsx","overlayHandler","open","OverviewTextCell","_jsxs","fillWidth","flex","overflow","children","TabSelector","optionProps","fitContentH","filterOptions","orderOverviewInfoTabs","onOptSelect","option","value","_enumToTabs","OrderOverviewTabs","tabs","enumToFilterOptions","Container","p","theme","sideBarBackgroundColor","Content","_templateObject2","sideBarBorderColor","Footer","_templateObject3","DeleteBtn","ButtonIcon","_templateObject4","globals","colors","error","OpenBtn","_templateObject5","_useAppParams","orderId","useAppParams","navigate","useNavigate","location","useLocation","renderTab","info","OrderOverviewInfoTab","padding","ModalHeader","onBackPress","pathname","_location$pathname","newPath","replace","concat","_id","_o","_v","i","fxDirection","alignItems","justifyContent","size","variant","iconSize","icon","disabled","onEdit","onClick","onDelete","gap","margin","isLoading","isRefresh","onRefresh","onOpenRightSide","LeftSide","modalBorderColor","toggleRightSideVisibility","setLoading","ordersServ","useAppServiceProvider","orders","OrderOverviewXL","order","getById","options","refreshCurrent","onLoading","OverlayStack","service","AppModuleName","setIsLoading","_useState3","_useState4","tableData","_currentOrder$slots","slots","filter","el","_el$product","_productsFilterOption","product","type","productsFilterOptions","tableConfigs","actionsCreator","ctx","name","getSlots","params","getIdRef","useEffect","currentIndex","TableList","_objectSpread","isSearch","isFilter","tableTitles","orderSlotsTableColumns","state","get","getInvoicesByOrderId","invoices","invoicesTableColumns","OrderTabNameEnum","toggleOptions","RightSide","timingFunctionMain","backgroundColorLight","isVisible","Top","toggleVisibility","current","setCurrent","OrderContentTab","Invoices","OrderInvoicesTab","Payments","OrderPaymentsTab","fillHeight","style","Text","$weight","$size","code","defaultValue","_","index","preventFilter","PageOrderCTX","createContext","CTX","Provider","Page","takeFullGridArea","path","isTabsSideVisible","setIsTabsSideVisible","toggleRightSide","useCallback","AppGridPage","PageOrderProvider","OverlayStackProvider","PageOrderOverviewLeftSide","PageOrderOverviewTabs"],"sourceRoot":""}