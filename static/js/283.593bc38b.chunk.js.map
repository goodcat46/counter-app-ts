{"version":3,"file":"static/js/283.593bc38b.chunk.js","mappings":"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","sources":["components/Forms/FormCreateTransaction.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useMemo, useState } from 'react';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport styled from 'styled-components';\nimport { ITransaction, ITransactionReqData, TransactionType } from 'redux/transactions/transactions.types';\nimport { CategoryTypes } from 'redux/directories/directories.types';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport * as yup from 'yup';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\nimport { FilterOpt } from '../ModalForm/ModalFilter';\nimport CustomSelect from '../atoms/Inputs/CustomSelect/CustomSelect';\nimport { createTransactionForReq, formatDateForInputValue } from '../../utils';\nimport { useAppSelector } from '../../redux/store.store';\nimport FlexBox from '../atoms/FlexBox';\nimport translate from '../../lang';\nimport { ApiDirType } from '../../redux/APP_CONFIGS';\nimport { useAppForm } from '../../hooks';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport FormAfterSubmitOptions from './components/FormAfterSubmitOptions';\nimport { UseAppFormSubmitOptions } from '../../hooks/useAppForm.hook';\n\nexport type TransactionsFilterOpt = FilterOpt<CategoryTypes>;\n\nexport interface FormCreateTransactionProps extends Omit<ModalFormProps, 'onSubmit'> {\n  edit?: boolean;\n  copy?: boolean;\n  id?: string;\n  onSubmit?: (data: ITransactionReqData, options?: UseAppFormSubmitOptions) => void;\n  filterOptions?: TransactionsFilterOpt[];\n  defaultState?: Partial<ITransaction>;\n  addInputs?: boolean;\n}\n\nconst optionalSelectItem = yup\n  .object()\n  .shape({\n    _id: yup.string(),\n    label: yup.string(),\n  })\n  .nullable()\n  .optional();\nconst requiredSelectItem = yup\n  .object()\n  .shape({\n    _id: yup.string(),\n    label: yup.string(),\n  })\n  .required();\n\nconst getValidation = (type?: TransactionType) =>\n  yup.object().shape({\n    amount: yup.number().required(),\n    type: yup.string().required(),\n    eventDate: yup.string().required(),\n    comment: yup.string().optional(),\n    countIn: type && ['INCOME', 'TRANSFER'].includes(type) ? requiredSelectItem : optionalSelectItem,\n    subCountIn: optionalSelectItem,\n    countOut: type && ['EXPENSE', 'TRANSFER'].includes(type) ? requiredSelectItem : optionalSelectItem,\n    subCountOut: optionalSelectItem,\n    category: requiredSelectItem,\n    subCategory: optionalSelectItem,\n  });\n\nconst FormCreateTransaction: React.FC<FormCreateTransactionProps> = ({\n  edit,\n  onSubmit,\n  copy,\n  defaultState,\n  addInputs,\n  ...props\n}) => {\n  const {\n    directories: { directories },\n  } = useAppSelector();\n  const [currentType, setCurrentType] = useState<TransactionType | undefined>(defaultState?.type);\n  const {\n    formState: { errors, isValid },\n    formValues,\n    register,\n    setValue,\n    registerSelect,\n    handleSubmit,\n    toggleAfterSubmitOption,\n    closeAfterSave,\n    clearAfterSave,\n  } = useAppForm<ITransaction>({\n    defaultValues: { currency: 'UAH', ...defaultState, eventDate: formatDateForInputValue(defaultState?.eventDate) },\n    resolver: yupResolver(getValidation(currentType)),\n    reValidateMode: 'onSubmit',\n  });\n\n  function onValidSubmit(submitData: ITransaction) {\n    const omitPathArr: (keyof ITransaction)[] =\n      (formValues.type === 'INCOME' && ['countOut', 'subCountOut']) ||\n      (formValues.type === 'EXPENSE' && ['countIn', 'subCountIn']) ||\n      [];\n\n    const trReqData = createTransactionForReq(submitData, omitPathArr, '', 'amount');\n\n    onSubmit && onSubmit({ _id: '', data: trReqData }, { closeAfterSave, clearAfterSave });\n  }\n\n  const renderInputsCountIn = useMemo(() => {\n    const parentOptions = directories[ApiDirType.COUNTS];\n\n    const parent = parentOptions.find(el => el._id === formValues.countIn?._id);\n\n    return formValues.type && ['INCOME', 'TRANSFER'].includes(formValues.type) ? (\n      <>\n        <CustomSelect\n          {...registerSelect(\n            'countIn',\n            {\n              label: translate('countIn'),\n              placeholder: translate('countIn'),\n              required: true,\n              options: parentOptions,\n            },\n            { childName: 'subCountIn' }\n          )}\n        />\n        {parent?.childrenList && parent?.childrenList?.length > 0 && (\n          <CustomSelect\n            label={translate('subCountIn')}\n            placeholder={translate('subCountIn')}\n            {...registerSelect('subCountIn', { options: parent?.childrenList })}\n          />\n        )}\n      </>\n    ) : null;\n  }, [directories, formValues.countIn?._id, formValues.type, registerSelect]);\n\n  const renderInputsCountOut = useMemo(() => {\n    const parentOptions = directories[ApiDirType.COUNTS];\n\n    const childOptions = parentOptions.find(el => el._id === formValues.countOut?._id)?.childrenList;\n\n    return formValues.type && ['EXPENSE', 'TRANSFER'].includes(formValues.type) ? (\n      <>\n        <CustomSelect\n          {...registerSelect(\n            'countOut',\n            {\n              label: translate('countOut'),\n              placeholder: translate('countOut'),\n              required: true,\n              options: parentOptions,\n              error: errors.countOut,\n            },\n            { childName: 'subCountOut' }\n          )}\n        />\n        {childOptions && childOptions.length > 0 && (\n          <CustomSelect\n            label={translate('subCountOut')}\n            placeholder={translate('subCountOut')}\n            {...registerSelect('subCountOut', { options: childOptions, error: errors.subCountOut })}\n          />\n        )}\n      </>\n    ) : null;\n  }, [directories, errors.countOut, errors.subCountOut, formValues.countOut?._id, formValues.type, registerSelect]);\n\n  const renderInputsCategories = useMemo(() => {\n    const parentOptions = directories[ApiDirType.CATEGORIES_TR].filter(el => el.type === formValues.type);\n\n    const childOptions = parentOptions.find(el => el._id === formValues.category?._id)?.childrenList;\n\n    return (\n      <>\n        <CustomSelect\n          {...registerSelect(\n            'category',\n            {\n              label: translate('category'),\n              placeholder: translate('category'),\n              required: true,\n              options: parentOptions,\n            },\n            { childName: 'subCategory' }\n          )}\n        />\n        {childOptions && childOptions.length > 0 && (\n          <CustomSelect\n            label={translate('subCategory')}\n            placeholder={translate('subCategory')}\n            {...registerSelect('subCategory', { options: childOptions })}\n          />\n        )}\n      </>\n    );\n  }, [directories, formValues.category?._id, formValues.type, registerSelect]);\n\n  return (\n    <ModalForm\n      isValid={isValid}\n      onSubmit={handleSubmit(onValidSubmit, data => console.log(data))}\n      onOptSelect={({ value }) => {\n        if (value) {\n          setCurrentType(value);\n          setValue('type', value);\n        }\n      }}\n      {...props}\n      extraFooter={\n        <FormAfterSubmitOptions\n          toggleOption={toggleAfterSubmitOption}\n          closeAfterSave={closeAfterSave}\n          clearAfterSave={clearAfterSave}\n        />\n      }\n    >\n      <FlexBox className={'inputs'} flex={'1'} fillWidth maxHeight={'100%'} padding={'12px'} overflow={'auto'}>\n        <InputLabel label={translate('dateAndTime')} direction={'vertical'}>\n          <InputText placeholder={translate('dateAndTime')} type=\"datetime-local\" {...register('eventDate')} />\n        </InputLabel>\n        <GridWrapper>\n          <InputLabel label={translate('amount')} direction={'vertical'}>\n            <InputText placeholder={translate('amount')} type={'number'} {...register('amount')} />\n          </InputLabel>\n\n          <InputLabel label={translate('currency')} direction={'vertical'}>\n            <InputText placeholder={translate('currency')} {...register('currency')} disabled />\n          </InputLabel>\n        </GridWrapper>\n\n        {renderInputsCountOut}\n        {renderInputsCountIn}\n        {renderInputsCategories}\n\n        <CustomSelect\n          label={translate('contractor')}\n          placeholder={translate('contractor')}\n          {...registerSelect('contractor', {\n            options: directories[ApiDirType.CONTRACTORS],\n          })}\n        />\n\n        <InputLabel label={translate('comment')} direction={'vertical'}>\n          <TextareaPrimary placeholder={translate('comment')} {...register('comment')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\nconst GridWrapper = styled.div<{ gridTemplateColumns?: string }>`\n  display: grid;\n  grid-template-columns: ${({ gridTemplateColumns }) => gridTemplateColumns || '1fr 120px'};\n  gap: 12px;\n`;\n\nexport default FormCreateTransaction;\n"],"names":["optionalSelectItem","yup","shape","_id","label","nullable","optional","requiredSelectItem","required","GridWrapper","styled","_templateObject","_taggedTemplateLiteral","_ref3","gridTemplateColumns","_ref","edit","_formValues$countIn2","_formValues$countOut2","_formValues$category2","type","onSubmit","defaultState","copy","props","addInputs","_objectWithoutProperties","_excluded","directories","useAppSelector","_useState","useState","_useState2","_slicedToArray","currentType","setCurrentType","_useAppForm","useAppForm","defaultValues","_objectSpread","currency","eventDate","formatDateForInputValue","resolver","yupResolver","amount","comment","countIn","includes","subCountIn","countOut","subCountOut","category","subCategory","reValidateMode","_useAppForm$formState","formState","errors","isValid","formValues","register","setValue","registerSelect","handleSubmit","toggleAfterSubmitOption","closeAfterSave","clearAfterSave","renderInputsCountIn","useMemo","_parent$childrenList","parentOptions","ApiDirType","parent","find","el","_formValues$countIn","_jsxs","_Fragment","children","_jsx","CustomSelect","translate","placeholder","options","childName","childrenList","length","renderInputsCountOut","_parentOptions$find","childOptions","_formValues$countOut","error","renderInputsCategories","_parentOptions$find2","filter","_formValues$category","ModalForm","submitData","omitPathArr","trReqData","createTransactionForReq","data","console","log","onOptSelect","_ref2","value","extraFooter","FormAfterSubmitOptions","toggleOption","FlexBox","className","flex","fillWidth","maxHeight","padding","overflow","InputLabel","direction","InputText","disabled","TextareaPrimary"],"sourceRoot":""}