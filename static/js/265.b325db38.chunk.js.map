{"version":3,"file":"static/js/265.b325db38.chunk.js","mappings":"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","sources":["components/Forms/FormCreateOrder/components/OrderGroupItem.tsx","components/Forms/FormCreateOrder/steps/OrderGroupsStuffingStep.tsx","components/Forms/FormCreateOrder/components/SelectCustomerModal.tsx","components/Forms/FormCreateOrder/components/SelectManagerModal.tsx","components/Forms/FormCreateOrder/components/CreateCustomerButtonIcon.tsx","components/Forms/FormCreateOrder/components/CustomerInfoComponent.tsx","components/Forms/FormCreateOrder/components/DestinationInputs.tsx","utils/lodash.utils.ts","../node_modules/date-fns/esm/addDays/index.js","components/Forms/FormCreateOrder/steps/OrderInfoStep.tsx","components/Forms/FormCreateOrder/FormCreateOrdersGroup.tsx","components/Forms/components/StepsController.tsx","redux/customers/customers.types.ts","components/Forms/crm/FormCreateCustomer.tsx","components/atoms/CheckboxesListSelector.tsx","data/customers.data.ts"],"sourcesContent":["import { IOrderTempSlot } from '../../../../redux/orders/orders.types';\nimport { useMemo } from 'react';\nimport OrderSlotOverview from '../../../Overviews/OrderSlotOverview';\nimport FormAccordionItem from '../../components/FormAccordionItem';\nimport styled, { useTheme } from 'styled-components';\nimport FlexBox from '../../../atoms/FlexBox';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport { t } from 'lang';\nimport { Text } from '../../../atoms/Text';\n\nconst OrderGroupItem = ({\n  slots,\n  onRemove,\n  onUpdate,\n  renderHeader,\n  title,\n  onAddSlotPress,\n  renderFooter,\n}: {\n  slots: IOrderTempSlot[];\n  renderHeader?: React.ReactNode;\n  renderFooter?: React.ReactNode;\n  title?: React.ReactNode;\n  onRemove?: (id: string) => void;\n  onUpdate?: (slot: IOrderTempSlot) => void;\n  onAddSlotPress?: () => void;\n}) => {\n  const theme = useTheme();\n  const renderSlots = useMemo(() => {\n    return slots.map(slot => (\n      <OrderSlotOverview\n        key={`slot_${slot?.tempId}`}\n        slot={slot}\n        editable\n        onRemovePress={onRemove ? () => slot?.tempId && onRemove(slot?.tempId) : undefined}\n        onUpdate={onUpdate}\n      />\n    ));\n  }, [onRemove, onUpdate, slots]);\n\n  const renderHeaderComp = useMemo(() => {\n    return (\n      <FlexBox fxDirection={'row'} fillHeight gap={8} alignItems={'center'} padding={'2px 0'}>\n        {renderHeader || (\n          <Text $weight={500} $size={15}>\n            {title}\n          </Text>\n        )}\n\n        {onAddSlotPress && <FlexBox height={'80%'} border={`1px solid ${theme.modalBorderColor}`} />}\n\n        {onAddSlotPress && (\n          <ButtonIcon\n            variant={'textExtraSmall'}\n            style={{ minWidth: 'fit-content', height: '100%', fontWeight: 600 }}\n            disabled={!onAddSlotPress}\n            onClick={onAddSlotPress}\n          >\n            {t('Add')}\n          </ButtonIcon>\n        )}\n      </FlexBox>\n    );\n  }, [onAddSlotPress, renderHeader, theme.modalBorderColor, title]);\n\n  return (\n    <>\n      <StAccordionItem open renderHeader={renderHeaderComp} renderFooter={renderFooter} title={title}>\n        {renderSlots}\n      </StAccordionItem>\n    </>\n  );\n};\n\nconst StAccordionItem = styled(FormAccordionItem)`\n  & .header {\n  }\n  & .content {\n    padding: 0;\n  }\n`;\nexport default OrderGroupItem;\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { IOrderTempSlot } from 'redux/orders/orders.types';\nimport FlexBox from '../../../atoms/FlexBox';\nimport styled from 'styled-components';\nimport { IWarehouse } from '../../../../redux/warehouses/warehouses.types';\nimport { useOrdersSelector } from '../../../../redux/selectors.store';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport { ToastService } from 'services';\nimport { t } from 'lang';\nimport { Modals } from '../../../Modals';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport OrderGroupItem from '../components/OrderGroupItem';\nimport { getIdRef } from 'utils/dataTransform';\nimport { FormOrderStepBaseProps } from '../formOrder.types';\nimport { useMediaQuery } from 'react-responsive';\nimport { useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppModuleName } from '../../../../redux/reduxTypes.types';\n\nexport interface OrderGroupsStuffingStepProps extends FormOrderStepBaseProps {\n  slots?: IOrderTempSlot[];\n  onAddSlot?: (slot: IOrderTempSlot) => void;\n  onRemoveSlot?: (id: string) => void;\n}\n\nconst OrderGroupsStuffingStep: React.FC<OrderGroupsStuffingStepProps> = ({ onChangeValidStatus }) => {\n  const modalS = useModalService();\n  const service = useAppServiceProvider()[AppModuleName.orders];\n  const { slots } = useOrdersSelector().ordersGroupFormData;\n  const isMobile = useMediaQuery({ maxWidth: 480 });\n\n  const handelAddSlot = useCallback(\n    (slot: IOrderTempSlot) => {\n      service.addTempSlot(slot);\n    },\n    [service]\n  );\n  const handelRemoveSlot = useCallback(\n    (id: string) => {\n      service.removeTempSlot(id);\n    },\n    [service]\n  );\n  const handelUpdateSlot = useCallback(\n    (slot: IOrderTempSlot) => {\n      service.updateTempSlot(slot);\n    },\n    [service]\n  );\n\n  const groupedData = useMemo(() => {\n    let map: Record<string, { slots: (IOrderTempSlot & { tempId?: string })[]; warehouse?: IWarehouse }> = {};\n\n    slots?.map(slot => {\n      if (slot.warehouse?._id) {\n        map[slot.warehouse._id] = {\n          warehouse: slot.warehouse,\n          slots: map[slot.warehouse._id]?.slots ? [...map[slot.warehouse._id]?.slots, slot] : [slot],\n        };\n      }\n\n      return '';\n    });\n\n    return map;\n  }, [slots]);\n\n  useEffect(() => {\n    onChangeValidStatus && onChangeValidStatus(!!slots?.length && slots?.length > 0);\n  }, [onChangeValidStatus, slots?.length]);\n\n  const renderGroupedData = useMemo(() => {\n    return Object.keys(groupedData).map((k, i) => {\n      const v = groupedData[k];\n      return (\n        <OrderGroupItem\n          key={`pre-order_${v.warehouse?._id || i}`}\n          slots={v.slots}\n          title={v?.warehouse?.label}\n          onRemove={handelRemoveSlot}\n          onUpdate={handelUpdateSlot}\n          onAddSlotPress={() => {\n            const m = modalS.open({\n              Modal: Modals.FormCreateOrderSlot,\n              props: {\n                params: v?.warehouse ? { warehouse: getIdRef(v?.warehouse) } : undefined,\n                onSubmit: d => {\n                  handelAddSlot(d);\n\n                  if (d && m?.onClose) {\n                    m?.onClose();\n                  }\n                },\n              },\n            });\n          }}\n        />\n      );\n    });\n  }, [groupedData, handelAddSlot, handelRemoveSlot, handelUpdateSlot, modalS]);\n\n  return (\n    <Container flex={1} fillWidth overflow={'hidden'} style={{ position: 'relative' }}>\n      <Content flex={1} overflow={'auto'}>\n        <FlexBox flex={1} fillWidth>\n          {renderGroupedData}\n        </FlexBox>\n      </Content>\n\n      <Buttons fxDirection={'row'} gap={8} padding={'8px'}>\n        <ButtonIcon\n          variant={'defOutlinedSmall'}\n          onClick={() => {\n            const res = window.confirm('Remove all items?');\n            if (res) {\n              ToastService.info('All items will be remove');\n            }\n          }}\n        >\n          {t('Remove all')}\n        </ButtonIcon>\n\n        <ButtonIcon\n          variant={'outlinedSmall'}\n          flex={1}\n          onClick={() => {\n            const m = modalS.open({\n              Modal: Modals.FormCreateOrderSlot,\n              props: {\n                onSubmit: d => {\n                  handelAddSlot(d);\n\n                  if (d && m?.onClose) {\n                    m?.onClose();\n                  }\n                },\n              },\n            });\n          }}\n        >\n          {t(isMobile ? 'Add' : 'Add position to group')}\n        </ButtonIcon>\n      </Buttons>\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  color: ${p => p.theme.fontColorSidebar};\n`;\nconst Content = styled(FlexBox)``;\nconst Buttons = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nexport default OrderGroupsStuffingStep;\n","import { ICustomer } from '../../../../redux/customers/customers.types';\nimport ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { useEffect, useMemo } from 'react';\nimport { ITableListProps } from '../../../TableList/tableTypes.types';\nimport { customersColumns } from '../../../../data/customers.data';\nimport { t } from '../../../../lang';\nimport TableList from '../../../TableList/TableList';\nimport { useCustomersSelector } from '../../../../redux/selectors.store';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport FormCreateCustomer from '../../crm/FormCreateCustomer';\nimport { createDataForReq } from '../../../../utils/dataTransform';\n\nexport interface SelectCustomerModalProps extends Omit<ModalFormProps, 'onSelect' | 'onSubmit'> {\n  onSelect?: (customer: ICustomer) => void;\n  onSubmit?: AppSubmitHandler<ICustomer>;\n  asReceiver?: boolean;\n}\nconst SelectCustomerModal: React.FC<SelectCustomerModalProps> = ({ onSelect, onSubmit, onClose, asReceiver, ...p }) => {\n  const customers = useCustomersSelector().customers;\n  const modalS = useModalService();\n  const service = useAppServiceProvider()[ServiceName.customers];\n\n  const tableConfigs = useMemo((): ITableListProps<ICustomer> => {\n    return {\n      tableData: customers,\n      tableTitles: customersColumns,\n      actionsCreator: _ctx => {\n        return [\n          { icon: 'refresh', onClick: () => service.getAll() },\n          { separator: true },\n          {\n            icon: 'plus',\n            onClick: () => {\n              const m = modalS.open({\n                ModalChildren: FormCreateCustomer,\n                modalChildrenProps: {\n                  onSubmit: d => {\n                    service.create({ data: createDataForReq(d) as never, onSuccess: m?.onClose });\n                  },\n                },\n              });\n            },\n          },\n        ];\n      },\n      onRowClick: data => {\n        if (data?.rowData && onSelect) {\n          onSelect(data.rowData);\n          onClose && onClose();\n        }\n      },\n    };\n  }, [service, customers, onClose, modalS, onSelect]);\n\n  useEffect(() => {\n    service.getAll({\n      data: { refresh: true, params: {} },\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ModalForm\n      fillWidth\n      fillHeight\n      title={t(asReceiver ? 'Select receiver' : 'Select customer')}\n      onClose={onClose}\n      {...p}\n    >\n      <TableList {...tableConfigs} />\n    </ModalForm>\n  );\n};\n\nexport default SelectCustomerModal;\n","import ModalForm, { ModalFormProps } from '../../../ModalForm';\nimport { IPermission } from '../../../../redux/permissions/permissions.types';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport TableList, { ITableListProps } from '../../../TableList/TableList';\nimport { usersDirColumns } from '../../../../data/usersDir.data';\nimport { t } from '../../../../lang';\nimport { useMemo } from 'react';\nimport { usePermissionsSelector } from '../../../../redux/selectors.store';\n\nexport interface SelectManagerModalProps extends Omit<ModalFormProps, 'onSubmit' | 'onSelect'> {\n  onSelect?: (manager: IPermission) => void;\n  onSubmit?: AppSubmitHandler<IPermission>;\n}\n\nconst SelectManagerModal: React.FC<SelectManagerModalProps> = ({ onSubmit, onSelect, onClose, ...p }) => {\n  const { users } = usePermissionsSelector();\n\n  const tableConfigs = useMemo((): ITableListProps<IPermission> => {\n    return {\n      tableData: users,\n      onRowClick: data => {\n        const res = users.find(pr => pr._id === data?._id);\n        res && onSelect && onSelect(res);\n      },\n    };\n  }, [onSelect, users]);\n\n  return (\n    <ModalForm fillWidth fillHeight onClose={onClose} title={t('Select manager')}>\n      <TableList tableTitles={usersDirColumns} {...tableConfigs} isSearch={false} />\n    </ModalForm>\n  );\n};\nexport default SelectManagerModal;\n","import { ICustomer } from '../../../../redux/customers/customers.types';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport ButtonIcon from '../../../atoms/ButtonIcon/ButtonIcon';\nimport FormCreateCustomer from '../../crm/FormCreateCustomer';\nimport { t } from '../../../../lang';\nimport { createDataForReq } from '../../../../utils/dataTransform';\nimport * as React from 'react';\n\nconst CreateCustomerButtonIcon = ({\n  onSuccess,\n  isReceiver,\n}: {\n  onSuccess?: (customer: ICustomer) => void;\n  isReceiver?: boolean;\n}) => {\n  const customerS = useAppServiceProvider()[ServiceName.customers];\n  const modalS = useModalService();\n\n  return (\n    <ButtonIcon\n      variant={'onlyIcon'}\n      icon={'plus'}\n      iconSize={'100%'}\n      size={'30px'}\n      onClick={() => {\n        const m = modalS.open({\n          ModalChildren: FormCreateCustomer,\n          modalChildrenProps: {\n            title: isReceiver ? t('Create receiver') : undefined,\n            onSubmit: d => {\n              customerS.create({\n                data: createDataForReq(d) as never,\n                onSuccess: m?.onClose,\n              });\n            },\n          },\n        });\n      }}\n    ></ButtonIcon>\n  );\n};\nexport default CreateCustomerButtonIcon;\n","import { ICustomer } from '../../../../redux/customers/customers.types';\nimport { useTheme } from 'styled-components';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport { Text } from '../../../atoms/Text';\nimport { t } from '../../../../lang';\n\nconst CustomerInfoComponent = ({\n  info,\n  isReceiver,\n  isManager,\n}: {\n  info?: ICustomer;\n  isReceiver?: boolean;\n  isManager?: boolean;\n}) => {\n  const theme = useTheme();\n  const renderCells = useMemo(() => {\n    if (!info) return undefined;\n\n    return getCustomerInfoComponentCells({ info, isReceiver, isManager }).map(({ label, getValue, visible }) => {\n      return (\n        visible && (\n          <FlexBox\n            key={label}\n            gap={4}\n            padding={'4px'}\n            flex={'1 1 50%'}\n            maxWidth={'50%'}\n            border={`1px solid ${theme.modalBorderColor}`}\n          >\n            <Text $size={12}>{label}</Text>\n            <Text $align={'right'}>{getValue(info)}</Text>\n          </FlexBox>\n        )\n      );\n    });\n  }, [info, isManager, isReceiver, theme.modalBorderColor]);\n\n  return (\n    <FlexBox fillWidth flexWrap={'wrap'} fxDirection={'row'} border={`1px solid ${theme.modalBorderColor}`}>\n      {renderCells}\n    </FlexBox>\n  );\n};\n\nexport default CustomerInfoComponent;\nfunction getCustomerInfoComponentCells({ isManager }: { info?: ICustomer; isReceiver?: boolean; isManager?: boolean }) {\n  return [\n    { label: t('label'), getValue: (info?: ICustomer) => info?.label || '---', visible: !isManager },\n    { label: t('name'), getValue: (info?: ICustomer) => info?.name || '---', visible: true },\n    { label: t('secondName'), getValue: (info?: ICustomer) => info?.secondName || '---', visible: true },\n    { label: t('email'), getValue: (info?: ICustomer) => info?.email || '---', visible: true },\n    { label: t('taxCode'), getValue: (info?: ICustomer) => info?.taxCode || '---', visible: !isManager },\n    {\n      label: t('personalTaxCode'),\n      getValue: (info?: ICustomer) => info?.personalTaxCode || '---',\n      visible: !isManager,\n    },\n    { label: t('tags'), getValue: (info?: ICustomer) => info?.tags?.join(', ') || '---', visible: !isManager },\n  ];\n}\n","import { AddressDto } from 'redux/global.types';\nimport { HTMLAttributes } from 'react';\nimport { t } from 'lang';\n\nexport const destinationAddressInputsProps: ({\n  name: keyof AddressDto;\n  label: string;\n  required?: boolean;\n} & HTMLAttributes<HTMLInputElement>)[] = [\n  { name: 'country', label: t('Country'), required: false },\n  { name: 'region', label: t('Region'), required: false },\n  { name: 'area', label: t('Area'), required: false },\n  { name: 'city', label: t('City'), required: false },\n  { name: 'street', label: t('Street'), required: false },\n  { name: 'house', label: t('House'), required: false },\n  { name: 'office', label: t('Office'), required: false },\n  { name: 'room', label: t('Room'), required: false },\n];\n","import _ from 'lodash';\nimport { AnyFn } from './types';\n\nexport const throttledLogger = _.throttle((...args: any) => {\n  console.log('Throttled Logger', ...args);\n}, 5000);\n\nexport const throttleCallback = _.throttle(<T extends AnyFn>(fn: T) => {\n  console.log(throttleCallback.name);\n\n  fn();\n}, 3000);\n\nexport const throttledCallback = <Fn extends AnyFn>(fn: Fn, wait: number = 3000) => {\n  console.log('throttledCallback return');\n  return _.throttle(fn, wait);\n};\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import FlexBox from 'components/atoms/FlexBox';\nimport styled from 'styled-components';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { t } from 'lang';\nimport { Text } from 'components/atoms/Text';\nimport FormAccordionItem from '../../components/FormAccordionItem';\nimport InputLabel from 'components/atoms/Inputs/InputLabel';\nimport { ICreateOrderInfoFormState } from 'redux/orders/orders.types';\nimport { useModalService } from '../../../ModalProvider/ModalProvider';\nimport ButtonIcon from 'components/atoms/ButtonIcon/ButtonIcon';\nimport SelectCustomerModal from '../components/SelectCustomerModal';\nimport TagButtonsFilter from 'components/atoms/TagButtonsFilter';\nimport SelectManagerModal from '../components/SelectManagerModal';\nimport { FormOrderStepBaseProps } from '../formOrder.types';\nimport CheckboxesListSelector from 'components/atoms/CheckboxesListSelector';\nimport { useTranslatedMethodsList } from 'hooks/useTranslatedMethodsList.hook';\nimport ButtonSwitch from '../../../atoms/ButtonSwitch';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport { Path, useFormContext, UseFormSetValue } from 'react-hook-form';\nimport CreateCustomerButtonIcon from '../components/CreateCustomerButtonIcon';\nimport CustomerInfoComponent from '../components/CustomerInfoComponent';\nimport { destinationAddressInputsProps } from '../components/DestinationInputs';\nimport { throttleCallback } from '../../../../utils/lodash.utils';\nimport { useCommunicationSelector, useInvoicesSelector, useShipmentsSelector } from '../../../../redux/selectors.store';\nimport { formatDateForInputValue } from '../../../../utils';\nimport * as fns from 'date-fns';\n\nexport interface OrderInfoStepProps extends FormOrderStepBaseProps {\n  isGroup?: boolean;\n}\n\nconst useOrderInfoForm = () => useFormContext<ICreateOrderInfoFormState>();\n\ntype ConfirmsStateKay =\n  | 'hasDelivery'\n  | 'hasDeliveryInvoice'\n  | 'holdDeliveryPayment'\n  | 'holdOrderPayment'\n  | 'hasReceiverInfo'\n  | 'hasExecuteDate';\n\ntype FormFieldPaths = Path<ICreateOrderInfoFormState>;\nconst OrderInfoStep: React.FC<OrderInfoStepProps> = ({ onChangeValidStatus }) => {\n  const modalS = useModalService();\n  const [confirms, setConfirms] = useState<Record<ConfirmsStateKay | string, boolean>>({});\n\n  const shipmentMethodsList = useTranslatedMethodsList(useShipmentsSelector().methods, { withFullLabel: true });\n  const communicationMethodsList = useTranslatedMethodsList(useCommunicationSelector().methods, {\n    withFullLabel: true,\n  });\n  const invoicingMethods = useTranslatedMethodsList(useInvoicesSelector().methods, { withFullLabel: true });\n\n  const setTouchedField = (path: FormFieldPaths) => {};\n\n  const {\n    formState: { isValid, errors },\n    register,\n    setValue,\n    unregister,\n    watch,\n    trigger,\n  } = useOrderInfoForm();\n\n  const formValues = watch();\n\n  const handleOnChangeValue: UseFormSetValue<ICreateOrderInfoFormState> = (path, value) => {\n    try {\n      setValue(path, value as never);\n      throttleCallback(() =>\n        trigger()\n          .then(isValid => {\n            isValid && onChangeValidStatus && onChangeValidStatus(isValid);\n          })\n          .catch(e => {\n            console.error('handleOnChangeValue trigger error', e);\n          })\n      );\n      setTouchedField(path);\n    } catch (e) {\n      console.error('handleOnChangeValue: ', e);\n    }\n  };\n  const registerConfirmSelectHandler = (name: ConfirmsStateKay) => {\n    return (value: boolean) => {\n      setConfirms(p => ({ ...p, [name]: value }));\n\n      if (value) {\n        if (name === 'hasDeliveryInvoice') {\n          return setValue('deliveryInfo.invoiceInfo.expiredAt', formatDateForInputValue(fns.addDays(new Date(), 1)));\n        }\n      }\n\n      if (!value) {\n        if (name === 'hasReceiverInfo') {\n          return unregister('receiver');\n        }\n        if (name === 'hasDeliveryInvoice') {\n          return unregister('deliveryInfo.invoiceInfo');\n        }\n        if (name === 'hasDelivery') {\n          return unregister('deliveryInfo');\n        }\n      }\n    };\n  };\n\n  useEffect(() => {\n    if (onChangeValidStatus) onChangeValidStatus(isValid);\n  }, [isValid, onChangeValidStatus]);\n\n  return (\n    <Inputs flex={1} overflow={'auto'}>\n      <FlexBox fillWidth gap={8} padding={'8px 2px'} style={{ maxWidth: 480, width: '100%', margin: '0 auto' }}>\n        {formValues?.manager && (\n          <InputLabel label={t('manager')}>\n            <CustomerInfoComponent info={formValues?.manager?.user as never} isManager />\n          </InputLabel>\n        )}\n\n        <ButtonIcon\n          variant={'outlinedSmall'}\n          onClick={() => {\n            const m = modalS.open({\n              ModalChildren: SelectManagerModal,\n              modalChildrenProps: {\n                onSelect: pr => {\n                  handleOnChangeValue('manager', pr);\n                  m?.onClose && m?.onClose();\n                },\n              },\n            });\n          }}\n        >\n          {t(!formValues?.manager ? 'Select manager' : 'Change manager')}\n        </ButtonIcon>\n      </FlexBox>\n\n      <FlexBox padding={'0 2px'}>\n        <StAccordionItem\n          contentContainerStyle={{ padding: '8px 0', gap: 8 }}\n          open\n          renderHeader={\n            <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>{`${t('Customer')} | ${t(\n              'Receiver'\n            )}`}</Text>\n          }\n        >\n          {formValues?.customer && (\n            <>\n              <InputLabel label={t('Customer information')}>\n                <CustomerInfoComponent info={formValues?.customer} />\n              </InputLabel>\n\n              <BorderedBox fillWidth overflow={'hidden'}>\n                <InputLabel label={t('Communication methods')}>\n                  <TagButtonsFilter\n                    multiple\n                    numColumns={2}\n                    values={formValues?.communication?.customer}\n                    resetButtonLabel={t('Not needed')}\n                    options={communicationMethodsList}\n                    resetButtonPosition={'start'}\n                    onChange={value => {\n                      handleOnChangeValue('communication.customer', value);\n                    }}\n                  />\n                </InputLabel>\n              </BorderedBox>\n            </>\n          )}\n\n          <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'center'}>\n            <CreateCustomerButtonIcon\n              onSuccess={d => {\n                handleOnChangeValue('customer', d);\n              }}\n            />\n\n            <ButtonIcon\n              variant={'outlinedSmall'}\n              flex={1}\n              onClick={() => {\n                const m = modalS.open({\n                  ModalChildren: SelectCustomerModal,\n                  modalChildrenProps: {\n                    onSelect: data => {\n                      handleOnChangeValue('customer', data);\n                      m?.onClose && m?.onClose();\n                    },\n                  },\n                });\n              }}\n            >\n              {t(!formValues?.customer ? 'Select customer' : 'Change customer')}\n            </ButtonIcon>\n          </FlexBox>\n\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Receiver')}>\n              <ButtonSwitch\n                onChange={registerConfirmSelectHandler('hasReceiverInfo')}\n                value={confirms?.hasReceiverInfo || !!formValues?.receiver}\n                rejectLabel={'The same'}\n                acceptLabel={'Another'}\n              />\n            </InputLabel>\n          </BorderedBox>\n\n          {confirms?.hasReceiverInfo && formValues?.receiver && (\n            <>\n              <InputLabel label={t('Receiver information')}>\n                <CustomerInfoComponent info={formValues?.receiver} />{' '}\n              </InputLabel>\n\n              <BorderedBox fillWidth>\n                <InputLabel label={t('Communication methods')}>\n                  <TagButtonsFilter\n                    multiple\n                    numColumns={2}\n                    values={formValues?.communication?.receiver}\n                    resetButtonLabel={t('Without')}\n                    options={communicationMethodsList.map(mtd => ({ ...mtd, value: mtd._id }))}\n                    resetButtonPosition={'start'}\n                    onChange={value => {\n                      handleOnChangeValue('communication.receiver', value);\n                    }}\n                  />\n                </InputLabel>\n              </BorderedBox>\n            </>\n          )}\n\n          {confirms?.hasReceiverInfo && (\n            <FlexBox fxDirection={'row'} gap={8} fillWidth alignItems={'center'}>\n              <CreateCustomerButtonIcon\n                isReceiver\n                onSuccess={d => {\n                  handleOnChangeValue('receiver', d);\n                }}\n              />\n\n              <ButtonIcon\n                variant={'outlinedSmall'}\n                flex={1}\n                onClick={() => {\n                  const m = modalS.open({\n                    ModalChildren: SelectCustomerModal,\n                    modalChildrenProps: {\n                      onSelect: i => {\n                        handleOnChangeValue('receiver', i);\n                        m?.onClose && m?.onClose();\n                      },\n                    },\n                  });\n                }}\n              >\n                {t(!formValues?.receiver ? 'Select receiver' : 'Change receiver')}\n              </ButtonIcon>\n            </FlexBox>\n          )}\n        </StAccordionItem>\n\n        <StAccordionItem\n          contentContainerStyle={{ padding: '8px 2px' }}\n          open\n          renderHeader={\n            <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>\n              {t('Invoicing')}\n            </Text>\n          }\n        >\n          <InputLabel label={t('Payment method')} required>\n            <CheckboxesListSelector\n              options={invoicingMethods}\n              currentOption={formValues?.invoiceInfo?.method}\n              onChangeIndex={i => {\n                handleOnChangeValue('invoiceInfo.method', invoicingMethods[i]);\n              }}\n            />\n          </InputLabel>\n\n          <InputLabel label={t('Expired at')} required>\n            <InputText\n              placeholder={t('Expired at')}\n              type={'datetime-local'}\n              required\n              {...register('invoiceInfo.expiredAt', { required: true })}\n            />\n          </InputLabel>\n        </StAccordionItem>\n\n        <StAccordionItem\n          contentContainerStyle={{ padding: '0 2px' }}\n          open\n          renderHeader={<AccordionItemTitle title={t('Shipment')} />}\n        >\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Another execute date')}>\n              <ButtonSwitch\n                onChange={registerConfirmSelectHandler('hasExecuteDate')}\n                value={confirms?.hasExecuteDate}\n              />\n            </InputLabel>\n          </BorderedBox>\n\n          {confirms?.hasExecuteDate && (\n            <InputLabel label={t('Execute at')} required={confirms?.hasExecuteDate}>\n              <InputText\n                placeholder={t('Execute at')}\n                type={'date'}\n                required={confirms?.hasExecuteDate}\n                {...register('shipmentInfo.executeAt', { required: confirms?.hasExecuteDate })}\n              />\n            </InputLabel>\n          )}\n\n          <BorderedBox fillWidth gap={4}>\n            <InputLabel label={t('Delivery')}>\n              <ButtonSwitch\n                onChange={registerConfirmSelectHandler('hasDelivery')}\n                value={confirms?.hasDelivery || !!formValues?.deliveryInfo}\n              />\n            </InputLabel>\n          </BorderedBox>\n        </StAccordionItem>\n\n        {(confirms?.hasDelivery || !!formValues?.deliveryInfo) && (\n          <StAccordionItem\n            contentContainerStyle={{ padding: '0 2px' }}\n            open\n            renderHeader={\n              <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>\n                {t('Delivery')}\n              </Text>\n            }\n          >\n            <BorderedBox fillWidth gap={8}>\n              <InputLabel label={t('Delivery method')} required>\n                <CheckboxesListSelector\n                  options={shipmentMethodsList}\n                  currentOption={formValues?.deliveryInfo?.method}\n                  onChangeIndex={i => {\n                    handleOnChangeValue('deliveryInfo.method', shipmentMethodsList[i]);\n                  }}\n                />\n              </InputLabel>\n            </BorderedBox>\n            <BorderedBox fillWidth style={{ columnGap: 8, display: 'grid', gridTemplateColumns: '1fr 1fr' }}>\n              {destinationAddressInputsProps.map(({ name, label, required }) => {\n                return (\n                  <InputLabel\n                    key={`dest-addr-${label}`}\n                    label={label}\n                    error={errors?.deliveryInfo?.destination ? errors?.deliveryInfo?.destination[name] : undefined}\n                    required={required}\n                  >\n                    <InputText\n                      required={required}\n                      placeholder={label}\n                      {...register(`deliveryInfo.destination.${name}`, { required })}\n                    />\n                  </InputLabel>\n                );\n              })}\n            </BorderedBox>\n            <BorderedBox fillWidth gap={8}>\n              <InputLabel label={t('Has payment')} required>\n                <ButtonSwitch\n                  onChange={registerConfirmSelectHandler('hasDeliveryInvoice')}\n                  value={confirms?.hasDeliveryInvoice || !!formValues?.deliveryInfo?.invoiceInfo}\n                />\n              </InputLabel>\n            </BorderedBox>\n            <BorderedBox fillWidth gap={8}>\n              {(confirms?.hasDeliveryInvoice || !!formValues?.deliveryInfo?.invoiceInfo?.method) && (\n                <>\n                  <InputLabel label={t('Payment method')} required>\n                    <CheckboxesListSelector\n                      options={invoicingMethods}\n                      currentOption={formValues?.deliveryInfo?.invoiceInfo?.method}\n                      onChangeIndex={i => {\n                        handleOnChangeValue('deliveryInfo.invoiceInfo.method', invoicingMethods[i]);\n                      }}\n                    />\n                  </InputLabel>\n\n                  <InputLabel label={t('Expired at')} required>\n                    <InputText\n                      placeholder={t('Expired at')}\n                      type={'datetime-local'}\n                      required\n                      {...register('deliveryInfo.invoiceInfo.expiredAt', { required: true })}\n                    />\n                  </InputLabel>\n                </>\n              )}\n            </BorderedBox>\n          </StAccordionItem>\n        )}\n      </FlexBox>\n    </Inputs>\n  );\n};\nconst AccordionItemTitle = ({ title }: { title: string }) => {\n  return (\n    <Text $padding={'0 6px'} $ellipsisMode={true} $size={16} $weight={500}>\n      {title}\n    </Text>\n  );\n};\nconst Inputs = styled(FlexBox)``;\n\nconst BorderedBox = styled(FlexBox)`\n  padding-bottom: 8px;\n\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\nconst StAccordionItem = styled(FormAccordionItem)`\n  & .content {\n    max-width: 480px;\n    width: 100%;\n    margin: auto;\n  }\n`;\n\nexport default OrderInfoStep;\n","import { ModalFormProps } from '../../ModalForm';\nimport { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { enumToFilterOptions } from '../../../utils/fabrics';\nimport ModalFilter from '../../ModalForm/ModalFilter';\nimport { useStepsHandler } from '../../../utils/createStepChecker';\nimport { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { ModalHeader } from '../../atoms';\nimport { t } from '../../../lang';\nimport StepsController from '../components/StepsController';\nimport OrderGroupsStuffingStep from './steps/OrderGroupsStuffingStep';\nimport OrderInfoStep from './steps/OrderInfoStep';\nimport { ICreateOrderInfoFormState, IOrder, IOrderTempSlot } from '../../../redux/orders/orders.types';\nimport { useOrdersSelector } from '../../../redux/selectors.store';\nimport { ToastService } from '../../../services';\nimport _ from 'lodash';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { orderInfoBaseSchema } from '../validation';\nimport { ServiceName, useAppServiceProvider } from '../../../hooks/useAppServices.hook';\nimport { createApiCall, OrdersApi } from '../../../api';\nimport { formatDateForInputValue } from '../../../utils';\n\nimport * as fns from 'date-fns';\n\nexport interface FormCreateOrdersGroupProps\n  extends Omit<ModalFormProps<any, any, FormCreateOrdersGroupStepsData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<FormCreateOrdersGroupStepsData>;\n}\nexport interface FormCreateOrdersGroupStepsData {\n  slots?: IOrderTempSlot[];\n  info?: ICreateOrderInfoFormState;\n\n  orders?: IOrder[];\n}\nexport enum FormCreateOrdersGroupStepsEnum {\n  Stuffing = 'Stuffing',\n  Info = 'Info',\n  // Confirmation = 'Confirmation',\n  // Invoices = 'Invoices',\n}\n\nconst steps = enumToFilterOptions(FormCreateOrdersGroupStepsEnum);\n\nconst stepsProcessInitialState: Record<FormCreateOrdersGroupStepsEnum | string, boolean> = {\n  [FormCreateOrdersGroupStepsEnum.Stuffing]: true,\n  [FormCreateOrdersGroupStepsEnum.Info]: false,\n  // [FormCreateOrdersGroupStepsEnum.Confirmation]: false,\n  // [FormCreateOrdersGroupStepsEnum.Invoices]: false,\n};\nconst FormCreateOrdersGroup: React.FC<FormCreateOrdersGroupProps> = ({ onSubmit, onClose }) => {\n  const service = useAppServiceProvider()[ServiceName.orders];\n  const currentGroupFormState = useOrdersSelector().ordersGroupFormData;\n  const { stepsMap, stepIdx, setNextStep, setPrevStep, getCurrentStep, isLast } = useStepsHandler(steps);\n  const [isStepFinished, setIsStepFinished] =\n    useState<Record<FormCreateOrdersGroupStepsEnum | string, boolean>>(stepsProcessInitialState);\n\n  const handleValidStatus = (name: keyof typeof FormCreateOrdersGroupStepsEnum) => (value: boolean) => {\n    setIsStepFinished(p => ({ ...p, [FormCreateOrdersGroupStepsEnum[name]]: value }));\n  };\n\n  const formOrderInfo = useForm<ICreateOrderInfoFormState>({\n    defaultValues: {\n      ...currentGroupFormState.info,\n      invoiceInfo: {\n        expiredAt: formatDateForInputValue(fns.addDays(new Date(), 1)),\n        ...currentGroupFormState.info?.invoiceInfo,\n      },\n    },\n    resolver: yupResolver(orderInfoBaseSchema),\n    reValidateMode: 'onChange',\n  });\n  const orderInfoFormValues = formOrderInfo.watch();\n\n  const renderStep = useMemo(() => {\n    if (stepsMap?.Stuffing) {\n      return <OrderGroupsStuffingStep onChangeValidStatus={handleValidStatus('Stuffing')} />;\n    }\n    if (stepsMap?.Info) {\n      return <OrderInfoStep onChangeValidStatus={handleValidStatus('Info')} isGroup />;\n    }\n  }, [stepsMap?.Info, stepsMap?.Stuffing]);\n\n  const canGoNext = useMemo(() => {\n    return isStepFinished[getCurrentStep().value];\n  }, [getCurrentStep, isStepFinished]);\n\n  const handlePrevPress = () => {\n    if (getCurrentStep().value === 'Info') {\n      service.updateCurrentGroupFormInfoData(_.cloneDeep(orderInfoFormValues));\n    }\n    setPrevStep();\n  };\n\n  const handleNextPress = () => {\n    if (getCurrentStep().value === 'Info') {\n      service.updateCurrentGroupFormInfoData(_.cloneDeep(orderInfoFormValues));\n    }\n    if (canGoNext) {\n      setNextStep();\n    } else {\n      ToastService.error(`${t('Step is not finished')}: \"${getCurrentStep().value.toUpperCase()}\"`);\n    }\n  };\n  const canAccept = useMemo(() => {\n    if (stepsMap.Stuffing) {\n      return isStepFinished.Stuffing;\n    }\n    if (stepsMap.Info) {\n      return isStepFinished.Info;\n    }\n\n    return false;\n  }, [isStepFinished.Info, isStepFinished.Stuffing, stepsMap.Info, stepsMap.Stuffing]);\n\n  const handleAcceptPress = () => {\n    if (!canAccept) {\n      ToastService.error('Form is not valid');\n      return;\n    }\n\n    createApiCall(\n      {\n        data: { data: { info: orderInfoFormValues, slots: currentGroupFormState.slots } },\n        onSuccess: data => {\n          console.log(data);\n        },\n        onError: error => {\n          console.log(error);\n        },\n        onLoading: loading => {},\n      },\n      OrdersApi.createManyOrdersGroupedByWarehouse,\n      OrdersApi\n    );\n  };\n\n  return (\n    <FormProvider {...formOrderInfo}>\n      <Form>\n        <ModalHeader title={t('Create orders group by warehouse')} onBackPress={onClose} />\n\n        <Content fillWidth flex={1} overflow={'hidden'}>\n          <ModalFilter filterOptions={steps} asStepper currentIndex={stepIdx} optionProps={{ fitContentH: true }} />\n\n          {renderStep}\n        </Content>\n\n        <Footer padding={'8px'}>\n          <StepsController\n            steps={steps}\n            onNextPress={handleNextPress}\n            onPrevPress={handlePrevPress}\n            currentIndex={stepIdx}\n            canGoNext={true}\n            canAccept={isLast}\n            onAcceptPress={handleAcceptPress}\n            onCancelPress={stepIdx === 0 ? onClose : undefined}\n          />\n        </Footer>\n      </Form>\n    </FormProvider>\n  );\n};\nconst Form = styled.div`\n  color: ${p => p.theme.fontColorSidebar};\n\n  display: flex;\n  flex-direction: column;\n\n  width: 98vw;\n  height: 98vh;\n  padding: 0 8px;\n\n  background-color: ${p => p.theme.modalBackgroundColor};\n`;\n\nconst Content = styled(FlexBox)`\n  border-top: 1px solid ${p => p.theme.modalBorderColor};\n  border-bottom: 1px solid ${p => p.theme.modalBorderColor};\n`;\n\nconst Footer = styled(FlexBox)``;\nexport default FormCreateOrdersGroup;\n","import styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport { FilterOption } from '../../ModalForm/ModalFilter';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { checks } from '../../../utils';\nimport { t } from '../../../lang';\nimport { useMediaQuery } from 'react-responsive';\n\nexport type StepChangeEvent<V = any, D = any> = {\n  option: FilterOption<V, D>;\n  value: V;\n  index: number;\n  name?: string;\n};\nexport type StepChangeHandler<V = any, D = any> = (event: StepChangeEvent<V, D>) => void;\nexport interface StepsControllerProps<V = any> {\n  steps?: FilterOption<V>[];\n  currentIndex?: number;\n  onNextPress?: StepChangeHandler<V>;\n  onPrevPress?: StepChangeHandler<V>;\n\n  onCancelPress?: () => void;\n  onAcceptPress?: () => void;\n\n  canGoNext?: boolean;\n  canAccept?: boolean;\n  canSubmit?: boolean;\n\n  cancelButton?: boolean;\n  submitButton?: boolean;\n  acceptButton?: boolean;\n  arrowButtons?: boolean;\n}\n\nconst StepsController = <V = any,>({\n  steps,\n  currentIndex = 0,\n  onNextPress,\n  onPrevPress,\n  onCancelPress,\n  onAcceptPress,\n  canGoNext = true,\n  canAccept,\n  canSubmit,\n  cancelButton = true,\n  submitButton = true,\n  acceptButton,\n  arrowButtons = true,\n}: StepsControllerProps<V>) => {\n  const isTablet = useMediaQuery({ query: '(max-width: 768px)' });\n  const isMobile = useMediaQuery({ query: '(max-width: 480px)' });\n  const [current, setCurrent] = useState<number>(currentIndex);\n\n  const prevData = useMemo((): { label?: string; value: V } | null => {\n    if (!steps) return null;\n    return steps[current - 1] ? { label: steps[current - 1]?.label, value: steps[current - 1]?.value } : null;\n  }, [current, steps]);\n  const nextData = useMemo((): { label?: string; value: V } | null => {\n    if (!steps) return null;\n\n    return steps[current + 1] ? { label: steps[current + 1]?.label, value: steps[current + 1]?.value } : null;\n  }, [current, steps]);\n\n  const handlePrevPress = useCallback(() => {\n    if (steps) {\n      if (onPrevPress) {\n        if (current === 0) {\n          onCancelPress && onCancelPress();\n          return;\n        } else {\n          const newValue = current - 1;\n          onPrevPress && onPrevPress({ option: steps[newValue], value: steps[newValue].value, index: newValue });\n        }\n      } else {\n        setCurrent(prev => {\n          if (prev === 0) {\n            return prev;\n          } else {\n            return prev - 1;\n          }\n        });\n      }\n    }\n  }, [current, onCancelPress, onPrevPress, steps]);\n\n  const handleNextPress = useCallback(() => {\n    if (steps) {\n      if (onNextPress) {\n        const newValue = current + 1;\n        if (newValue === steps.length) {\n          return onAcceptPress && onAcceptPress();\n        } else {\n          return onNextPress({ option: steps[newValue], value: steps[newValue].value, index: newValue });\n        }\n      } else {\n        setCurrent(prev => {\n          return prev + 1 === steps.length ? prev + 1 : prev;\n        });\n      }\n    }\n  }, [current, onAcceptPress, onNextPress, steps]);\n\n  useEffect(() => {\n    if (checks.isNotUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  return (\n    <Container fxDirection={'row'} gap={8} fillWidth>\n      {cancelButton && !isTablet && (\n        <ActionButton variant={'defOutlinedSmall'} onClick={onCancelPress}>\n          {t('Cancel')}\n        </ActionButton>\n      )}\n\n      {arrowButtons && (\n        <ArrowButton\n          variant={isMobile ? 'onlyIconFilled' : 'filledSmall'}\n          icon={'SmallArrowLeft'}\n          onClick={handlePrevPress}\n          disabled={!prevData}\n        >\n          {prevData?.label}\n        </ArrowButton>\n      )}\n\n      {arrowButtons && (\n        <ArrowButton\n          variant={isMobile ? 'onlyIconFilled' : 'filledSmall'}\n          endIcon={'SmallArrowRight'}\n          onClick={handleNextPress}\n          disabled={!canGoNext || !nextData}\n        >\n          {nextData?.label}\n        </ArrowButton>\n      )}\n\n      {(submitButton || acceptButton) && (\n        <ActionButton\n          variant={'filledSmall'}\n          type={canSubmit && submitButton ? 'submit' : 'button'}\n          onClick={onAcceptPress}\n          disabled={canSubmit && submitButton ? !canSubmit : !canAccept}\n        >\n          {t('Accept')}\n        </ActionButton>\n      )}\n    </Container>\n  );\n};\n\nconst Container = styled(FlexBox)`\n  //min-height: 44px;\n  // border-top: 1px solid ${({ theme }) => theme.modalBorderColor};\n  // border-bottom: 1px solid ${({ theme }) => theme.modalBorderColor};\n`;\nconst ActionButton = styled(ButtonIcon)`\n  flex: 1;\n  min-width: min-content;\n  height: 100%;\n`;\nconst ArrowButton = styled(ButtonIcon)`\n  min-width: 34px;\n  height: 100%;\n  color: ${p => p.theme.accentColor.base};\n  fill: ${p => p.theme.accentColor.base};\n  background-color: ${p => p.theme.accentColor.light};\n  @media screen and (min-width: 480px) {\n    flex: 1;\n  }\n`;\nexport default StepsController;\n","import { AppQueryParams } from '../../api';\nimport {\n  AddressDto,\n  ContactsDto,\n  IAddressSlot,\n  IBase,\n  IContactsSlot,\n  IFormDataValueWithUUID,\n  OnlyUUID,\n} from '../global.types';\nimport { IOrder } from '../orders/orders.types';\nimport { BusinessSubjectTypeEnum } from '../companies/companies.types';\n\nexport enum CustomerTypeEnum {\n  active = 'active',\n}\n\nexport enum EngagementSource {\n  facebook = 'facebook',\n  instagram = 'instagram',\n  referralSystem = 'referralSystem',\n  another = 'another',\n}\nexport interface ICustomerBase extends IBase {\n  label?: string;\n  name?: string;\n  secondName?: string;\n  email?: string;\n  phone?: string;\n  age?: string;\n  taxCode?: string;\n  personalTaxCode?: string;\n  type?: CustomerTypeEnum;\n  businessType?: BusinessSubjectTypeEnum;\n\n  birthDate?: string | number | Date;\n  avatarURL?: string;\n  tags?: string[];\n\n  engagementSource?: EngagementSource;\n}\nexport interface ICustomer extends ICustomerBase {\n  orders?: IOrder[];\n\n  referer?: ICustomer;\n  referrals?: ICustomer[];\n\n  addresses?: IContactsSlot[];\n  contacts?: IAddressSlot[];\n}\n\nexport interface ICustomerDto extends Omit<ICustomerBase, '_id' | 'createdAt' | 'updatedAt' | 'deletedAt'> {\n  referrer?: OnlyUUID;\n}\n\nexport interface ICustomerFormData extends ICustomerDto {\n  referrer?: IFormDataValueWithUUID;\n\n  addresses?: ContactsDto[];\n  contacts?: AddressDto[];\n}\n\nexport interface ICustomerReqDta {\n  _id?: string;\n  data?: ICustomerDto;\n  params?: AppQueryParams;\n}\n","import { AppSubmitHandler } from '../../../hooks/useAppForm.hook';\nimport { EngagementSource, ICustomerFormData } from '../../../redux/customers/customers.types';\nimport ModalForm, { ModalFormProps } from '../../ModalForm';\nimport { t } from '../../../lang';\nimport styled from 'styled-components';\nimport FlexBox from '../../atoms/FlexBox';\nimport InputLabel from '../../atoms/Inputs/InputLabel';\nimport InputText from '../../atoms/Inputs/InputText';\nimport ButtonsGroup from '../../atoms/ButtonsGroup';\nimport { businessSubjectTypeFilterOptions } from '../../../data/companies.data';\nimport { useForm } from 'react-hook-form';\nimport ButtonIcon from '../../atoms/ButtonIcon/ButtonIcon';\nimport CheckboxesListSelector from '../../atoms/CheckboxesListSelector';\nimport { enumToFilterOptions } from '../../../utils/fabrics';\nimport { useMemo } from 'react';\nimport { ConfigService } from '../../../services';\nimport { BusinessSubjectTypeEnum } from '../../../redux/companies/companies.types';\nimport _ from 'lodash';\n\nconst isDevMode = ConfigService.isDevMode();\n\nexport interface FormCreateCustomerProps extends Omit<ModalFormProps<any, any, ICustomerFormData>, 'onSubmit'> {\n  onSubmit?: AppSubmitHandler<ICustomerFormData>;\n  withReferer?: boolean;\n}\n\nconst engagementSourceOptions = enumToFilterOptions(EngagementSource);\nconst FormCreateCustomer: React.FC<FormCreateCustomerProps> = ({\n  defaultState,\n  withReferer,\n  onSubmit,\n  onClose,\n  ...p\n}) => {\n  const { register, setValue, handleSubmit, watch } = useForm<ICustomerFormData>({\n    defaultValues: { ...defaultState, businessType: BusinessSubjectTypeEnum.company },\n  });\n  const formValues = watch();\n\n  const isEditMode = useMemo(() => !!defaultState?.email, [defaultState?.email]);\n\n  const onValid = (fData: ICustomerFormData) => {\n    onSubmit && onSubmit(_.omit(fData, isEditMode ? ['engagementSource', 'email'] : ['engagementSource']));\n  };\n\n  return (\n    <ModalForm {...p} title={p.title ? p.title : t('Create customer')} onSubmit={handleSubmit(onValid)}>\n      <Inputs padding={'0 8px 8px'}>\n        <InputLabel label={t('type')} required>\n          <ButtonsGroup\n            options={businessSubjectTypeFilterOptions}\n            onSelect={info => {\n              setValue('businessType', info?.value);\n            }}\n          />\n        </InputLabel>\n\n        <InputLabel label={t('name')} required>\n          <InputText placeholder={t('name')} {...register('name')} required />\n        </InputLabel>\n\n        <InputLabel label={t('secondName')}>\n          <InputText placeholder={t('secondName')} {...register('secondName')} />\n        </InputLabel>\n\n        <InputLabel label={t('email')} disabled={isEditMode} required>\n          <InputText\n            placeholder={t('email')}\n            type={'email'}\n            {...register('email', { required: true })}\n            disabled={isEditMode}\n            required\n          />\n        </InputLabel>\n\n        <InputLabel label={t('phone')}>\n          <InputText placeholder={t('phone')} {...register('phone')} />\n        </InputLabel>\n\n        <InputLabel label={t('Birth date')}>\n          <InputText placeholder={t('Birth date')} {...register('birthDate')} type={'datetime-local'} />\n        </InputLabel>\n\n        {withReferer && isDevMode && (\n          <InputLabel label={t('Referrer id')}>\n            <InputText placeholder={t('Referrer id')} {...register('referrer._id')} />\n          </InputLabel>\n        )}\n\n        <InputLabel label={t('Source')}>\n          <CheckboxesListSelector\n            disabled\n            options={engagementSourceOptions}\n            currentOption={{ value: formValues?.engagementSource }}\n            onChangeIndex={i => {\n              setValue('engagementSource', engagementSourceOptions[i].value);\n            }}\n          />\n        </InputLabel>\n\n        {formValues?.engagementSource === EngagementSource.referralSystem && (\n          <FlexBox gap={8} fillWidth>\n            <InputLabel label={t('Referrer')} required>\n              <InputText placeholder={t('Referrer')} type={'email'} required />\n            </InputLabel>\n\n            <FlexBox fxDirection={'row'} fillWidth gap={8} padding={'8px 0'}>\n              <ButtonIcon variant={'defOutlinedSmall'}>{t('Clear referrer')}</ButtonIcon>\n              <ButtonIcon variant={'outlinedSmall'} flex={1}>\n                {t('Select referrer')}\n              </ButtonIcon>\n            </FlexBox>\n          </FlexBox>\n        )}\n      </Inputs>\n    </ModalForm>\n  );\n};\nconst Inputs = styled(FlexBox)``;\nexport default FormCreateCustomer;\n","import { FilterOption } from '../ModalForm/ModalFilter';\nimport { useEffect, useState } from 'react';\nimport { checks } from '../../utils';\nimport FlexBox from './FlexBox';\nimport CheckBox from '../TableList/TebleCells/CellComponents/CheckBox';\nimport { Text } from './Text';\n\nexport interface CheckboxesListOption<V = any> extends Partial<FilterOption<V>> {\n  description?: string;\n}\n\nexport type CheckboxesListOnChangeHandler = (ids: string[]) => void;\n\nconst CheckboxesListSelector = <V = any,>({\n  options,\n  onChangeIndex,\n  currentIndex,\n  currentOption,\n  multiple,\n  onChange,\n  value,\n  disabled,\n  disabledCheck,\n}: {\n  onChangeIndex?: (index: number) => void;\n  onChange?: CheckboxesListOnChangeHandler;\n  options?: CheckboxesListOption<V>[];\n  currentIndex?: number;\n  currentOption?: CheckboxesListOption<V>;\n  value?: string[];\n  multiple?: boolean;\n  disabled?: boolean;\n  disabledCheck?: (option: CheckboxesListOption<V>, index: number) => boolean;\n}) => {\n  const [current, setCurrent] = useState(0);\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n\n  const handleSelect = (id: string) => {\n    if (multiple) {\n      setSelectedIds(p => {\n        const newValue = selectedIds.includes(id) ? p.filter(el => el !== id) : [...p, id];\n        onChange && onChange(newValue);\n        return newValue;\n      });\n    } else {\n      setSelectedIds([id]);\n      onChange && onChange([id]);\n    }\n  };\n  const handleSetCurrent = (idx: number) => {\n    setCurrent(idx);\n    onChangeIndex && onChangeIndex(idx);\n  };\n\n  useEffect(() => {\n    if (!checks.isUnd(currentIndex)) {\n      setCurrent(currentIndex);\n    }\n  }, [currentIndex]);\n\n  useEffect(() => {\n    if (multiple) return;\n    if (!checks.isUnd(currentOption) && !checks.isUnd(options)) {\n      setCurrent(options.findIndex(o => o?.value === currentOption?.value || o?._id === currentOption?._id));\n    }\n  }, [currentOption, multiple, options]);\n\n  useEffect(() => {\n    if (!multiple) return;\n    if (!checks.isUnd(value) && checks.isArray(value)) {\n      setSelectedIds(value);\n    }\n  }, [multiple, value]);\n  return (\n    <FlexBox fillWidth gap={8}>\n      {options?.map((o, idx) => {\n        const isDisabled = disabledCheck ? disabledCheck(o, idx) : disabled;\n\n        return (\n          <FlexBox\n            key={`m-opt_${o.value}`}\n            fxDirection={'row'}\n            gap={8}\n            padding={'2px 4px'}\n            alignItems={'center'}\n            style={{ opacity: isDisabled ? 0.7 : 1, pointerEvents: isDisabled ? 'none' : 'all' }}\n            onClick={() => {\n              if (isDisabled) return;\n              handleSetCurrent(idx);\n              o?._id && handleSelect(o?._id);\n            }}\n          >\n            <CheckBox\n              checked={(o?._id && selectedIds.includes(o?._id)) || idx === current}\n              size={'22px'}\n              disabled={isDisabled}\n            />\n\n            <Text>{o?.label}</Text>\n          </FlexBox>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default CheckboxesListSelector;\n","import { CellTittleProps } from '../components/TableList/TebleCells/CellTitle';\nimport { ICustomer } from '../redux/customers/customers.types';\nimport { t } from '../lang';\n\nexport const customersColumns: CellTittleProps<ICustomer>[] = [\n  {\n    top: {\n      name: `${t('label')}/${t('name')}`,\n      getData: d => d?.label || `${d?.name || '---'} ${d?.secondName || '---'}`,\n    },\n    bottom: { name: 'ІПН/ЄДРПОУ', getData: d => (d.personalTaxCode || '---') + '/' + (d.taxCode || '---') },\n    width: '240px',\n    action: 'doubleDataWithAvatar',\n  },\n  {\n    top: { name: 'Тип', path: 'type', getData: d => d?.type },\n    bottom: { name: 'Статус', path: 'status' },\n    width: '120px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Емейл', path: 'email', uppercase: false },\n    bottom: { name: 'Телефон', path: 'phone' },\n    width: '170px',\n    action: 'contacts',\n  },\n  {\n    top: { name: 'Локація' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Теги', path: 'tags' },\n    width: '200px',\n    action: 'tags',\n  },\n  {\n    top: { name: 'Коментар', path: 'description' },\n    width: '170px',\n    action: 'valueByPath',\n  },\n  {\n    top: { name: 'Створено', align: 'center', path: 'createdAt' },\n    bottom: { name: 'Оновлено', align: 'center', path: 'updatedAt' },\n    width: '150px',\n    action: 'dateSimple',\n  },\n];\n"],"names":["StAccordionItem","styled","FormAccordionItem","_templateObject","_taggedTemplateLiteral","_ref","slots","onRemove","onUpdate","renderHeader","title","onAddSlotPress","renderFooter","theme","useTheme","renderSlots","useMemo","map","slot","_jsx","OrderSlotOverview","editable","onRemovePress","tempId","undefined","concat","renderHeaderComp","_jsxs","FlexBox","fxDirection","fillHeight","gap","alignItems","padding","children","Text","$weight","$size","height","border","modalBorderColor","ButtonIcon","variant","style","minWidth","fontWeight","disabled","onClick","t","_Fragment","open","Container","p","fontColorSidebar","Content","_templateObject2","Buttons","_templateObject3","onChangeValidStatus","modalS","useModalService","service","useAppServiceProvider","AppModuleName","useOrdersSelector","ordersGroupFormData","isMobile","useMediaQuery","maxWidth","handelAddSlot","useCallback","addTempSlot","handelRemoveSlot","id","removeTempSlot","handelUpdateSlot","updateTempSlot","groupedData","_slot$warehouse","_map$slot$warehouse$_","_map$slot$warehouse$_2","warehouse","_id","_toConsumableArray","useEffect","length","renderGroupedData","Object","keys","k","i","_v$warehouse","_v$warehouse2","v","OrderGroupItem","label","m","Modal","Modals","props","params","getIdRef","onSubmit","d","onClose","flex","fillWidth","overflow","position","window","confirm","ToastService","onSelect","asReceiver","_objectWithoutProperties","_excluded","customers","useCustomersSelector","ServiceName","tableConfigs","tableData","tableTitles","customersColumns","actionsCreator","_ctx","icon","getAll","separator","ModalChildren","FormCreateCustomer","modalChildrenProps","create","data","createDataForReq","onSuccess","onRowClick","rowData","refresh","ModalForm","_objectSpread","TableList","users","usePermissionsSelector","res","find","pr","usersDirColumns","isSearch","isReceiver","customerS","iconSize","size","info","isManager","renderCells","_ref3","getValue","visible","name","secondName","email","taxCode","personalTaxCode","_info$tags","tags","join","getCustomerInfoComponentCells","_ref2","$align","flexWrap","destinationAddressInputsProps","required","throttleCallback","_","_console","_len","arguments","args","Array","_key","console","log","apply","fn","addDays","dirtyDate","dirtyAmount","requiredArgs","date","toDate","amount","toInteger","isNaN","Date","NaN","setDate","getDate","AccordionItemTitle","$padding","$ellipsisMode","Inputs","BorderedBox","_formValues$manager","_formValues$communica","_formValues$communica2","_formValues$invoiceIn","_formValues$deliveryI","_formValues$deliveryI2","_formValues$deliveryI3","_formValues$deliveryI4","_formValues$deliveryI5","_formValues$deliveryI6","_useState","useState","_useState2","_slicedToArray","confirms","setConfirms","shipmentMethodsList","useTranslatedMethodsList","useShipmentsSelector","methods","withFullLabel","communicationMethodsList","useCommunicationSelector","invoicingMethods","useInvoicesSelector","_useOrderInfoForm","useFormContext","_useOrderInfoForm$for","formState","isValid","errors","register","setValue","unregister","watch","trigger","formValues","handleOnChangeValue","path","value","then","catch","e","error","registerConfirmSelectHandler","_defineProperty","formatDateForInputValue","fns","width","margin","manager","InputLabel","CustomerInfoComponent","user","SelectManagerModal","contentContainerStyle","customer","TagButtonsFilter","multiple","numColumns","values","communication","resetButtonLabel","options","resetButtonPosition","onChange","CreateCustomerButtonIcon","SelectCustomerModal","ButtonSwitch","hasReceiverInfo","receiver","rejectLabel","acceptLabel","mtd","CheckboxesListSelector","currentOption","invoiceInfo","method","onChangeIndex","InputText","placeholder","type","hasExecuteDate","hasDelivery","deliveryInfo","columnGap","display","gridTemplateColumns","_errors$deliveryInfo","_errors$deliveryInfo2","destination","hasDeliveryInvoice","FormCreateOrdersGroupStepsEnum","steps","enumToFilterOptions","stepsProcessInitialState","_stepsProcessInitialS","Stuffing","Info","Form","modalBackgroundColor","Footer","_currentGroupFormStat","currentGroupFormState","_useStepsHandler","useStepsHandler","stepsMap","stepIdx","setNextStep","setPrevStep","getCurrentStep","isLast","isStepFinished","setIsStepFinished","handleValidStatus","formOrderInfo","useForm","defaultValues","expiredAt","resolver","yupResolver","orderInfoBaseSchema","reValidateMode","orderInfoFormValues","renderStep","OrderGroupsStuffingStep","OrderInfoStep","isGroup","canGoNext","canAccept","FormProvider","ModalHeader","onBackPress","ModalFilter","filterOptions","asStepper","currentIndex","optionProps","fitContentH","StepsController","onNextPress","updateCurrentGroupFormInfoData","toUpperCase","onPrevPress","onAcceptPress","createApiCall","onError","onLoading","loading","OrdersApi","onCancelPress","ActionButton","ArrowButton","accentColor","base","light","_ref$currentIndex","_ref$canGoNext","canSubmit","_ref$cancelButton","cancelButton","_ref$submitButton","submitButton","acceptButton","_ref$arrowButtons","arrowButtons","isTablet","query","current","setCurrent","prevData","_steps","_steps2","nextData","_steps3","_steps4","handlePrevPress","newValue","option","index","prev","handleNextPress","checks","endIcon","EngagementSource","isDevMode","ConfigService","engagementSourceOptions","defaultState","withReferer","_useForm","businessType","BusinessSubjectTypeEnum","handleSubmit","isEditMode","fData","ButtonsGroup","businessSubjectTypeFilterOptions","engagementSource","referralSystem","disabledCheck","_useState3","_useState4","selectedIds","setSelectedIds","findIndex","o","idx","isDisabled","opacity","pointerEvents","handleSetCurrent","includes","filter","el","CheckBox","checked","top","getData","bottom","action","uppercase","align"],"sourceRoot":""}