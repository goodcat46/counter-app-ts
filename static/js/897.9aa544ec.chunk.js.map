{"version":3,"file":"static/js/897.9aa544ec.chunk.js","mappings":"sRAqEMA,EAAOC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gBACnBC,EAAAA,IAKEC,EAAqC,WAEzC,IAAMC,GAASC,EAAAA,EAAAA,MAEf,OAAO,SAACC,GAAuB,MAAK,CAClC,CAAEC,KAAM,yBAA0BC,KAAM,SAAUC,QAAS,WAAO,GAClE,CAAEF,KAAM,uBAAwBC,KAAM,OAAQC,QAAS,WAAO,GAC9D,CACEF,KAAM,sBACNC,KAAM,OACNC,QAAS,WACPL,EAAOM,gBAAgB,CAAEC,MAAOC,EAAAA,EAAAA,4BAClC,GAEF,CACJ,EACA,UAvE6C,SAACC,GAC5C,IAAMC,GAAcC,EAAAA,EAAAA,MAAeD,YAC3BE,GAAYC,EAAAA,EAAAA,MAAwBC,EAAAA,GAAAA,YAApCF,QACFG,GAAQC,EAAAA,EAAAA,MACRC,EAAiBlB,IACvBmB,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAoCL,EAAAA,EAAAA,YAAuBM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAApDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAwCT,EAAAA,EAAAA,YAAgCU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjEE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAE9BG,GAAcC,EAAAA,EAAAA,UAClB,eAAAC,EAAA,MAA2C,CACzCC,UAAwB,QAAfD,EAAEnB,EAAMqB,eAAO,IAAAF,OAAA,EAAbA,EAAeG,MAC1BC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,YAAY,EACZxB,eAAAA,EACAyB,eAAgB,SAAAZ,GACdC,EAAgBD,EAClB,EACAa,gBAAiB,SAACC,EAAOC,GACvBlB,EAAc,CAAEmB,SAAUF,EAAME,SAAUD,UAAAA,GAC5C,EACD,GACD,CAAC5B,EAAgBF,IAgBnB,OAbAgC,EAAAA,EAAAA,YAAU,WACJrC,GACFE,EAAQ,CAAEoC,KAAM,CAAEC,IAAKvC,GAAewC,UAAW3B,GAGrD,GAAG,CAACb,KAEJqC,EAAAA,EAAAA,YAAU,WACRI,QAAQC,IAAI,gDACZD,QAAQC,IAAI1B,GACZyB,QAAQC,IAAItB,EACd,GAAG,CAACA,EAAcJ,KAGhB2B,EAAAA,EAAAA,KAACC,EAAAA,QAAW,CAACC,KAAM9C,EAAM8C,KAAKC,UAC5BH,EAAAA,EAAAA,KAAC3D,EAAI,CAAA8D,UACHH,EAAAA,EAAAA,KAACI,EAAAA,IAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK1B,GAAW,IAAEV,UAAWA,EAAWqC,YAAaC,EAAAA,SAIvE,C,6GCjEa9D,GAAmB+D,EAAAA,EAAAA,IAAGjE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mDAItBiE,GAAgBD,EAAAA,EAAAA,IAAGE,IAAAA,GAAAlE,EAAAA,EAAAA,GAAA,4CAIVgE,EAAAA,EAAAA,IAAGG,IAAAA,GAAAnE,EAAAA,EAAAA,GAAA,uC","sources":["components/AppPages/PageWarehouseOverview.tsx","components/AppPages/pagesStyles.tsx"],"sourcesContent":["import TableList, { ITableListContext } from 'components/TableList/TableList';\nimport { takeFullGridArea } from './pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps, TableActionCreator } from '../TableList/tableTypes.types';\nimport AppGridPage from './AppGridPage';\nimport { useWarehousesSelector } from '../../redux/selectors.store';\nimport { ISortParams } from '../../api';\nimport { FilterReturnDataType } from '../Filter/AppFilter';\nimport { PagePathType } from '../../data/pages.data';\nimport { warehouseOverviewTableColumns } from '../../data/warehauses.data';\nimport { useAppParams } from '../../hooks';\nimport { IProductInventory } from '../../redux/warehouses/warehouses.types';\nimport { ServiceName, useAppServiceProvider } from '../../hooks/useAppServices.hook';\nimport { useModalProvider } from '../ModalProvider/ModalProvider';\nimport { Modals } from '../ModalProvider/Modals';\n\ntype Props = {\n  path: PagePathType;\n};\nconst PageWarehouseOverview: React.FC<any> = (props: Props) => {\n  const warehouseId = useAppParams().warehouseId;\n  const { getById } = useAppServiceProvider()[ServiceName.warehouses];\n  const state = useWarehousesSelector();\n  const actionsCreator = useWarehouseOverviewActionsCreator();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IProductInventory> => ({\n      tableData: state.current?.items,\n      isFilter: false,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n      },\n    }),\n    [actionsCreator, state]\n  );\n\n  useEffect(() => {\n    if (warehouseId) {\n      getById({ data: { _id: warehouseId }, onLoading: setIsLoading });\n    }\n    // eslint-disable-next-line\n  }, [warehouseId]);\n\n  useEffect(() => {\n    console.log('PageWarehouseOverview ============>>>>>>>>>>');\n    console.log(sortParams);\n    console.log(filterParams);\n  }, [filterParams, sortParams]);\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} tableTitles={warehouseOverviewTableColumns} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\ntype WarehouseTableActionsCreator = TableActionCreator<IProductInventory>;\n\nconst useWarehouseOverviewActionsCreator = (): WarehouseTableActionsCreator => {\n  // const service = useAppServiceProvider().warehouses;\n  const modalS = useModalProvider();\n\n  return (_ctx: ITableListContext) => [\n    { name: 'deleteProductInventory', icon: 'delete', onClick: () => {} },\n    { name: 'editProductInventory', icon: 'edit', onClick: () => {} },\n    {\n      name: 'addProductInventory',\n      icon: 'plus',\n      onClick: () => {\n        modalS.handleOpenModal({ Modal: Modals.FormCreateProductInventory });\n      },\n    },\n  ];\n};\nexport default PageWarehouseOverview;\n","import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n"],"names":["Page","styled","_templateObject","_taggedTemplateLiteral","takeFullGridArea","useWarehouseOverviewActionsCreator","modalS","useModalProvider","_ctx","name","icon","onClick","handleOpenModal","Modal","Modals","props","warehouseId","useAppParams","getById","useAppServiceProvider","ServiceName","state","useWarehousesSelector","actionsCreator","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","_state$current","tableData","current","items","isFilter","isSearch","footer","checkBoxes","onFilterSubmit","handleTableSort","param","sortOrder","dataPath","useEffect","data","_id","onLoading","console","log","_jsx","AppGridPage","path","children","TableList","_objectSpread","tableTitles","warehouseOverviewTableColumns","css","takeFullPlace","_templateObject2","_templateObject3"],"sourceRoot":""}