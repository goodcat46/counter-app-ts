{"version":3,"file":"static/js/494.490db5d3.chunk.js","mappings":"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","sources":["components/Forms/offers/components/OfferBaseInfoFormArea.tsx","components/Forms/offers/components/DimensionsInputs.tsx","components/Forms/offers/components/OfferDimensionsFormArea.tsx","components/Forms/offers/components/OfferFormCategoriesArea.tsx","components/Forms/offers/components/OfferFormImagesArea.tsx","components/Forms/offers/components/OfferFormPropertiesArea.tsx","components/Forms/offers/components/MeasuremenInputs.tsx","components/Forms/offers/components/OfferMeasurementFormArea.tsx","components/Modals/CreateOfferModal.tsx"],"sourcesContent":["import { AccordionForm } from '../../FormArea/AccordionForm';\nimport { OfferFormAreaProps } from '../types';\nimport {\n  IProductFormData,\n  IProductFullFormData,\n  OfferEntity,\n  OfferTypeEnum,\n} from '../../../../types/offers/offers.types';\nimport { useAppForm } from '../../../../hooks';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport { t } from '../../../../lang';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport FlexBox from '../../../atoms/FlexBox';\nimport * as React from 'react';\nimport CustomSelect from '../../../atoms/Inputs/CustomSelect/CustomSelect';\nimport { ApiDirType } from '../../../../redux/APP_CONFIGS';\nimport TextareaPrimary from '../../../atoms/Inputs/TextareaPrimary';\nimport { toReqData } from '../../../../utils';\nimport useOffersService from '../../../../hooks/useProductsService.hook';\nimport { MaybeNull } from '../../../../types/utils.types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { OfferStatusFilterOptions } from '../../../../data';\nimport { useDirectorySelector } from '../../../../redux/selectors.store';\n\nexport interface OfferBaseInfoFormAreaProps extends OfferFormAreaProps<IProductFullFormData> {\n  type?: MaybeNull<OfferTypeEnum>;\n  onSuccess?: (data: OfferEntity) => void;\n  edit?: boolean;\n}\n\nexport const OfferBaseInfoFormArea = ({ defaultValues, edit, type, onSuccess, _id }: OfferBaseInfoFormAreaProps) => {\n  const { isLoading, onLoading } = useOfferLoadersProvider();\n\n  const service = useOffersService();\n\n  const brandsList = useDirectorySelector(ApiDirType.BRANDS).directory;\n\n  const {\n    formState: { errors },\n    register,\n    registerSelect,\n    formValues,\n    ...appForm\n  } = useAppForm<IProductFullFormData>({\n    defaultValues: { ...defaultValues, type },\n  });\n\n  function onValid(sData: IProductFormData) {\n    const productForSubmit = toReqData(sData, { ignorePaths: ['measurement'] });\n\n    !edit\n      ? service.create({\n          data: { data: productForSubmit },\n          onSuccess: onSuccess,\n          onLoading: onLoading('offer_create'),\n        })\n      : service.updateById({\n          data: { data: productForSubmit, _id },\n          onSuccess: onSuccess,\n          onLoading: onLoading('offer_update'),\n        });\n  }\n\n  return (\n    <AccordionForm\n      label={t('Base info')}\n      isLoading={!edit ? isLoading?.offer_create : isLoading?.offer_update}\n      onSubmit={appForm.handleSubmit(onValid)}\n      onReset={appForm.reset}\n    >\n      <InputLabel label={t('label')} error={errors.label} required>\n        <InputText placeholder={t('label')} {...register('label')} required autoFocus />\n      </InputLabel>\n\n      <FlexBox fxDirection={'row'} gap={6} fillWidth>\n        <InputLabel label={t('sku')} error={errors.sku}>\n          <InputText placeholder={t('sku')} {...register('sku')} />\n        </InputLabel>\n\n        <InputLabel label={'Штрих-код'} error={errors.barCode}>\n          <InputText placeholder={'Штрих-код'} {...register('barCode')} />\n        </InputLabel>\n      </FlexBox>\n\n      <CustomSelect\n        {...registerSelect('brand', {\n          options: brandsList,\n          label: t('brand'),\n          placeholder: t('selectBrand'),\n        })}\n      />\n\n      <CustomSelect\n        {...registerSelect('approved', {\n          options: OfferStatusFilterOptions,\n          label: t('status'),\n          placeholder: t('status'),\n        })}\n      />\n\n      <InputLabel label={t('description')} error={errors.description}>\n        <TextareaPrimary placeholder={t('description')} {...register('description')} />\n      </InputLabel>\n    </AccordionForm>\n  );\n};\n","import { t } from 'lang';\nimport * as React from 'react';\nimport FlexBox from '../../../atoms/FlexBox';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport styled from 'styled-components';\nimport { UseFormReturn } from 'react-hook-form/dist/types';\nimport { DimensionsKeyType, IDimensions } from 'types/utils.types';\n\nexport interface DimensionsFormData {\n  dimensions?: IDimensions;\n}\n\nexport const dimensionsInputsProps: {\n  label?: string;\n  placeholder?: string;\n  name: DimensionsKeyType;\n}[] = [\n  { name: 'height', label: t('Height'), placeholder: t('Sm') },\n  { name: 'width', label: t('Width'), placeholder: t('Sm') },\n  { name: 'length', label: t('Length'), placeholder: t('Sm') },\n  { name: 'weight', label: t('Weight'), placeholder: t('Kg') },\n];\n\nconst DimensionsInputs = <TContext = any,>({\n  form,\n  disabled,\n}: {\n  disabled?: boolean;\n  form: UseFormReturn<DimensionsFormData, TContext>;\n}) => {\n  const errors = form?.formState?.errors?.dimensions;\n\n  return (\n    <Box fillWidth>\n      {dimensionsInputsProps.map(input => {\n        return (\n          <InputLabel key={input.name} label={input.label} error={errors && errors[input.name]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={1}\n              type={'number'}\n              {...form.register(`dimensions.${input.name}`, {\n                valueAsNumber: true,\n                min: 1,\n              })}\n              disabled={disabled}\n            />\n          </InputLabel>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst Box = styled(FlexBox)`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 8px;\n\n  @media screen and (min-width: 480px) {\n    grid-template-columns: repeat(4, 1fr);\n  }\n`;\n\nexport default DimensionsInputs;\n","import DimensionsInputs, { DimensionsFormData } from './DimensionsInputs';\nimport { useAppForm } from '../../../../hooks';\nimport { AccordionForm } from '../../FormArea/AccordionForm';\nimport useOffersService from '../../../../hooks/useProductsService.hook';\nimport { ToastService } from '../../../../services';\nimport { IDimensions } from '../../../../types/utils.types';\nimport { useState } from 'react';\nimport { OfferFormAreaProps } from '../types';\nimport { t } from '../../../../lang';\n\nexport interface OfferDimensionsFormSectionProps extends OfferFormAreaProps<IDimensions> {}\n\nexport const OfferDimensionsFormArea = ({\n  defaultValues,\n  _id,\n  disabled,\n  ...props\n}: OfferDimensionsFormSectionProps) => {\n  const service = useOffersService();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useAppForm<DimensionsFormData>({\n    defaultValues: { dimensions: defaultValues ?? {} },\n  });\n\n  const onValid = (sData: DimensionsFormData) => {\n    service.updateById({\n      data: { data: sData, _id },\n      onSuccess(d) {\n        ToastService.success(`Product updated`);\n      },\n      onError: e => {\n        console.error('Product update action', e);\n      },\n      onLoading: setIsLoading,\n    });\n  };\n\n  const canSubmit = form.formState.touchedFields?.dimensions\n    ? Object.values(form.formState.touchedFields?.dimensions)?.some(fd => fd)\n    : false;\n\n  return (\n    <AccordionForm\n      onSubmit={form.handleSubmit(onValid)}\n      label={t('Package size')}\n      isLoading={isLoading}\n      isOpen={false}\n      {...props}\n      disabled={!canSubmit || disabled}\n    >\n      <DimensionsInputs form={form} disabled={disabled} />\n    </AccordionForm>\n  );\n};\n","import { FormEventHandler, useEffect, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../FormArea/AccordionForm';\nimport styled from 'styled-components';\nimport { FlexUl } from '../../../atoms/FlexBox';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { OfferFormAreaProps } from '../types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { t } from '../../../../lang';\nimport { IProductFullFormData, OfferEntity } from '../../../../types/offers/offers.types';\nimport { getIdRef, sortIds } from '../../../../utils';\nimport OfferCategoriesSelector from '../categories/OfferCategoriesSelector';\nimport { useCurrentOffer } from '../../../../hooks';\n\nexport interface OfferFormCategoriesAreaProps extends OfferFormAreaProps<IProductFullFormData['categories']> {\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n  onSuccess?: (data: OfferEntity) => void;\n}\n\nexport const OfferFormCategoriesArea = ({ offer, disabled }: OfferFormCategoriesAreaProps) => {\n  const currentOffer = useCurrentOffer(offer);\n  const loaders = useOfferLoadersProvider();\n  const initIds = sortIds(currentOffer?.categories?.map(p => p._id));\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const [categoriesIds, setCategoriesIds] = useState<string[]>(initIds);\n\n  const canSubmit = useMemo(() => {\n    return initIds?.join(',') !== sortIds(categoriesIds).join(',');\n  }, [initIds, categoriesIds]);\n\n  const handleFormSubmit: FormEventHandler = ev => {\n    ev.preventDefault();\n\n    currentOffer &&\n      service.updateById({\n        onLoading: loaders.onLoading('categories'),\n        data: { ...getIdRef(currentOffer), data: { categories: categoriesIds }, refreshCurrent: true },\n        onSuccess: (data, meta) => {},\n      });\n  };\n\n  useEffect(() => {\n    if (currentOffer?.categories) {\n      setCategoriesIds(currentOffer?.categories.map(c => c._id));\n    }\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AccordionForm\n      label={t('Categories')}\n      onSubmit={handleFormSubmit}\n      disabled={disabled}\n      // onReset={handleReset}\n      isLoading={loaders.isLoading?.properties}\n      canSubmit={canSubmit}\n      maxHeight={'300px'}\n      isOpen={false}\n    >\n      <ListBox flex={1} overflow={'auto'}>\n        <OfferCategoriesSelector onChangeIds={setCategoriesIds} offer={currentOffer} />\n      </ListBox>\n    </AccordionForm>\n  );\n};\nconst ListBox = styled(FlexUl)`\n  padding-bottom: 8px;\n`;\n","import { OfferFormAreaProps } from '../types';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { OfferEntity, OfferImageSlotEntity } from '../../../../types/offers/offers.types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { useEffect, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../FormArea/AccordionForm';\nimport FormOfferImagesComponent from './FormOfferImagesComponent';\nimport { getIdRef } from '../../../../utils';\nimport { t } from '../../../../lang';\nimport { ConfigService } from '../../../../services';\n\nexport interface OfferFormImagesAreaProps extends OfferFormAreaProps<OfferImageSlotEntity[]> {\n  onSubmit?: AppSubmitHandler<Partial<OfferImageSlotEntity>[]>;\n  onSuccess?: (data: OfferEntity) => void;\n  update?: string;\n}\n\nexport const OfferFormImagesArea = ({\n  offer,\n  onSubmit,\n  onSuccess,\n  disabled,\n  defaultValues,\n}: OfferFormImagesAreaProps) => {\n  const loaders = useOfferLoadersProvider();\n  const [state, setState] = useState<Partial<OfferImageSlotEntity>[]>(defaultValues || loaders?.state?.images || []);\n  useEffect(() => {\n    console.log(ConfigService);\n  }, []);\n  const service = useAppServiceProvider()[ServiceName.offers];\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n\n    if (onSubmit) {\n      onSubmit(state);\n    } else if (offer) {\n      service.updateById({\n        data: { ...getIdRef(offer), data: { images: state as OfferImageSlotEntity[] }, refreshCurrent: true },\n        onSuccess: onSuccess,\n        onLoading: loaders.onLoading('images'),\n      });\n    } else {\n      console.warn('Offer not passed');\n    }\n  };\n  const canSubmit = useMemo(() => {\n    return true;\n  }, []);\n\n  return (\n    <AccordionForm\n      label={t('Images')}\n      onSubmit={handleSubmit}\n      canSubmit={canSubmit}\n      disabled={disabled}\n      isLoading={loaders.isLoading?.images}\n      isOpen={false}\n      maxHeight={'400px'}\n    >\n      <FormOfferImagesComponent\n        hideLabel\n        initialData={state}\n        onChangeState={setState}\n        contentContainerStyle={{\n          flex: 1,\n          // borderTop: `1px solid ${theme.sideBarBorderColor}`,\n          // borderBottom: `1px solid ${theme.sideBarBorderColor}`,\n        }}\n      />\n    </AccordionForm>\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { AccordionForm } from '../../FormArea/AccordionForm';\nimport styled from 'styled-components';\nimport FlexBox from '../../../atoms/FlexBox';\nimport { useProductsSelector } from '../../../../redux/selectors.store';\nimport { ServiceName, useAppServiceProvider } from '../../../../hooks/useAppServices.hook';\nimport { AppSubmitHandler } from '../../../../hooks/useAppForm.hook';\nimport { OfferFormAreaProps } from '../types';\nimport { useOfferLoadersProvider } from '../../../Modals/CreateOfferModal';\nimport { ArrayOfUUID } from '../../../../redux/global.types';\nimport { t } from '../../../../lang';\nimport { OfferEntity } from '../../../../types/offers/offers.types';\nimport { PropertiesGroupSelect } from '../../../atoms/PropertiesGroupSelect';\nimport { PropertyBaseEntity, PropertyEntity } from '../../../../types/offers/properties.types';\nimport OfferVariationPropertySelector from '../variations/OfferVariationPropertySelector';\nimport { Text } from '../../../atoms/Text';\nimport { useCurrentOffer } from '../../../../hooks';\n\nexport interface OfferFormPropertiesAreaProps extends OfferFormAreaProps<ArrayOfUUID> {\n  onSubmit?: AppSubmitHandler<string[]>;\n  onSelect?: (id: string) => void;\n  onChange?: (ids: string[]) => void;\n  onSuccess?: (data: OfferEntity) => void;\n  update?: string;\n}\n\nconst sortIds = (ids?: string[]): string[] => {\n  return [...(ids ?? [])]?.sort((a, b) => a.localeCompare(b));\n};\n\nexport const OfferFormPropertiesArea = ({ onSubmit, onSuccess, disabled, offer }: OfferFormPropertiesAreaProps) => {\n  const loaders = useOfferLoadersProvider();\n  const state = useProductsSelector();\n  const currentOffer = useCurrentOffer(offer);\n  const service = useAppServiceProvider()[ServiceName.offers];\n\n  const initIds = sortIds(currentOffer?.properties?.map(p => p._id));\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(initIds);\n  const [template, setTemplate] = useState<PropertyBaseEntity>();\n\n  const handleSubmit = (ev: React.FormEvent) => {\n    ev.preventDefault();\n\n    if (onSubmit) {\n      onSubmit(selectedIds);\n    } else if (currentOffer) {\n      service.updateById({\n        data: { _id: currentOffer?._id, updateCurrent: true, data: { properties: selectedIds } },\n        onLoading: loaders.onLoading('properties'),\n        onSuccess: onSuccess,\n      });\n    }\n  };\n\n  const canSubmit = useMemo(() => {\n    return initIds?.join(',') !== sortIds(selectedIds)?.join(',');\n  }, [selectedIds, initIds]);\n\n  const propertiesList = useMemo(() => {\n    const _rootId = template?._id;\n    const _propertiesList: PropertyEntity[] = [];\n    const _propertiesIds = state.propertiesKeysMap?.[_rootId ?? 'def'] ?? [];\n\n    for (const propId of _propertiesIds) {\n      const prop = state.propertiesDataMap?.[propId];\n      if (prop && !prop?.isSelectable) {\n        const childrenIds = state.propertiesKeysMap[prop?._id];\n        if (childrenIds?.length) {\n          _propertiesList.push(prop);\n        }\n      }\n    }\n\n    return _propertiesList;\n  }, [template, state.propertiesDataMap, state.propertiesKeysMap]);\n\n  const handleSelect = useCallback((_parentId?: string, valueId: string = '') => {\n    setSelectedIds(prev => {\n      return prev.includes(valueId) ? prev.filter(el => el !== valueId) : [...prev, valueId];\n    });\n  }, []);\n\n  const renderPropertiesList = useMemo(() => {\n    return propertiesList?.map(prop => {\n      return (\n        <OfferVariationPropertySelector\n          key={`prop_${prop._id}`}\n          item={prop}\n          selectedIds={selectedIds}\n          onSelect={handleSelect}\n        />\n      );\n    });\n  }, [propertiesList, selectedIds, handleSelect]);\n\n  return (\n    <AccordionForm\n      label={t('Properties')}\n      canSubmit={canSubmit}\n      onSubmit={handleSubmit}\n      isLoading={loaders.isLoading?.properties}\n      isOpen={false}\n      disabled={!currentOffer || disabled}\n    >\n      <PropertiesGroupSelect selected={template} onSelect={setTemplate} />\n\n      <TemplateBox flex={1} overflow={'auto'}>\n        {renderPropertiesList?.length ? (\n          renderPropertiesList\n        ) : (\n          <FlexBox padding={'24px'} alignItems={'center'} justifyContent={'center'}>\n            <Text $size={16}>{t('Data not found')}</Text>\n          </FlexBox>\n        )}\n      </TemplateBox>\n    </AccordionForm>\n  );\n};\nconst TemplateBox = styled(FlexBox)`\n  padding-bottom: 8px;\n`;\n","import { Path } from 'react-hook-form';\nimport { MeasurementUnit } from 'types/offers/offers.types';\nimport { FilterOption } from '../../../atoms/TabSelector';\nimport { enumToFilterOptions } from 'utils/fabrics';\nimport CustomSelect from '../../../atoms/Inputs/CustomSelect/CustomSelect';\nimport InputLabel from '../../../atoms/Inputs/InputLabel';\nimport InputText from '../../../atoms/Inputs/InputText';\nimport FlexBox from '../../../atoms/FlexBox';\nimport * as React from 'react';\nimport { UseAppFormReturn } from 'hooks/useAppForm.hook';\nimport { t } from 'lang';\nimport { HasMeasurement } from 'types/utils.types';\n\nexport interface MeasurementInputsFormData extends HasMeasurement {}\n\nconst productsMeasurementUnitOptions = enumToFilterOptions(MeasurementUnit);\n\nconst measurementInputs: {\n  label?: string;\n  placeholder?: string;\n  name: Path<MeasurementInputsFormData>;\n  type?: HTMLInputElement['type'];\n  options?: FilterOption[];\n}[] = [\n  { name: 'measurement.unit', label: t('unit'), placeholder: t('unit'), options: productsMeasurementUnitOptions },\n  { name: 'measurement.min', label: t('min'), placeholder: t('min'), type: 'number' },\n  { name: 'measurement.max', label: t('max'), placeholder: t('max'), type: 'number' },\n  // { name: 'measurement.step', label: t('step'), placeholder: t('step'), type: 'number' },\n];\n\nconst MeasurementInputs = ({\n  appForm,\n  disabled,\n}: {\n  disabled?: boolean;\n  appForm: UseAppFormReturn<MeasurementInputsFormData>;\n}) => {\n  return (\n    <FlexBox fillWidth style={{ display: 'grid', gridTemplateColumns: '2fr 1fr 1fr', columnGap: 8 }}>\n      {measurementInputs.map(input => {\n        return input.options ? (\n          <CustomSelect\n            key={input.name}\n            {...appForm.registerSelect(input?.name, {\n              options: input?.options,\n              label: input?.label,\n              placeholder: input?.label,\n              dropDownIsAbsolute: true,\n              onlyValue: true,\n            })}\n            disabled={disabled}\n          />\n        ) : (\n          <InputLabel key={input.name} label={input.label} error={appForm?.formState?.errors[input.name as never]}>\n            <InputText\n              placeholder={input.placeholder}\n              min={input?.type === 'number' ? 1 : undefined}\n              type={input?.type}\n              {...appForm.register(input.name, {\n                valueAsNumber: input?.type === 'number',\n                min: input?.type === 'number' ? 1 : undefined,\n              })}\n              disabled={disabled}\n            />\n          </InputLabel>\n        );\n      })}\n    </FlexBox>\n  );\n};\n\nexport default MeasurementInputs;\n","import MeasurementInputs, { MeasurementInputsFormData } from './MeasuremenInputs';\nimport { useAppForm } from '../../../../hooks';\nimport { AccordionForm } from '../../FormArea/AccordionForm';\nimport useOffersService from '../../../../hooks/useProductsService.hook';\nimport { ToastService } from '../../../../services';\nimport { IMeasurement } from '../../../../types/utils.types';\nimport { useState } from 'react';\nimport { OfferFormAreaProps } from '../types';\nimport { t } from '../../../../lang';\n\nexport interface OfferMeasurementFormProps extends OfferFormAreaProps<IMeasurement> {}\n\nexport const OfferMeasurementFormArea = ({ defaultValues, _id, disabled, ...props }: OfferMeasurementFormProps) => {\n  const service = useOffersService();\n  const [isLoading, setIsLoading] = useState(false);\n  const form = useAppForm<MeasurementInputsFormData>({ defaultValues: { measurement: defaultValues } });\n\n  const onValid = (sData: MeasurementInputsFormData) => {\n    service.updateById({\n      data: { data: sData, _id },\n      onSuccess(d) {\n        ToastService.success(`Product updated`);\n      },\n      onError: e => {\n        console.error('Product update action', e);\n      },\n      onLoading: setIsLoading,\n    });\n  };\n  const canSubmit = form.formState.touchedFields?.measurement\n    ? Object.values(form.formState.touchedFields?.measurement)?.some(fd => fd)\n    : false;\n  return (\n    <AccordionForm\n      onSubmit={form.handleSubmit(onValid)}\n      label={t('Measurement info')}\n      isLoading={isLoading}\n      disabled={!canSubmit || disabled}\n      isOpen={false}\n      {...props}\n    >\n      <MeasurementInputs appForm={form} disabled={disabled} />\n    </AccordionForm>\n  );\n};\n","import { ModalFormProps } from '../ModalForm';\nimport { OfferDimensionsFormArea } from '../Forms/offers/components/OfferDimensionsFormArea';\nimport ModalBase from '../atoms/Modal';\nimport { t } from '../../lang';\nimport { toOfferFormData } from '../../utils';\nimport { useEffect } from 'react';\nimport { OfferTypeEnum } from '../../types/offers/offers.types';\nimport { OfferMeasurementFormArea } from 'components/Forms/offers/components/OfferMeasurementFormArea';\nimport { OfferBaseInfoFormArea } from '../Forms/offers/components/OfferBaseInfoFormArea';\nimport FlexBox from '../atoms/FlexBox';\nimport TabSelector from '../atoms/TabSelector';\nimport { productsFilterOptions } from '../../data/modalFilterOptions.data';\nimport { OfferFormPropertiesArea } from '../Forms/offers/components/OfferFormPropertiesArea';\nimport { useLoaders } from '../../Providers/Loaders/useLoaders.hook';\nimport { LoadersProvider, useLoadersProvider } from '../../Providers/Loaders/LoaderProvider';\nimport { OfferFormImagesArea } from '../Forms/offers/components/OfferFormImagesArea';\nimport { useAppRouter, useCurrentOffer } from '../../hooks';\nimport { OfferFormCategoriesArea } from '../Forms/offers/components/OfferFormCategoriesArea';\nimport { OfferLoadersData, OfferLoadersKey } from '../Forms/offers/types';\n\nexport interface CreateOfferModalProps extends ModalFormProps {\n  _id: string;\n}\n\nexport const useOfferLoadersProvider = () => useLoadersProvider<OfferLoadersKey, OfferLoadersData>();\n\nconst CreateOfferModal: React.FC<CreateOfferModalProps> = ({ onClose, _id }) => {\n  const loaders = useLoaders<OfferLoadersKey, OfferLoadersData>();\n  const {\n    state: { formData },\n    setData,\n  } = loaders;\n  const router = useAppRouter();\n  const currenOffer = useCurrentOffer({ _id: router.query?.offerId });\n\n  useEffect(() => {\n    router.push({ query: {} });\n\n    return () => {\n      router.push({ query: {} });\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <ModalBase\n      title={t('Create offer')}\n      onClose={onClose}\n      extraHeader={\n        <TabSelector\n          defaultValue={formData?.type ?? OfferTypeEnum.GOODS}\n          filterOptions={productsFilterOptions}\n          onOptSelect={o => setData('formData', prev => ({ ...prev, type: o.value }))}\n        />\n      }\n    >\n      <LoadersProvider value={loaders}>\n        <FlexBox padding={'0 8px 16px'}>\n          <OfferBaseInfoFormArea\n            defaultValues={formData}\n            onSuccess={data => {\n              setData('formData', toOfferFormData(data));\n\n              router.push({ query: { offerId: data?._id } });\n            }}\n            type={formData?.type}\n          />\n\n          {currenOffer && (\n            <>\n              <OfferFormCategoriesArea offer={currenOffer} defaultValues={formData?.categories} disabled={!formData} />\n\n              <OfferFormPropertiesArea offer={currenOffer} defaultValues={formData?.properties} disabled={!formData} />\n\n              <OfferFormImagesArea offer={currenOffer} defaultValues={formData?.images} disabled={!formData} />\n\n              <OfferDimensionsFormArea offer={currenOffer} defaultValues={formData?.dimensions} disabled={!formData} />\n\n              <OfferMeasurementFormArea\n                offer={currenOffer}\n                defaultValues={formData?.measurement}\n                disabled={!formData}\n              />\n            </>\n          )}\n        </FlexBox>\n      </LoadersProvider>\n    </ModalBase>\n  );\n};\n\nexport default CreateOfferModal;\n"],"names":["OfferBaseInfoFormArea","_ref","defaultValues","edit","type","onSuccess","_id","_useOfferLoadersProvi","useOfferLoadersProvider","isLoading","onLoading","service","useOffersService","brandsList","useDirectorySelector","ApiDirType","directory","_useAppForm","useAppForm","_objectSpread","errors","formState","register","registerSelect","appForm","formValues","_objectWithoutProperties","_excluded","_jsxs","AccordionForm","label","t","offer_update","offer_create","onSubmit","handleSubmit","sData","productForSubmit","toReqData","ignorePaths","updateById","data","create","onReset","reset","children","_jsx","InputLabel","error","required","InputText","placeholder","autoFocus","FlexBox","fxDirection","gap","fillWidth","sku","barCode","CustomSelect","options","OfferStatusFilterOptions","description","TextareaPrimary","dimensionsInputsProps","name","Box","styled","_templateObject","_taggedTemplateLiteral","_form$formState","_form$formState$error","form","disabled","dimensions","map","input","min","concat","valueAsNumber","OfferDimensionsFormArea","_form$formState$touch","_Object$values","_form$formState$touch2","props","_useState","useState","_useState2","_slicedToArray","setIsLoading","canSubmit","touchedFields","Object","values","some","fd","d","ToastService","onError","e","console","isOpen","DimensionsInputs","OfferFormCategoriesArea","_currentOffer$categor","_loaders$isLoading","offer","currentOffer","useCurrentOffer","loaders","initIds","sortIds","categories","p","useAppServiceProvider","ServiceName","categoriesIds","setCategoriesIds","useMemo","join","useEffect","c","ev","preventDefault","getIdRef","refreshCurrent","meta","properties","maxHeight","ListBox","flex","overflow","OfferCategoriesSelector","onChangeIds","FlexUl","OfferFormImagesArea","_loaders$state","state","images","setState","log","ConfigService","warn","FormOfferImagesComponent","hideLabel","initialData","onChangeState","contentContainerStyle","ids","_toConsumableArray","sort","a","b","localeCompare","OfferFormPropertiesArea","_ref2","_currentOffer$propert","useProductsSelector","selectedIds","setSelectedIds","_useState3","_useState4","template","setTemplate","_sortIds","propertiesList","_state$propertiesKeys","_state$propertiesKeys2","_step","_rootId","_propertiesList","_propertiesIds","propertiesKeysMap","_iterator","_createForOfIteratorHelper","s","n","done","_state$propertiesData","propId","value","prop","propertiesDataMap","isSelectable","childrenIds","length","push","err","f","handleSelect","useCallback","_parentId","valueId","arguments","undefined","prev","includes","filter","el","renderPropertiesList","OfferVariationPropertySelector","item","onSelect","updateCurrent","PropertiesGroupSelect","selected","TemplateBox","padding","alignItems","justifyContent","Text","$size","productsMeasurementUnitOptions","enumToFilterOptions","MeasurementUnit","measurementInputs","style","display","gridTemplateColumns","columnGap","_appForm$formState","dropDownIsAbsolute","onlyValue","OfferMeasurementFormArea","measurement","MeasurementInputs","useLoadersProvider","_router$query","_formData$type","onClose","useLoaders","formData","setData","router","useAppRouter","currenOffer","query","offerId","ModalBase","title","extraHeader","TabSelector","defaultValue","OfferTypeEnum","filterOptions","productsFilterOptions","onOptSelect","o","LoadersProvider","toOfferFormData","_Fragment"],"sourceRoot":""}