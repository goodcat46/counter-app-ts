{"version":3,"file":"static/js/441.90fc9c01.chunk.js","mappings":"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","sources":["components/AppPages/pagesStyles.tsx","redux/priceManagement/priceManagement.types.ts","hooks/usePriceManagementActionsCreator.hook.ts","components/AppPages/priceManagement/PagePriceManagement.tsx","components/Forms/FormCreatePriceList.tsx"],"sourcesContent":["import { css } from 'styled-components';\n\nexport const takeFullGridArea = css`\n  grid-column: 1/13;\n  grid-row: 1/13;\n`;\nexport const takeFullPlace = css`\n  width: 100%;\n  height: 100%;\n`;\nexport const tomatO = css`\n  outline: 1px solid tomato;\n`;\n","import { IBase, IDataWithPeriod, IFormDataValueWithUUID, OnlyUUID } from '../global.types';\nimport { FilterOpt } from '../../components/ModalForm/ModalFilter';\nimport { IProduct } from '../products/products.types';\nimport { IVariation } from '../products/variations.types';\nimport { AppQueryParams } from '../../api';\nimport { ICompanyBase } from '../companies/companies.types';\nimport { IUserBase } from '../auth/auth.types';\nimport { Path } from 'react-hook-form';\n\nexport enum PriceListTypeEnum {\n  PURCHASES = 'purchases',\n  SALES = 'sales',\n}\n\nexport type PriceListStatus = 'rejected' | 'approved' | 'pending' | 'error' | 'success' | 'warning' | 'info';\n\nexport type PriceListType = 'purchases' | 'sales';\n\nexport type PriceListFilterOption = FilterOpt<PriceListType>;\n\nexport interface PriceListDto extends IDataWithPeriod {\n  label: string;\n  status?: PriceListStatus;\n  type?: PriceListType;\n  customerTags?: string[];\n  supplierTags?: string[];\n  description?: string;\n}\n\nexport interface IPriceList extends IBase {\n  label: string;\n  status?: PriceListStatus;\n  prices?: IPriceListItem[];\n  products?: Partial<IProduct>[];\n  timeFrom?: string;\n  timeTo?: string;\n  description?: string;\n  type?: PriceListType;\n}\n\nexport interface AmountAndPercentage {\n  amount?: number;\n  percentage?: number;\n}\n\nexport type PriceAmountAndPercentageFieldsKey =\n  | 'discount'\n  | 'cashback'\n  | 'bonus'\n  | 'markup'\n  | 'commission'\n  | 'tax'\n  | 'vat';\n\nexport interface PriceAmountAndPercentageFields\n  extends Record<PriceAmountAndPercentageFieldsKey, AmountAndPercentage> {}\n\nexport interface IPriceBase extends PriceAmountAndPercentageFields {\n  label?: string;\n\n  in?: number;\n  out?: number;\n\n  discountLabel?: string;\n  cashbackLabel?: string;\n}\n\nexport type BasePriceInfoPath = Path<IPriceBase>;\n\nexport interface IPriceDto extends IPriceBase, IDataWithPeriod {\n  list?: OnlyUUID;\n  product?: OnlyUUID;\n  variation?: OnlyUUID;\n}\n\nexport type UpdatePriceDto = Partial<Omit<IPriceDto, 'list' | 'product' | 'variation'>>;\n\nexport interface IPriceListItem extends IBase, IPriceBase {\n  owner?: ICompanyBase;\n  author?: IUserBase;\n  editor?: IUserBase;\n\n  list?: IPriceList;\n  product?: IProduct;\n  variation?: IVariation;\n}\n\nexport interface IPriceFormData extends Omit<IPriceDto, 'product' | 'variation' | 'list'> {\n  product?: IFormDataValueWithUUID;\n  variation?: IFormDataValueWithUUID;\n  list?: IFormDataValueWithUUID;\n}\n\nexport interface IPriceListReqData {\n  _id?: string;\n  data: PriceListDto;\n  params?: AppQueryParams;\n}\n\nexport interface IPriceListItemReqData {\n  _id?: string;\n  data: IPriceDto;\n  params?: AppQueryParams;\n}\n\nexport interface ICreatePriceReqData {\n  data: IPriceDto;\n  params?: AppQueryParams;\n}\n\nexport interface IUpdatePriceReqData {\n  _id?: string;\n  data: UpdatePriceDto;\n  params?: AppQueryParams;\n}\n","import { useModalProvider } from '../components/ModalProvider/ModalProvider';\nimport { useCallback } from 'react';\nimport { TableActionCreator } from '../components/TableList/tableTypes.types';\nimport {\n  IPriceList,\n  IPriceListItem,\n  IPriceListItemReqData,\n  PriceListTypeEnum,\n} from '../redux/priceManagement/priceManagement.types';\nimport FormCreatePriceList from '../components/Forms/FormCreatePriceList';\nimport { toast } from 'react-toastify';\nimport { omit } from 'lodash';\nimport { getIdRef } from '../utils/dataTransform';\nimport { ServiceName, useAppServiceProvider } from './useAppServices.hook';\nimport { useNavigate } from 'react-router-dom';\nimport { enumToFilterOptions } from '../utils/fabrics';\n\nexport type PriceManagementActionsCreator = TableActionCreator<IPriceList>;\n\nexport const PriceManagementItemTypeFilterOptions = enumToFilterOptions(PriceListTypeEnum);\n\nexport const createPriceDataForReq = (input: Required<IPriceListItem>): IPriceListItemReqData => {\n  return {\n    ...getIdRef(input),\n    data: {\n      ...omit(input, ['createdAt', 'updatedAt', 'deletedAt', '_id']),\n      product: getIdRef(input?.product),\n    },\n  };\n};\nconst usePriceManagementActionsCreator = (): PriceManagementActionsCreator => {\n  const modals = useModalProvider();\n  const service = useAppServiceProvider()[ServiceName.priceManagement];\n\n  const navigate = useNavigate();\n\n  return useCallback(\n    ctx => {\n      const selected = ctx.selectedRow;\n      return [\n        {\n          name: 'openPriceList',\n          title: 'Відкрити',\n          icon: 'openInNew',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: !selected?._id,\n          onClick: () => {\n            selected?._id && navigate(`${selected?._id}`);\n          },\n        },\n\n        {\n          name: 'editPriceList',\n          title: 'Редагувати',\n          icon: 'edit',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        {\n          name: 'copyPriceList',\n          title: 'Копіювати',\n          icon: 'copy',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        {\n          name: 'archivePriceList',\n          title: 'Архів',\n          icon: 'archive',\n          iconSize: '90%',\n          type: 'onlyIcon',\n          disabled: true,\n        },\n        { separator: true },\n        {\n          name: 'createPriceList',\n          title: 'Новий',\n          icon: 'plus',\n          iconSize: '90%',\n          type: 'onlyIconFilled',\n          disabled: false,\n          onClick: async () => {\n            const modal = modals.handleOpenModal({\n              ModalChildren: FormCreatePriceList,\n              modalChildrenProps: {\n                filterOptions: PriceManagementItemTypeFilterOptions,\n                defaultData: { type: 'purchases' },\n                onSubmit: (data, o) => {\n                  service.createList({\n                    data,\n                    onSuccess: data => {\n                      o?.onSuccess && o?.onSuccess(data);\n                      o?.closeAfterSave && modal?.onClose();\n                      toast.success(`Created price list: ${data.label}`);\n                    },\n                  });\n                },\n              },\n            });\n          },\n        },\n      ];\n    },\n    [modals, navigate, service]\n  );\n};\n\nexport default usePriceManagementActionsCreator;\n","import TableList from 'components/TableList/TableList';\nimport { takeFullGridArea } from '../pagesStyles';\nimport styled from 'styled-components';\nimport { useEffect, useMemo, useState } from 'react';\nimport { ITableListProps } from '../../TableList/tableTypes.types';\nimport AppGridPage from '../AppGridPage';\nimport { usePriceListsSelector } from '../../../redux/selectors.store';\nimport { ISortParams } from '../../../api';\nimport { FilterReturnDataType } from '../../Filter/AppFilter';\nimport usePriceManagementServiceHook from '../../../hooks/usePriceManagementService.hook';\nimport usePriceManagementActionsCreatorHook from '../../../hooks/usePriceManagementActionsCreator.hook';\nimport { IPriceList } from '../../../redux/priceManagement/priceManagement.types';\nimport { useNavigate } from 'react-router-dom';\nimport { BaseAppPageProps } from '../index';\nimport { priceListColumns } from '../../../data/priceManagement.data';\n\ninterface Props extends BaseAppPageProps {}\nconst PagePriceManagement: React.FC<BaseAppPageProps> = (props: Props) => {\n  const service = usePriceManagementServiceHook();\n  const state = usePriceListsSelector();\n  const navigate = useNavigate();\n  const { getAll } = service;\n  const actionsCreator = usePriceManagementActionsCreatorHook();\n  const [isLoading, setIsLoading] = useState(false);\n  const [sortParams, setSortParams] = useState<ISortParams>();\n  const [filterParams, setFilterParams] = useState<FilterReturnDataType>();\n\n  const tableConfig = useMemo(\n    (): ITableListProps<IPriceList> => ({\n      tableData: state.lists,\n      tableTitles: priceListColumns,\n      isFilter: false,\n      isSearch: true,\n      footer: false,\n      checkBoxes: true,\n      actionsCreator,\n      onRowDoubleClick: ev => {\n        ev?._id && navigate(`${ev?._id}`);\n      },\n      onFilterSubmit: filterParams => {\n        setFilterParams(filterParams);\n        getAll({ data: { refresh: true, query: { filterParams, sortParams } }, onLoading: setIsLoading }).then();\n      },\n      handleTableSort: (param, sortOrder) => {\n        setSortParams({ dataPath: param.dataPath, sortOrder });\n        getAll({\n          data: { refresh: true, query: { sortParams: { dataPath: param.dataPath, sortOrder }, filterParams } },\n          onLoading: setIsLoading,\n        }).then();\n      },\n    }),\n    [actionsCreator, filterParams, getAll, navigate, sortParams, state.lists]\n  );\n\n  useEffect(() => {\n    if (sortParams || filterParams) {\n      return;\n    }\n\n    if (!sortParams && !filterParams) {\n      if (state.lists.length === 0) {\n        getAll({\n          data: { refresh: true },\n          onLoading: setIsLoading,\n          onSuccess(d) {\n            console.log('PagePriceManagement onSuccess getAll');\n          },\n        });\n      }\n    }\n  }, [filterParams, getAll, sortParams, state.lists.length]);\n\n  return (\n    <AppGridPage path={props.path}>\n      <Page>\n        <TableList {...tableConfig} isLoading={isLoading} />\n      </Page>\n    </AppGridPage>\n  );\n};\n\nconst Page = styled.div`\n  ${takeFullGridArea}\n`;\n\nexport default PagePriceManagement;\n","import {\n  IPriceList,\n  IPriceListReqData,\n  PriceListDto,\n  PriceListType,\n} from '../../redux/priceManagement/priceManagement.types';\nimport ModalForm, { ModalFormProps } from '../ModalForm';\nimport { AppSubmitHandler } from '../../hooks/useAppForm.hook';\nimport { useAppForm } from '../../hooks';\nimport { omit } from 'lodash';\nimport FlexBox from '../atoms/FlexBox';\nimport InputLabel from '../atoms/Inputs/InputLabel';\nimport InputText from '../atoms/Inputs/InputText';\nimport translate from '../../lang';\nimport ExtraFooterWithButton from '../atoms/ExtraFooterWithButton';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport FormAfterSubmitOptions, { useAfterSubmitOptions } from './components/FormAfterSubmitOptions';\nimport TextareaPrimary from '../atoms/Inputs/TextareaPrimary';\n\nexport interface FormCreatePriceListProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n  defaultData?: Partial<IPriceList>;\n  edit?: boolean;\n  onSubmit?: AppSubmitHandler<\n    IPriceListReqData,\n    {\n      onSuccess: (data: IPriceList) => void;\n      onError: () => void;\n    }\n  >;\n}\n\nconst FormCreatePriceList: React.FC<FormCreatePriceListProps> = ({\n  filterOptions,\n  onSubmit,\n  defaultData,\n  edit,\n  ...props\n}) => {\n  const submitOptions = useAfterSubmitOptions();\n  const [isSuccess] = useState(false);\n  // const modalService = useModalProvider();\n  // const [currentList, setCurrentList] = useState<IPriceList | undefined>();\n  // const currentList = usePriceListById();\n  const {\n    formState: { errors, isValid },\n    register,\n    setValue,\n    handleSubmit,\n  } = useAppForm<PriceListDto>({\n    defaultValues: omit(defaultData, ['createdAt', 'updatedAt', '_id']),\n  });\n\n  const onValidSubmit = (data: PriceListDto) =>\n    onSubmit &&\n    onSubmit(\n      {\n        data,\n        _id: defaultData?._id,\n      },\n      {\n        closeAfterSave: submitOptions.state.close,\n        onSuccess: _data => {},\n        onError: () => {},\n      }\n    );\n\n  const onAddPricesClick = () => {\n    // const newPrice = { _id: nanoid(8).toString() };\n    // toast.info(newPrice._id);\n    // setValue('prices', Array.isArray(formValues.prices) ? [...formValues.prices, newPrice] : [newPrice]);\n    // const modal = modalService.handleOpenModal({\n    //   ModalChildren: FormCreatePrice,\n    //   modalChildrenProps: {\n    //     title: 'Add prices',\n    //     type: formValues.type,\n    //   },\n    // });\n  };\n  return (\n    <ModalForm\n      isValid={isValid}\n      onSubmit={handleSubmit(onValidSubmit)}\n      title={'Create price list'}\n      {...props}\n      fitContentV\n      filterOptions={filterOptions}\n      defaultFilterValue={defaultData?.type}\n      onOptSelect={(option, value) => {\n        setValue('type', value);\n      }}\n      extraFooter={\n        <FlexBox fxDirection={'column'} fillWidth>\n          {isSuccess && <ExtraFooterWithButton buttonText={'Add prices'} onClick={onAddPricesClick} />}\n          <FormAfterSubmitOptions {...submitOptions} />\n        </FlexBox>\n      }\n    >\n      <FlexBox fxDirection={'column'} gap={4} padding={'8px 16px 16px'}>\n        <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n          <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n        </InputLabel>\n\n        <FlexBox fxDirection={'row'} gap={16}>\n          <InputLabel label={translate('timeFrom')} direction={'vertical'} error={errors.timeFrom} required>\n            <InputText placeholder={translate('timeFrom')} type={'datetime-local'} {...register('timeFrom')} />\n          </InputLabel>\n\n          <InputLabel label={translate('timeTo')} direction={'vertical'} error={errors.timeTo} required>\n            <InputText placeholder={translate('timeTo')} type={'datetime-local'} {...register('timeTo')} />\n          </InputLabel>\n        </FlexBox>\n\n        <InputLabel label={translate('description')} direction={'vertical'} error={errors.description}>\n          <TextareaPrimary placeholder={translate('description')} {...register('description')} />\n        </InputLabel>\n      </FlexBox>\n    </ModalForm>\n  );\n};\n\nexport default FormCreatePriceList;\n//\n// const FormCreatePrice: React.FC<FormCreatePriceProps> = ({ defaultState, type, onSubmit, ...props }) => {\n//   const {\n//     formState: { errors, isValid },\n//     formValues,\n//     register,\n//     registerSelect,\n//     clearAfterSave,\n//     closeAfterSave,\n//     toggleAfterSubmitOption,\n//     setValue,\n//     handleSubmit,\n//   } = useAppForm<PriceListItemDto>();\n//   const onValidSubmit = (data: PriceListItemDto) =>\n//     onSubmit &&\n//     onSubmit(\n//       {\n//         _id: defaultState?._id,\n//         data,\n//       },\n//       {\n//         clearAfterSave,\n//         closeAfterSave,\n//       }\n//     );\n//\n//   return (\n//     <ModalForm fitContentV isValid {...props} onSubmit={handleSubmit(onValidSubmit)}>\n//       <FlexBox gap={4} padding={'0 16px 16px'}>\n//         <InputLabel label={translate('label')} direction={'vertical'} error={errors.label} required>\n//           <InputText placeholder={translate('label')} {...register('label')} required autoFocus />\n//         </InputLabel>\n//         {type === 'sales' && (\n//           <InputLabel label={translate('price')} direction={'vertical'} error={errors.price} required>\n//             <InputText placeholder={translate('price')} {...register('price')} required autoFocus />\n//           </InputLabel>\n//         )}\n//         {type === 'purchases' && (\n//           <InputLabel label={translate('cost')} direction={'vertical'} error={errors.cost} required>\n//             <InputText placeholder={translate('cost')} {...register('cost')} required autoFocus />\n//           </InputLabel>\n//         )}\n//       </FlexBox>\n//     </ModalForm>\n//   );\n// };\n// export interface FormCreatePriceProps extends Omit<ModalFormProps<PriceListType>, 'onSubmit' | 'afterSubmit'> {\n//   defaultState?: Partial<IPriceListItem>;\n//   onSubmit?: AppSubmitHandler<IPriceListItemReqData>;\n//   type?: PriceListType;\n// }\n"],"names":["takeFullGridArea","css","_templateObject","_taggedTemplateLiteral","takeFullPlace","_templateObject2","_templateObject3","PriceListTypeEnum","PriceManagementItemTypeFilterOptions","enumToFilterOptions","modals","useModalProvider","service","useAppServiceProvider","ServiceName","navigate","useNavigate","useCallback","ctx","selected","selectedRow","name","title","icon","iconSize","type","disabled","_id","onClick","concat","separator","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","modal","wrap","_context","prev","next","handleOpenModal","ModalChildren","FormCreatePriceList","modalChildrenProps","filterOptions","defaultData","onSubmit","data","o","createList","onSuccess","closeAfterSave","onClose","toast","label","stop","apply","arguments","Page","styled","props","usePriceManagementServiceHook","state","usePriceListsSelector","getAll","actionsCreator","usePriceManagementActionsCreatorHook","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","sortParams","setSortParams","_useState5","_useState6","filterParams","setFilterParams","tableConfig","useMemo","tableData","lists","tableTitles","priceListColumns","isFilter","isSearch","footer","checkBoxes","onRowDoubleClick","ev","onFilterSubmit","refresh","query","onLoading","then","handleTableSort","param","sortOrder","dataPath","useEffect","length","d","console","log","_jsx","AppGridPage","path","children","TableList","_objectSpread","_ref","edit","_objectWithoutProperties","_excluded","submitOptions","useAfterSubmitOptions","isSuccess","_useAppForm","useAppForm","defaultValues","omit","_useAppForm$formState","formState","errors","isValid","register","setValue","handleSubmit","ModalForm","close","_data","onError","fitContentV","defaultFilterValue","onOptSelect","option","value","extraFooter","_jsxs","FlexBox","fxDirection","fillWidth","ExtraFooterWithButton","buttonText","FormAfterSubmitOptions","gap","padding","InputLabel","translate","direction","error","required","InputText","placeholder","autoFocus","timeFrom","timeTo","description","TextareaPrimary"],"sourceRoot":""}